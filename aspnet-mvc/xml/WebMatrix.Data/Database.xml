<Type Name="Database" FullName="WebMatrix.Data.Database">
  <TypeSignature Language="C#" Value="public class Database : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Database extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:WebMatrix.Data.Database" />
  <TypeSignature Language="VB.NET" Value="Public Class Database&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type Database = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>WebMatrix.Data</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Provides methods and properties that are used to access and manage data that is stored in a database.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebMatrix.Data.Database.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="database.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WebMatrix.Data</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes an open database.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection Connection" />
      <MemberSignature Language="DocId" Value="P:WebMatrix.Data.Database.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As DbConnection" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.Common.DbConnection" Usage="WebMatrix.Data.Database.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WebMatrix.Data</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current connection to a database.</summary>
        <value>The connection.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionOpened">
      <MemberSignature Language="C#" Value="public static event EventHandler&lt;WebMatrix.Data.ConnectionEventArgs&gt; ConnectionOpened;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class WebMatrix.Data.ConnectionEventArgs&gt; ConnectionOpened" />
      <MemberSignature Language="DocId" Value="E:WebMatrix.Data.Database.ConnectionOpened" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ConnectionOpened As EventHandler(Of ConnectionEventArgs) " />
      <MemberSignature Language="F#" Value="member this.ConnectionOpened : EventHandler&lt;WebMatrix.Data.ConnectionEventArgs&gt; " Usage="member this.ConnectionOpened : System.EventHandler&lt;WebMatrix.Data.ConnectionEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>WebMatrix.Data</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;WebMatrix.Data.ConnectionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when a new database connection is opened by a <see cref="T:WebMatrix.Data.Database" /> instance.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebMatrix.Data.Database.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="database.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WebMatrix.Data</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases all resources used by a <see cref="T:WebMatrix.Data.Database" /> instance.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebMatrix.Data.Database.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="database.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WebMatrix.Data</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by a <see cref="T:WebMatrix.Data.Database" /> instance and optionally releases the managed resources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public int Execute (string commandText, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Execute(string commandText, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebMatrix.Data.Database.Execute(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Execute (commandText As String, ParamArray args As Object()) As Integer" />
      <MemberSignature Language="F#" Value="member this.Execute : string * obj[] -&gt; int" Usage="database.Execute (commandText, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WebMatrix.Data</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="commandText">The SQL statement to execute.</param>
        <param name="args">(Optional) Parameters to pass to the SQL statement.</param>
        <summary>Executes a non-query SQL statement.</summary>
        <returns>The count of records affected by the SQL statement.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="commandText" /> is null or empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetLastInsertId">
      <MemberSignature Language="C#" Value="public dynamic GetLastInsertId ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetLastInsertId() cil managed" />
      <MemberSignature Language="DocId" Value="M:WebMatrix.Data.Database.GetLastInsertId" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLastInsertId () As Object" />
      <MemberSignature Language="F#" Value="member this.GetLastInsertId : unit -&gt; obj" Usage="database.GetLastInsertId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WebMatrix.Data</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the identity column of the most recently inserted row.</summary>
        <returns>The ID of the most recently inserted row.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public static WebMatrix.Data.Database Open (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class WebMatrix.Data.Database Open(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebMatrix.Data.Database.Open(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Open (name As String) As Database" />
      <MemberSignature Language="F#" Value="static member Open : string -&gt; WebMatrix.Data.Database" Usage="WebMatrix.Data.Database.Open name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WebMatrix.Data</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>WebMatrix.Data.Database</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name associated with the database to open. <paramref name="name" /> can specify an .sdf or .mdf database file that is in the App_Data folder. (Do not include the file-name extension.) Alternatively, <paramref name="name" /> can specify the name of a connection string in the Web.config file.</param>
        <summary>Opens a connection to a database using the specified file name or using the named connection string.</summary>
        <returns>The database instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenConnectionString">
      <MemberSignature Language="C#" Value="public static WebMatrix.Data.Database OpenConnectionString (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class WebMatrix.Data.Database OpenConnectionString(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebMatrix.Data.Database.OpenConnectionString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenConnectionString (connectionString As String) As Database" />
      <MemberSignature Language="F#" Value="static member OpenConnectionString : string -&gt; WebMatrix.Data.Database" Usage="WebMatrix.Data.Database.OpenConnectionString connectionString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WebMatrix.Data</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>WebMatrix.Data.Database</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">The connection string that contains information that is used to connect to a database.</param>
        <summary>Opens a connection to a database using the specified connection string.</summary>
        <returns>The database instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionString" /> is null or empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenConnectionString">
      <MemberSignature Language="C#" Value="public static WebMatrix.Data.Database OpenConnectionString (string connectionString, string providerName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class WebMatrix.Data.Database OpenConnectionString(string connectionString, string providerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebMatrix.Data.Database.OpenConnectionString(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenConnectionString (connectionString As String, providerName As String) As Database" />
      <MemberSignature Language="F#" Value="static member OpenConnectionString : string * string -&gt; WebMatrix.Data.Database" Usage="WebMatrix.Data.Database.OpenConnectionString (connectionString, providerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WebMatrix.Data</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>WebMatrix.Data.Database</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="providerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">The connection string that contains information that is used to connect to a database.</param>
        <param name="providerName">(Optional) The name of the .NET Framework data provider to use to connect to the data source.</param>
        <summary>Opens a connection to a database using a connection string and the specified provider.</summary>
        <returns>The database instance.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="connectionString" /> is null or empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;dynamic&gt; Query (string commandText, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; Query(string commandText, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebMatrix.Data.Database.Query(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Query (commandText As String, ParamArray parameters As Object()) As IEnumerable(Of Object)" />
      <MemberSignature Language="F#" Value="member this.Query : string * obj[] -&gt; seq&lt;obj&gt;" Usage="database.Query (commandText, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WebMatrix.Data</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="commandText">The SQL query to execute.</param>
        <param name="parameters">(Optional) Parameters to pass to the SQL query.</param>
        <summary>Executes a SQL query that returns a list of rows as the result.</summary>
        <returns>The rows returned by the SQL query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuerySingle">
      <MemberSignature Language="C#" Value="public dynamic QuerySingle (string commandText, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object QuerySingle(string commandText, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebMatrix.Data.Database.QuerySingle(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function QuerySingle (commandText As String, ParamArray args As Object()) As Object" />
      <MemberSignature Language="F#" Value="member this.QuerySingle : string * obj[] -&gt; obj" Usage="database.QuerySingle (commandText, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WebMatrix.Data</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="commandText">The SQL query to execute.</param>
        <param name="args">(Optional) Parameters to pass to the SQL query.</param>
        <summary>Executes a SQL query that returns a single row as the result.</summary>
        <returns>The single row returned by the SQL query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryValue">
      <MemberSignature Language="C#" Value="public dynamic QueryValue (string commandText, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object QueryValue(string commandText, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:WebMatrix.Data.Database.QueryValue(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function QueryValue (commandText As String, ParamArray args As Object()) As Object" />
      <MemberSignature Language="F#" Value="member this.QueryValue : string * obj[] -&gt; obj" Usage="database.QueryValue (commandText, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WebMatrix.Data</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="commandText">The SQL query to execute.</param>
        <param name="args">(Optional) Parameters to pass to the SQL query.</param>
        <summary>Executes a SQL query that returns a single scalar value as the result.</summary>
        <returns>The scalar value returned by the SQL query.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
