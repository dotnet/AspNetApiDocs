<Type Name="TokenizerBackedParser&lt;TTokenizer,TSymbol,TSymbolType&gt;" FullName="System.Web.Razor.Parser.TokenizerBackedParser&lt;TTokenizer,TSymbol,TSymbolType&gt;">
  <TypeSignature Language="C#" Value="public abstract class TokenizerBackedParser&lt;TTokenizer,TSymbol,TSymbolType&gt; : System.Web.Razor.Parser.ParserBase where TTokenizer : Tokenizer&lt;TSymbol,TSymbolType&gt; where TSymbol : SymbolBase&lt;TSymbolType&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TokenizerBackedParser`3&lt;(class System.Web.Razor.Tokenizer.Tokenizer`2&lt;!TSymbol, !TSymbolType&gt;) TTokenizer, (class System.Web.Razor.Tokenizer.Symbols.SymbolBase`1&lt;!TSymbolType&gt;) TSymbol, TSymbolType&gt; extends System.Web.Razor.Parser.ParserBase" />
  <TypeSignature Language="DocId" Value="T:System.Web.Razor.Parser.TokenizerBackedParser`3" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TokenizerBackedParser(Of TTokenizer, TSymbol, TSymbolType)&#xA;Inherits ParserBase" />
  <TypeSignature Language="F#" Value="type TokenizerBackedParser&lt;'okenizer, 'Symbol, 'SymbolType (requires 'okenizer :&gt; Tokenizer&lt;'Symbol, 'SymbolType&gt; and 'Symbol :&gt; SymbolBase&lt;'SymbolType&gt;)&gt; = class&#xA;    inherit ParserBase" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Razor</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TTokenizer">
      <Constraints>
        <BaseTypeName>System.Web.Razor.Tokenizer.Tokenizer&lt;TSymbol,TSymbolType&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TSymbol">
      <Constraints>
        <BaseTypeName>System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;TSymbolType&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TSymbolType" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Web.Razor.Parser.ParserBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TTokenizer">The type of tokenizer.</typeparam>
    <typeparam name="TSymbol">The type of symbol.</typeparam>
    <typeparam name="TSymbolType">The type of SymbolType.</typeparam>
    <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Represents a tokenizer backed parser.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TokenizerBackedParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Initializes a new instance of the <see cref="T:System.Web.Razor.Parser.TokenizerBackedParser`3" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal void Accept (System.Collections.Generic.IEnumerable&lt;TSymbol&gt; symbols);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Accept(class System.Collections.Generic.IEnumerable`1&lt;!TSymbol&gt; symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Accept(System.Collections.Generic.IEnumerable{`1})" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub Accept (symbols As IEnumerable(Of TSymbol))" />
      <MemberSignature Language="F#" Value="member this.Accept : seq&lt;'Symbol (requires 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt; -&gt; unit" Usage="tokenizerBackedParser.Accept symbols" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbols" Type="System.Collections.Generic.IEnumerable&lt;TSymbol&gt;" />
      </Parameters>
      <Docs>
        <param name="symbols">The list of symbols.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Accepts the list of symbols</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal void Accept (TSymbol symbol);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Accept(!TSymbol symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Accept(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub Accept (symbol As TSymbol)" />
      <MemberSignature Language="F#" Value="member this.Accept : 'Symbol -&gt; unit" Usage="tokenizerBackedParser.Accept symbol" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="TSymbol" />
      </Parameters>
      <Docs>
        <param name="symbol">The symbol to accept.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Accepts the specified symbol.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptAll">
      <MemberSignature Language="C#" Value="protected internal bool AcceptAll (params TSymbolType[] types);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool AcceptAll(!TSymbolType[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AcceptAll(`2[])" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function AcceptAll (ParamArray types As TSymbolType()) As Boolean" />
      <MemberSignature Language="F#" Value="member this.AcceptAll : 'SymbolType[] -&gt; bool" Usage="tokenizerBackedParser.AcceptAll types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="TSymbolType[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types">The types.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether the parser accepts all types of tokenizer.</summary>
        <returns>true of the parser accepts all types of tokenizer; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptAndMoveNext">
      <MemberSignature Language="C#" Value="protected internal bool AcceptAndMoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool AcceptAndMoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AcceptAndMoveNext" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function AcceptAndMoveNext () As Boolean" />
      <MemberSignature Language="F#" Value="member this.AcceptAndMoveNext : unit -&gt; bool" Usage="tokenizerBackedParser.AcceptAndMoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether the parser accepts and moves to the next tokenizer.</summary>
        <returns>true if the parser accepts and moves to the next tokenizer; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptSingleWhiteSpaceCharacter">
      <MemberSignature Language="C#" Value="protected TSymbol AcceptSingleWhiteSpaceCharacter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance !TSymbol AcceptSingleWhiteSpaceCharacter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AcceptSingleWhiteSpaceCharacter" />
      <MemberSignature Language="VB.NET" Value="Protected Function AcceptSingleWhiteSpaceCharacter () As TSymbol" />
      <MemberSignature Language="F#" Value="member this.AcceptSingleWhiteSpaceCharacter : unit -&gt; 'Symbol" Usage="tokenizerBackedParser.AcceptSingleWhiteSpaceCharacter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSymbol</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether the parser accepts single whitespace character.</summary>
        <returns>true if the parser accepts single whitespace character; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptUntil">
      <MemberSignature Language="C#" Value="protected internal void AcceptUntil (TSymbolType type);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AcceptUntil(!TSymbolType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AcceptUntil (type As TSymbolType)" />
      <MemberSignature Language="F#" Value="member this.AcceptUntil : 'SymbolType -&gt; unit" Usage="tokenizerBackedParser.AcceptUntil type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TSymbolType" />
      </Parameters>
      <Docs>
        <param name="type">The type of the token.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Accepts token until a token of the given type is found.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptUntil">
      <MemberSignature Language="C#" Value="protected internal void AcceptUntil (params TSymbolType[] types);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AcceptUntil(!TSymbolType[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2[])" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AcceptUntil (ParamArray types As TSymbolType())" />
      <MemberSignature Language="F#" Value="member this.AcceptUntil : 'SymbolType[] -&gt; unit" Usage="tokenizerBackedParser.AcceptUntil types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="TSymbolType[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types">The types of the token.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Accepts token until a token of the given types is found.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptUntil">
      <MemberSignature Language="C#" Value="protected internal void AcceptUntil (TSymbolType type1, TSymbolType type2);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AcceptUntil(!TSymbolType type1, !TSymbolType type2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AcceptUntil (type1 As TSymbolType, type2 As TSymbolType)" />
      <MemberSignature Language="F#" Value="member this.AcceptUntil : 'SymbolType * 'SymbolType -&gt; unit" Usage="tokenizerBackedParser.AcceptUntil (type1, type2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type1" Type="TSymbolType" />
        <Parameter Name="type2" Type="TSymbolType" />
      </Parameters>
      <Docs>
        <param name="type1">The type of the first token.</param>
        <param name="type2">The type of the second token.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Accepts token until a token of the given type is found and it will backup so that the next token is of the given type.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptUntil">
      <MemberSignature Language="C#" Value="protected internal void AcceptUntil (TSymbolType type1, TSymbolType type2, TSymbolType type3);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AcceptUntil(!TSymbolType type1, !TSymbolType type2, !TSymbolType type3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AcceptUntil(`2,`2,`2)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AcceptUntil (type1 As TSymbolType, type2 As TSymbolType, type3 As TSymbolType)" />
      <MemberSignature Language="F#" Value="member this.AcceptUntil : 'SymbolType * 'SymbolType * 'SymbolType -&gt; unit" Usage="tokenizerBackedParser.AcceptUntil (type1, type2, type3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type1" Type="TSymbolType" />
        <Parameter Name="type2" Type="TSymbolType" />
        <Parameter Name="type3" Type="TSymbolType" />
      </Parameters>
      <Docs>
        <param name="type1">The type of the first token.</param>
        <param name="type2">The type of the second token.</param>
        <param name="type3">The type of the third token.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Accepts the given tokens until a token of the given type is found.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptWhile">
      <MemberSignature Language="C#" Value="protected internal void AcceptWhile (Func&lt;TSymbol,bool&gt; condition);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AcceptWhile(class System.Func`2&lt;!TSymbol, bool&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(System.Func{`1,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AcceptWhile (condition As Func(Of TSymbol, Boolean))" />
      <MemberSignature Language="F#" Value="member this.AcceptWhile : Func&lt;'Symbol, bool (requires 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt; -&gt; unit" Usage="tokenizerBackedParser.AcceptWhile condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;TSymbol,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">The condition.</param>
        <summary>Accepts token while the condition has been reached.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptWhile">
      <MemberSignature Language="C#" Value="protected internal void AcceptWhile (TSymbolType type);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AcceptWhile(!TSymbolType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AcceptWhile (type As TSymbolType)" />
      <MemberSignature Language="F#" Value="member this.AcceptWhile : 'SymbolType -&gt; unit" Usage="tokenizerBackedParser.AcceptWhile type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TSymbolType" />
      </Parameters>
      <Docs>
        <param name="type">The type of the token.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Accepts the token while a token of the given type is not found.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptWhile">
      <MemberSignature Language="C#" Value="protected internal void AcceptWhile (params TSymbolType[] types);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AcceptWhile(!TSymbolType[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2[])" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AcceptWhile (ParamArray types As TSymbolType())" />
      <MemberSignature Language="F#" Value="member this.AcceptWhile : 'SymbolType[] -&gt; unit" Usage="tokenizerBackedParser.AcceptWhile types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="TSymbolType[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types">The types.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Accepts token while the token of the given types has been reached.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptWhile">
      <MemberSignature Language="C#" Value="protected internal void AcceptWhile (TSymbolType type1, TSymbolType type2);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AcceptWhile(!TSymbolType type1, !TSymbolType type2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AcceptWhile (type1 As TSymbolType, type2 As TSymbolType)" />
      <MemberSignature Language="F#" Value="member this.AcceptWhile : 'SymbolType * 'SymbolType -&gt; unit" Usage="tokenizerBackedParser.AcceptWhile (type1, type2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type1" Type="TSymbolType" />
        <Parameter Name="type2" Type="TSymbolType" />
      </Parameters>
      <Docs>
        <param name="type1">The type of the first token.</param>
        <param name="type2">The type of the second token.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Accepts token while the token of the given type has been reached.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptWhile">
      <MemberSignature Language="C#" Value="protected internal void AcceptWhile (TSymbolType type1, TSymbolType type2, TSymbolType type3);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AcceptWhile(!TSymbolType type1, !TSymbolType type2, !TSymbolType type3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AcceptWhile(`2,`2,`2)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AcceptWhile (type1 As TSymbolType, type2 As TSymbolType, type3 As TSymbolType)" />
      <MemberSignature Language="F#" Value="member this.AcceptWhile : 'SymbolType * 'SymbolType * 'SymbolType -&gt; unit" Usage="tokenizerBackedParser.AcceptWhile (type1, type2, type3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type1" Type="TSymbolType" />
        <Parameter Name="type2" Type="TSymbolType" />
        <Parameter Name="type3" Type="TSymbolType" />
      </Parameters>
      <Docs>
        <param name="type1">The type of the first token.</param>
        <param name="type2">The type of the second token.</param>
        <param name="type3">The type of the third token.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Accepts token while the token of the given type has been reached.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptWhiteSpaceInLines">
      <MemberSignature Language="C#" Value="protected TSymbol AcceptWhiteSpaceInLines ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance !TSymbol AcceptWhiteSpaceInLines() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AcceptWhiteSpaceInLines" />
      <MemberSignature Language="VB.NET" Value="Protected Function AcceptWhiteSpaceInLines () As TSymbol" />
      <MemberSignature Language="F#" Value="member this.AcceptWhiteSpaceInLines : unit -&gt; 'Symbol" Usage="tokenizerBackedParser.AcceptWhiteSpaceInLines " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSymbol</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether the parser accepts whitespace in lines.</summary>
        <returns>true if the parser accepts whitespace in lines; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMarkerSymbolIfNecessary">
      <MemberSignature Language="C#" Value="protected internal void AddMarkerSymbolIfNecessary ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddMarkerSymbolIfNecessary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddMarkerSymbolIfNecessary ()" />
      <MemberSignature Language="F#" Value="member this.AddMarkerSymbolIfNecessary : unit -&gt; unit" Usage="tokenizerBackedParser.AddMarkerSymbolIfNecessary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Adds a marker symbol if necessary.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMarkerSymbolIfNecessary">
      <MemberSignature Language="C#" Value="protected internal void AddMarkerSymbolIfNecessary (System.Web.Razor.Text.SourceLocation location);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddMarkerSymbolIfNecessary(valuetype System.Web.Razor.Text.SourceLocation location) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AddMarkerSymbolIfNecessary(System.Web.Razor.Text.SourceLocation)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddMarkerSymbolIfNecessary (location As SourceLocation)" />
      <MemberSignature Language="F#" Value="member this.AddMarkerSymbolIfNecessary : System.Web.Razor.Text.SourceLocation -&gt; unit" Usage="tokenizerBackedParser.AddMarkerSymbolIfNecessary location" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.Web.Razor.Text.SourceLocation" />
      </Parameters>
      <Docs>
        <param name="location">The location where to add the symbol.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Adds a marker symbol if necessary.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="At">
      <MemberSignature Language="C#" Value="protected internal bool At (TSymbolType type);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool At(!TSymbolType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.At(`2)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function At (type As TSymbolType) As Boolean" />
      <MemberSignature Language="F#" Value="member this.At : 'SymbolType -&gt; bool" Usage="tokenizerBackedParser.At type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TSymbolType" />
      </Parameters>
      <Docs>
        <param name="type">The type.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether the token is at the specified type.</summary>
        <returns>true if the token is at the specified type; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AtIdentifier">
      <MemberSignature Language="C#" Value="protected bool AtIdentifier (bool allowKeywords);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool AtIdentifier(bool allowKeywords) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.AtIdentifier(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Function AtIdentifier (allowKeywords As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="member this.AtIdentifier : bool -&gt; bool" Usage="tokenizerBackedParser.AtIdentifier allowKeywords" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowKeywords" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowKeywords">true to allow keywords; otherwise, false.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether the token is at the specified identifier.</summary>
        <returns>true if the token is at the specified identifier; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Balance">
      <MemberSignature Language="C#" Value="protected internal bool Balance (System.Web.Razor.Parser.BalancingModes mode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool Balance(valuetype System.Web.Razor.Parser.BalancingModes mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Balance(System.Web.Razor.Parser.BalancingModes)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function Balance (mode As BalancingModes) As Boolean" />
      <MemberSignature Language="F#" Value="member this.Balance : System.Web.Razor.Parser.BalancingModes -&gt; bool" Usage="tokenizerBackedParser.Balance mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Web.Razor.Parser.BalancingModes" />
      </Parameters>
      <Docs>
        <param name="mode">The balancing mode.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether the parsing is balance.</summary>
        <returns>true if the parsing is balance; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Balance">
      <MemberSignature Language="C#" Value="protected internal bool Balance (System.Web.Razor.Parser.BalancingModes mode, TSymbolType left, TSymbolType right, System.Web.Razor.Text.SourceLocation start);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool Balance(valuetype System.Web.Razor.Parser.BalancingModes mode, !TSymbolType left, !TSymbolType right, valuetype System.Web.Razor.Text.SourceLocation start) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Balance(System.Web.Razor.Parser.BalancingModes,`2,`2,System.Web.Razor.Text.SourceLocation)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function Balance (mode As BalancingModes, left As TSymbolType, right As TSymbolType, start As SourceLocation) As Boolean" />
      <MemberSignature Language="F#" Value="member this.Balance : System.Web.Razor.Parser.BalancingModes * 'SymbolType * 'SymbolType * System.Web.Razor.Text.SourceLocation -&gt; bool" Usage="tokenizerBackedParser.Balance (mode, left, right, start)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Web.Razor.Parser.BalancingModes" />
        <Parameter Name="left" Type="TSymbolType" />
        <Parameter Name="right" Type="TSymbolType" />
        <Parameter Name="start" Type="System.Web.Razor.Text.SourceLocation" />
      </Parameters>
      <Docs>
        <param name="mode">The balancing mode.</param>
        <param name="left">The left parse.</param>
        <param name="right">The right parse.</param>
        <param name="start">The start of the mode.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether the parsing is balance.</summary>
        <returns>true if the parsing is balance; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildSpan">
      <MemberSignature Language="C#" Value="public override void BuildSpan (System.Web.Razor.Parser.SyntaxTree.SpanBuilder span, System.Web.Razor.Text.SourceLocation start, string content);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void BuildSpan(class System.Web.Razor.Parser.SyntaxTree.SpanBuilder span, valuetype System.Web.Razor.Text.SourceLocation start, string content) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.BuildSpan(System.Web.Razor.Parser.SyntaxTree.SpanBuilder,System.Web.Razor.Text.SourceLocation,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub BuildSpan (span As SpanBuilder, start As SourceLocation, content As String)" />
      <MemberSignature Language="F#" Value="override this.BuildSpan : System.Web.Razor.Parser.SyntaxTree.SpanBuilder * System.Web.Razor.Text.SourceLocation * string -&gt; unit" Usage="tokenizerBackedParser.BuildSpan (span, start, content)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.Web.Razor.Parser.SyntaxTree.SpanBuilder" />
        <Parameter Name="start" Type="System.Web.Razor.Text.SourceLocation" />
        <Parameter Name="content" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="span">The span to build.</param>
        <param name="start">The start location to build the span.</param>
        <param name="content">The content of the span.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Builds a specified span.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureSpan">
      <MemberSignature Language="C#" Value="protected void ConfigureSpan (Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder,Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt;&gt; config);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ConfigureSpan(class System.Action`2&lt;class System.Web.Razor.Parser.SyntaxTree.SpanBuilder, class System.Action`1&lt;class System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt;&gt; config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{System.Web.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{System.Web.Razor.Parser.SyntaxTree.SpanBuilder}})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ConfigureSpan (config As Action(Of SpanBuilder, Action(Of SpanBuilder)))" />
      <MemberSignature Language="F#" Value="member this.ConfigureSpan : Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder, Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt;&gt; -&gt; unit" Usage="tokenizerBackedParser.ConfigureSpan config" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="config" Type="System.Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder,System.Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="config">The configuration.</param>
        <summary>Configures the span.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureSpan">
      <MemberSignature Language="C#" Value="protected void ConfigureSpan (Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt; config);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ConfigureSpan(class System.Action`1&lt;class System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt; config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.ConfigureSpan(System.Action{System.Web.Razor.Parser.SyntaxTree.SpanBuilder})" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ConfigureSpan (config As Action(Of SpanBuilder))" />
      <MemberSignature Language="F#" Value="member this.ConfigureSpan : Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt; -&gt; unit" Usage="tokenizerBackedParser.ConfigureSpan config" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="config" Type="System.Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="config">The configuration.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Configures the span.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentLocation">
      <MemberSignature Language="C#" Value="protected System.Web.Razor.Text.SourceLocation CurrentLocation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Razor.Text.SourceLocation CurrentLocation" />
      <MemberSignature Language="DocId" Value="P:System.Web.Razor.Parser.TokenizerBackedParser`3.CurrentLocation" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CurrentLocation As SourceLocation" />
      <MemberSignature Language="F#" Value="member this.CurrentLocation : System.Web.Razor.Text.SourceLocation" Usage="System.Web.Razor.Parser.TokenizerBackedParser&lt;'okenizer, 'Symbol, 'SymbolType (requires 'okenizer :&gt; System.Web.Razor.Tokenizer.Tokenizer&lt;'Symbol, 'SymbolType&gt; and 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt;.CurrentLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Razor.Text.SourceLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Gets the current location of the current instance.</summary>
        <value>The current location of the current instance.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentSymbol">
      <MemberSignature Language="C#" Value="protected TSymbol CurrentSymbol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TSymbol CurrentSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Web.Razor.Parser.TokenizerBackedParser`3.CurrentSymbol" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property CurrentSymbol As TSymbol" />
      <MemberSignature Language="F#" Value="member this.CurrentSymbol : 'Symbol" Usage="System.Web.Razor.Parser.TokenizerBackedParser&lt;'okenizer, 'Symbol, 'SymbolType (requires 'okenizer :&gt; System.Web.Razor.Tokenizer.Tokenizer&lt;'Symbol, 'SymbolType&gt; and 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt;.CurrentSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Gets the current symbol of this instance.</summary>
        <value>The current symbol of this instance.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfFile">
      <MemberSignature Language="C#" Value="protected bool EndOfFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.Razor.Parser.TokenizerBackedParser`3.EndOfFile" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property EndOfFile As Boolean" />
      <MemberSignature Language="F#" Value="member this.EndOfFile : bool" Usage="System.Web.Razor.Parser.TokenizerBackedParser&lt;'okenizer, 'Symbol, 'SymbolType (requires 'okenizer :&gt; System.Web.Razor.Tokenizer.Tokenizer&lt;'Symbol, 'SymbolType&gt; and 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt;.EndOfFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Gets a value indicating whether the tokenizer is in the end of file.</summary>
        <value>true if the tokenizer is in the end of file; otherwise, false.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureCurrent">
      <MemberSignature Language="C#" Value="protected bool EnsureCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool EnsureCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.EnsureCurrent" />
      <MemberSignature Language="VB.NET" Value="Protected Function EnsureCurrent () As Boolean" />
      <MemberSignature Language="F#" Value="member this.EnsureCurrent : unit -&gt; bool" Usage="tokenizerBackedParser.EnsureCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether to ensure the current parser.</summary>
        <returns>true if to ensure the current parser; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expected">
      <MemberSignature Language="C#" Value="protected internal void Expected (System.Web.Razor.Tokenizer.Symbols.KnownSymbolType type);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Expected(valuetype System.Web.Razor.Tokenizer.Symbols.KnownSymbolType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Expected(System.Web.Razor.Tokenizer.Symbols.KnownSymbolType)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub Expected (type As KnownSymbolType)" />
      <MemberSignature Language="F#" Value="member this.Expected : System.Web.Razor.Tokenizer.Symbols.KnownSymbolType -&gt; unit" Usage="tokenizerBackedParser.Expected type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Web.Razor.Tokenizer.Symbols.KnownSymbolType" />
      </Parameters>
      <Docs>
        <param name="type">The type.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Indicates the expected token with the given type.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expected">
      <MemberSignature Language="C#" Value="protected internal void Expected (params TSymbolType[] types);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Expected(!TSymbolType[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Expected(`2[])" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub Expected (ParamArray types As TSymbolType())" />
      <MemberSignature Language="F#" Value="member this.Expected : 'SymbolType[] -&gt; unit" Usage="tokenizerBackedParser.Expected types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="TSymbolType[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types">The types.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Indicates the expected token with the given types.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleEmbeddedTransition">
      <MemberSignature Language="C#" Value="protected virtual void HandleEmbeddedTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void HandleEmbeddedTransition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.HandleEmbeddedTransition" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub HandleEmbeddedTransition ()" />
      <MemberSignature Language="F#" Value="abstract member HandleEmbeddedTransition : unit -&gt; unit&#xA;override this.HandleEmbeddedTransition : unit -&gt; unit" Usage="tokenizerBackedParser.HandleEmbeddedTransition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Handles the embedded transition.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="protected void Initialize (System.Web.Razor.Parser.SyntaxTree.SpanBuilder span);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Initialize(class System.Web.Razor.Parser.SyntaxTree.SpanBuilder span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Initialize(System.Web.Razor.Parser.SyntaxTree.SpanBuilder)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Initialize (span As SpanBuilder)" />
      <MemberSignature Language="F#" Value="member this.Initialize : System.Web.Razor.Parser.SyntaxTree.SpanBuilder -&gt; unit" Usage="tokenizerBackedParser.Initialize span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="span" Type="System.Web.Razor.Parser.SyntaxTree.SpanBuilder" />
      </Parameters>
      <Docs>
        <param name="span">The span to initialize.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Initializes a specified span.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAtEmbeddedTransition">
      <MemberSignature Language="C#" Value="protected virtual bool IsAtEmbeddedTransition (bool allowTemplatesAndComments, bool allowTransitions);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsAtEmbeddedTransition(bool allowTemplatesAndComments, bool allowTransitions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.IsAtEmbeddedTransition(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsAtEmbeddedTransition (allowTemplatesAndComments As Boolean, allowTransitions As Boolean) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsAtEmbeddedTransition : bool * bool -&gt; bool&#xA;override this.IsAtEmbeddedTransition : bool * bool -&gt; bool" Usage="tokenizerBackedParser.IsAtEmbeddedTransition (allowTemplatesAndComments, allowTransitions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowTemplatesAndComments" Type="System.Boolean" />
        <Parameter Name="allowTransitions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowTemplatesAndComments">true to allow templates and comments; otherwise, false.</param>
        <param name="allowTransitions">true to allow transitions; otherwise, false.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether this instance is at embedded transition.</summary>
        <returns>true if this instance is at embedded transition; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="protected abstract System.Web.Razor.Parser.LanguageCharacteristics&lt;TTokenizer,TSymbol,TSymbolType&gt; Language { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Razor.Parser.LanguageCharacteristics`3&lt;!TTokenizer, !TSymbol, !TSymbolType&gt; Language" />
      <MemberSignature Language="DocId" Value="P:System.Web.Razor.Parser.TokenizerBackedParser`3.Language" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride ReadOnly Property Language As LanguageCharacteristics(Of TTokenizer, TSymbol, TSymbolType)" />
      <MemberSignature Language="F#" Value="member this.Language : System.Web.Razor.Parser.LanguageCharacteristics&lt;'okenizer, 'Symbol, 'SymbolType (requires 'okenizer :&gt; System.Web.Razor.Tokenizer.Tokenizer&lt;'Symbol, 'SymbolType&gt; and 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt;" Usage="System.Web.Razor.Parser.TokenizerBackedParser&lt;'okenizer, 'Symbol, 'SymbolType (requires 'okenizer :&gt; System.Web.Razor.Tokenizer.Tokenizer&lt;'Symbol, 'SymbolType&gt; and 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt;.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Razor.Parser.LanguageCharacteristics&lt;TTokenizer,TSymbol,TSymbolType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Gets the language used for parsing.</summary>
        <value>The language used for parsing.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextIs">
      <MemberSignature Language="C#" Value="protected internal bool NextIs (Func&lt;TSymbol,bool&gt; condition);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool NextIs(class System.Func`2&lt;!TSymbol, bool&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.NextIs(System.Func{`1,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function NextIs (condition As Func(Of TSymbol, Boolean)) As Boolean" />
      <MemberSignature Language="F#" Value="member this.NextIs : Func&lt;'Symbol, bool (requires 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt; -&gt; bool" Usage="tokenizerBackedParser.NextIs condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;TSymbol,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">The condition.</param>
        <summary>Determines whether the token with the given condition would pass.</summary>
        <returns>true if the token with the given condition would pass; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextIs">
      <MemberSignature Language="C#" Value="protected internal bool NextIs (TSymbolType type);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool NextIs(!TSymbolType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.NextIs(`2)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function NextIs (type As TSymbolType) As Boolean" />
      <MemberSignature Language="F#" Value="member this.NextIs : 'SymbolType -&gt; bool" Usage="tokenizerBackedParser.NextIs type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TSymbolType" />
      </Parameters>
      <Docs>
        <param name="type">The type of the token.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether the token with the given type would pass.</summary>
        <returns>true if the token with the give type would pass; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextIs">
      <MemberSignature Language="C#" Value="protected internal bool NextIs (params TSymbolType[] types);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool NextIs(!TSymbolType[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.NextIs(`2[])" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function NextIs (ParamArray types As TSymbolType()) As Boolean" />
      <MemberSignature Language="F#" Value="member this.NextIs : 'SymbolType[] -&gt; bool" Usage="tokenizerBackedParser.NextIs types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="TSymbolType[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types">The types.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether the token with the given types would pass.</summary>
        <returns>true if the token with the given types would pass; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextToken">
      <MemberSignature Language="C#" Value="protected internal bool NextToken ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool NextToken() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.NextToken" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function NextToken () As Boolean" />
      <MemberSignature Language="F#" Value="member this.NextToken : unit -&gt; bool" Usage="tokenizerBackedParser.NextToken " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether the parser advances to the next token.</summary>
        <returns>true if the parser advances to the next token; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional">
      <MemberSignature Language="C#" Value="protected internal bool Optional (System.Web.Razor.Tokenizer.Symbols.KnownSymbolType type);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool Optional(valuetype System.Web.Razor.Tokenizer.Symbols.KnownSymbolType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Optional(System.Web.Razor.Tokenizer.Symbols.KnownSymbolType)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function Optional (type As KnownSymbolType) As Boolean" />
      <MemberSignature Language="F#" Value="member this.Optional : System.Web.Razor.Tokenizer.Symbols.KnownSymbolType -&gt; bool" Usage="tokenizerBackedParser.Optional type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Web.Razor.Tokenizer.Symbols.KnownSymbolType" />
      </Parameters>
      <Docs>
        <param name="type">The type of the token.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether parsing a token with the given type is optional.</summary>
        <returns>true if parsing a token with the given type is optional; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Optional">
      <MemberSignature Language="C#" Value="protected internal bool Optional (TSymbolType type);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool Optional(!TSymbolType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Optional(`2)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function Optional (type As TSymbolType) As Boolean" />
      <MemberSignature Language="F#" Value="member this.Optional : 'SymbolType -&gt; bool" Usage="tokenizerBackedParser.Optional type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TSymbolType" />
      </Parameters>
      <Docs>
        <param name="type">The type of the token.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether parsing a token with the given type is optional.</summary>
        <returns>true if parsing a token with the given type is optional; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Output">
      <MemberSignature Language="C#" Value="protected internal void Output (System.Web.Razor.Parser.SyntaxTree.AcceptedCharacters accepts);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Output(valuetype System.Web.Razor.Parser.SyntaxTree.AcceptedCharacters accepts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Output(System.Web.Razor.Parser.SyntaxTree.AcceptedCharacters)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub Output (accepts As AcceptedCharacters)" />
      <MemberSignature Language="F#" Value="member this.Output : System.Web.Razor.Parser.SyntaxTree.AcceptedCharacters -&gt; unit" Usage="tokenizerBackedParser.Output accepts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accepts" Type="System.Web.Razor.Parser.SyntaxTree.AcceptedCharacters" />
      </Parameters>
      <Docs>
        <param name="accepts">The accepted characters.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Outputs a token with accepted characters.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Output">
      <MemberSignature Language="C#" Value="protected internal void Output (System.Web.Razor.Parser.SyntaxTree.SpanKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Output(valuetype System.Web.Razor.Parser.SyntaxTree.SpanKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Output(System.Web.Razor.Parser.SyntaxTree.SpanKind)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub Output (kind As SpanKind)" />
      <MemberSignature Language="F#" Value="member this.Output : System.Web.Razor.Parser.SyntaxTree.SpanKind -&gt; unit" Usage="tokenizerBackedParser.Output kind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="System.Web.Razor.Parser.SyntaxTree.SpanKind" />
      </Parameters>
      <Docs>
        <param name="kind">The span kind.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Outputs a token with span kind.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Output">
      <MemberSignature Language="C#" Value="protected internal void Output (System.Web.Razor.Parser.SyntaxTree.SpanKind kind, System.Web.Razor.Parser.SyntaxTree.AcceptedCharacters accepts);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Output(valuetype System.Web.Razor.Parser.SyntaxTree.SpanKind kind, valuetype System.Web.Razor.Parser.SyntaxTree.AcceptedCharacters accepts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Output(System.Web.Razor.Parser.SyntaxTree.SpanKind,System.Web.Razor.Parser.SyntaxTree.AcceptedCharacters)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub Output (kind As SpanKind, accepts As AcceptedCharacters)" />
      <MemberSignature Language="F#" Value="member this.Output : System.Web.Razor.Parser.SyntaxTree.SpanKind * System.Web.Razor.Parser.SyntaxTree.AcceptedCharacters -&gt; unit" Usage="tokenizerBackedParser.Output (kind, accepts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="System.Web.Razor.Parser.SyntaxTree.SpanKind" />
        <Parameter Name="accepts" Type="System.Web.Razor.Parser.SyntaxTree.AcceptedCharacters" />
      </Parameters>
      <Docs>
        <param name="kind">The span kind.</param>
        <param name="accepts">The accepted characters.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Outputs a token with a given span kind and accepted characters.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputSpanBeforeRazorComment">
      <MemberSignature Language="C#" Value="protected virtual void OutputSpanBeforeRazorComment ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OutputSpanBeforeRazorComment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.OutputSpanBeforeRazorComment" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OutputSpanBeforeRazorComment ()" />
      <MemberSignature Language="F#" Value="abstract member OutputSpanBeforeRazorComment : unit -&gt; unit&#xA;override this.OutputSpanBeforeRazorComment : unit -&gt; unit" Usage="tokenizerBackedParser.OutputSpanBeforeRazorComment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Outputs a span before the razor comment.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviousSymbol">
      <MemberSignature Language="C#" Value="protected TSymbol PreviousSymbol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TSymbol PreviousSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Web.Razor.Parser.TokenizerBackedParser`3.PreviousSymbol" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property PreviousSymbol As TSymbol" />
      <MemberSignature Language="F#" Value="member this.PreviousSymbol : 'Symbol" Usage="System.Web.Razor.Parser.TokenizerBackedParser&lt;'okenizer, 'Symbol, 'SymbolType (requires 'okenizer :&gt; System.Web.Razor.Tokenizer.Tokenizer&lt;'Symbol, 'SymbolType&gt; and 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt;.PreviousSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSymbol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code..Gets the previous symbol of this instance.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushSpanConfig">
      <MemberSignature Language="C#" Value="protected IDisposable PushSpanConfig ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IDisposable PushSpanConfig() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig" />
      <MemberSignature Language="VB.NET" Value="Protected Function PushSpanConfig () As IDisposable" />
      <MemberSignature Language="F#" Value="member this.PushSpanConfig : unit -&gt; IDisposable" Usage="tokenizerBackedParser.PushSpanConfig " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Pushes the span configuration.</summary>
        <returns>An <see cref="T:System.IDisposable" /> that shuts down the configuration.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushSpanConfig">
      <MemberSignature Language="C#" Value="protected IDisposable PushSpanConfig (Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder,Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt;&gt; newConfig);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IDisposable PushSpanConfig(class System.Action`2&lt;class System.Web.Razor.Parser.SyntaxTree.SpanBuilder, class System.Action`1&lt;class System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt;&gt; newConfig) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{System.Web.Razor.Parser.SyntaxTree.SpanBuilder,System.Action{System.Web.Razor.Parser.SyntaxTree.SpanBuilder}})" />
      <MemberSignature Language="VB.NET" Value="Protected Function PushSpanConfig (newConfig As Action(Of SpanBuilder, Action(Of SpanBuilder))) As IDisposable" />
      <MemberSignature Language="F#" Value="member this.PushSpanConfig : Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder, Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt;&gt; -&gt; IDisposable" Usage="tokenizerBackedParser.PushSpanConfig newConfig" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newConfig" Type="System.Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder,System.Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="newConfig">The new configuration.</param>
        <summary>Pushes the span configuration.</summary>
        <returns>An <see cref="T:System.IDisposable" /> that shuts down the configuration.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushSpanConfig">
      <MemberSignature Language="C#" Value="protected IDisposable PushSpanConfig (Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt; newConfig);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IDisposable PushSpanConfig(class System.Action`1&lt;class System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt; newConfig) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.PushSpanConfig(System.Action{System.Web.Razor.Parser.SyntaxTree.SpanBuilder})" />
      <MemberSignature Language="VB.NET" Value="Protected Function PushSpanConfig (newConfig As Action(Of SpanBuilder)) As IDisposable" />
      <MemberSignature Language="F#" Value="member this.PushSpanConfig : Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt; -&gt; IDisposable" Usage="tokenizerBackedParser.PushSpanConfig newConfig" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newConfig" Type="System.Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="newConfig">The new configuration.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Pushes the span configuration.</summary>
        <returns>An <see cref="T:System.IDisposable" /> that shuts down the configuration.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PutBack">
      <MemberSignature Language="C#" Value="protected internal void PutBack (System.Collections.Generic.IEnumerable&lt;TSymbol&gt; symbols);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void PutBack(class System.Collections.Generic.IEnumerable`1&lt;!TSymbol&gt; symbols) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.PutBack(System.Collections.Generic.IEnumerable{`1})" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub PutBack (symbols As IEnumerable(Of TSymbol))" />
      <MemberSignature Language="F#" Value="member this.PutBack : seq&lt;'Symbol (requires 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt; -&gt; unit" Usage="tokenizerBackedParser.PutBack symbols" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbols" Type="System.Collections.Generic.IEnumerable&lt;TSymbol&gt;" />
      </Parameters>
      <Docs>
        <param name="symbols">The symbols.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Puts the transition back.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PutBack">
      <MemberSignature Language="C#" Value="protected internal void PutBack (TSymbol symbol);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void PutBack(!TSymbol symbol) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.PutBack(`1)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub PutBack (symbol As TSymbol)" />
      <MemberSignature Language="F#" Value="member this.PutBack : 'Symbol -&gt; unit" Usage="tokenizerBackedParser.PutBack symbol" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbol" Type="TSymbol" />
      </Parameters>
      <Docs>
        <param name="symbol">The symbol.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Puts the transition back.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PutCurrentBack">
      <MemberSignature Language="C#" Value="protected internal void PutCurrentBack ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void PutCurrentBack() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.PutCurrentBack" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub PutCurrentBack ()" />
      <MemberSignature Language="F#" Value="member this.PutCurrentBack : unit -&gt; unit" Usage="tokenizerBackedParser.PutCurrentBack " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Puts the current transition back.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RazorComment">
      <MemberSignature Language="C#" Value="protected void RazorComment ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RazorComment() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.RazorComment" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RazorComment ()" />
      <MemberSignature Language="F#" Value="member this.RazorComment : unit -&gt; unit" Usage="tokenizerBackedParser.RazorComment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Displays the razor comment.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadWhile">
      <MemberSignature Language="C#" Value="protected internal System.Collections.Generic.IEnumerable&lt;TSymbol&gt; ReadWhile (Func&lt;TSymbol,bool&gt; condition);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!TSymbol&gt; ReadWhile(class System.Func`2&lt;!TSymbol, bool&gt; condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.ReadWhile(System.Func{`1,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function ReadWhile (condition As Func(Of TSymbol, Boolean)) As IEnumerable(Of TSymbol)" />
      <MemberSignature Language="F#" Value="member this.ReadWhile : Func&lt;'Symbol, bool (requires 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt; -&gt; seq&lt;'Symbol (requires 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt;" Usage="tokenizerBackedParser.ReadWhile condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSymbol&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Func&lt;TSymbol,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="condition">The condition.</param>
        <summary>Reads a token while the condition is not reached.</summary>
        <returns>The token to read.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Required">
      <MemberSignature Language="C#" Value="protected internal bool Required (TSymbolType expected, bool errorIfNotFound, string errorBase);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool Required(!TSymbolType expected, bool errorIfNotFound, string errorBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Required(`2,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function Required (expected As TSymbolType, errorIfNotFound As Boolean, errorBase As String) As Boolean" />
      <MemberSignature Language="F#" Value="member this.Required : 'SymbolType * bool * string -&gt; bool" Usage="tokenizerBackedParser.Required (expected, errorIfNotFound, errorBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expected" Type="TSymbolType" />
        <Parameter Name="errorIfNotFound" Type="System.Boolean" />
        <Parameter Name="errorBase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expected">The expected token.</param>
        <param name="errorIfNotFound">true to display an error if not found; otherwise, false.</param>
        <param name="errorBase">The error base.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether the expected token is required.</summary>
        <returns>true if the expected token is required; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Span">
      <MemberSignature Language="C#" Value="protected System.Web.Razor.Parser.SyntaxTree.SpanBuilder Span { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Razor.Parser.SyntaxTree.SpanBuilder Span" />
      <MemberSignature Language="DocId" Value="P:System.Web.Razor.Parser.TokenizerBackedParser`3.Span" />
      <MemberSignature Language="VB.NET" Value="Protected Property Span As SpanBuilder" />
      <MemberSignature Language="F#" Value="member this.Span : System.Web.Razor.Parser.SyntaxTree.SpanBuilder with get, set" Usage="System.Web.Razor.Parser.TokenizerBackedParser&lt;'okenizer, 'Symbol, 'SymbolType (requires 'okenizer :&gt; System.Web.Razor.Tokenizer.Tokenizer&lt;'Symbol, 'SymbolType&gt; and 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt;.Span" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Razor.Parser.SyntaxTree.SpanBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Gets or sets the <see cref="T:System.Web.Razor.Parser.SyntaxTree.SpanBuilder" /> associated with this instance.</summary>
        <value>The <see cref="T:System.Web.Razor.Parser.SyntaxTree.SpanBuilder" /> associated with this instance.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpanConfig">
      <MemberSignature Language="C#" Value="protected Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt; SpanConfig { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;class System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt; SpanConfig" />
      <MemberSignature Language="DocId" Value="P:System.Web.Razor.Parser.TokenizerBackedParser`3.SpanConfig" />
      <MemberSignature Language="VB.NET" Value="Protected Property SpanConfig As Action(Of SpanBuilder)" />
      <MemberSignature Language="F#" Value="member this.SpanConfig : Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt; with get, set" Usage="System.Web.Razor.Parser.TokenizerBackedParser&lt;'okenizer, 'Symbol, 'SymbolType (requires 'okenizer :&gt; System.Web.Razor.Tokenizer.Tokenizer&lt;'Symbol, 'SymbolType&gt; and 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt;.SpanConfig" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Web.Razor.Parser.SyntaxTree.SpanBuilder&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Gets or sets the span configuration.</summary>
        <value>The span configuration.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tokenizer">
      <MemberSignature Language="C#" Value="protected System.Web.Razor.Tokenizer.TokenizerView&lt;TTokenizer,TSymbol,TSymbolType&gt; Tokenizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Razor.Tokenizer.TokenizerView`3&lt;!TTokenizer, !TSymbol, !TSymbolType&gt; Tokenizer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Razor.Parser.TokenizerBackedParser`3.Tokenizer" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Tokenizer As TokenizerView(Of TTokenizer, TSymbol, TSymbolType)" />
      <MemberSignature Language="F#" Value="member this.Tokenizer : System.Web.Razor.Tokenizer.TokenizerView&lt;'okenizer, 'Symbol, 'SymbolType (requires 'okenizer :&gt; System.Web.Razor.Tokenizer.Tokenizer&lt;'Symbol, 'SymbolType&gt; and 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt;" Usage="System.Web.Razor.Parser.TokenizerBackedParser&lt;'okenizer, 'Symbol, 'SymbolType (requires 'okenizer :&gt; System.Web.Razor.Tokenizer.Tokenizer&lt;'Symbol, 'SymbolType&gt; and 'Symbol :&gt; System.Web.Razor.Tokenizer.Symbols.SymbolBase&lt;'SymbolType&gt;)&gt;.Tokenizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Razor.Tokenizer.TokenizerView&lt;TTokenizer,TSymbol,TSymbolType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Gets the tokenizer.</summary>
        <value>The tokenizer.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Was">
      <MemberSignature Language="C#" Value="protected internal bool Was (TSymbolType type);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance bool Was(!TSymbolType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Razor.Parser.TokenizerBackedParser`3.Was(`2)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function Was (type As TSymbolType) As Boolean" />
      <MemberSignature Language="F#" Value="member this.Was : 'SymbolType -&gt; bool" Usage="tokenizerBackedParser.Was type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Razor</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TSymbolType" />
      </Parameters>
      <Docs>
        <param name="type">The type of the token.</param>
        <summary>This type/member supports the .NET Framework infrastructure and is not intended to be used directly from your code.Determines whether the token with the given type was parsed.</summary>
        <returns>true if the token with the given type was parsed; otherwise, false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
