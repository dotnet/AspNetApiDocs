<Type Name="IPolicyEvaluator" FullName="Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator">
  <TypeSignature Language="C++ CLI" Value="public interface class IPolicyEvaluator" />
  <TypeSignature Language="C#" Value="public interface IPolicyEvaluator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPolicyEvaluator" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPolicyEvaluator" />
  <TypeSignature Language="F#" Value="type IPolicyEvaluator = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Authorization.Policy</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Base class for authorization handlers that need to be called for a specific requirement type.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AuthenticateAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Authentication::AuthenticateResult ^&gt; ^ AuthenticateAsync(Microsoft::AspNetCore::Authorization::AuthorizationPolicy ^ policy, Microsoft::AspNetCore::Http::HttpContext ^ context);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Authentication.AuthenticateResult&gt; AuthenticateAsync (Microsoft.AspNetCore.Authorization.AuthorizationPolicy policy, Microsoft.AspNetCore.Http.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Authentication.AuthenticateResult&gt; AuthenticateAsync(class Microsoft.AspNetCore.Authorization.AuthorizationPolicy policy, class Microsoft.AspNetCore.Http.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator.AuthenticateAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy,Microsoft.AspNetCore.Http.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function AuthenticateAsync (policy As AuthorizationPolicy, context As HttpContext) As Task(Of AuthenticateResult)" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsync : Microsoft.AspNetCore.Authorization.AuthorizationPolicy * Microsoft.AspNetCore.Http.HttpContext -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Authentication.AuthenticateResult&gt;" Usage="iPolicyEvaluator.AuthenticateAsync (policy, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authorization.Policy</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Authentication.AuthenticateResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="Microsoft.AspNetCore.Authorization.AuthorizationPolicy" />
        <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" />
      </Parameters>
      <Docs>
        <param name="policy">The <see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationPolicy" />.</param>
        <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />.</param>
        <summary>
            Does authentication for <see cref="P:Microsoft.AspNetCore.Authorization.AuthorizationPolicy.AuthenticationSchemes" /> and sets the resulting
            <see cref="T:System.Security.Claims.ClaimsPrincipal" /> to <see cref="P:Microsoft.AspNetCore.Http.HttpContext.User" />.  If no schemes are set, this is a no-op.
            </summary>
        <returns>
          <see cref="M:Microsoft.AspNetCore.Authentication.AuthenticateResult.Success(Microsoft.AspNetCore.Authentication.AuthenticationTicket)" /> unless all schemes specified by <see cref="P:Microsoft.AspNetCore.Authorization.AuthorizationPolicy.AuthenticationSchemes" /> fail to authenticate.  </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthorizeAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Authorization::Policy::PolicyAuthorizationResult ^&gt; ^ AuthorizeAsync(Microsoft::AspNetCore::Authorization::AuthorizationPolicy ^ policy, Microsoft::AspNetCore::Authentication::AuthenticateResult ^ authenticationResult, Microsoft::AspNetCore::Http::HttpContext ^ context, System::Object ^ resource);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult&gt; AuthorizeAsync (Microsoft.AspNetCore.Authorization.AuthorizationPolicy policy, Microsoft.AspNetCore.Authentication.AuthenticateResult authenticationResult, Microsoft.AspNetCore.Http.HttpContext context, object resource);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult&gt; AuthorizeAsync(class Microsoft.AspNetCore.Authorization.AuthorizationPolicy policy, class Microsoft.AspNetCore.Authentication.AuthenticateResult authenticationResult, class Microsoft.AspNetCore.Http.HttpContext context, object resource) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator.AuthorizeAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy,Microsoft.AspNetCore.Authentication.AuthenticateResult,Microsoft.AspNetCore.Http.HttpContext,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function AuthorizeAsync (policy As AuthorizationPolicy, authenticationResult As AuthenticateResult, context As HttpContext, resource As Object) As Task(Of PolicyAuthorizationResult)" />
      <MemberSignature Language="F#" Value="abstract member AuthorizeAsync : Microsoft.AspNetCore.Authorization.AuthorizationPolicy * Microsoft.AspNetCore.Authentication.AuthenticateResult * Microsoft.AspNetCore.Http.HttpContext * obj -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult&gt;" Usage="iPolicyEvaluator.AuthorizeAsync (policy, authenticationResult, context, resource)" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult&gt; AuthorizeAsync (Microsoft.AspNetCore.Authorization.AuthorizationPolicy policy, Microsoft.AspNetCore.Authentication.AuthenticateResult authenticationResult, Microsoft.AspNetCore.Http.HttpContext context, object? resource);" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Authorization.Policy</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="Microsoft.AspNetCore.Authorization.AuthorizationPolicy" />
        <Parameter Name="authenticationResult" Type="Microsoft.AspNetCore.Authentication.AuthenticateResult" />
        <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" />
        <Parameter Name="resource" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy">The <see cref="T:Microsoft.AspNetCore.Authorization.AuthorizationPolicy" />.</param>
        <param name="authenticationResult">The result of a call to <see cref="M:Microsoft.AspNetCore.Authorization.Policy.IPolicyEvaluator.AuthenticateAsync(Microsoft.AspNetCore.Authorization.AuthorizationPolicy,Microsoft.AspNetCore.Http.HttpContext)" />.</param>
        <param name="context">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />.</param>
        <param name="resource">
            An optional resource the policy should be checked with.
            If a resource is not required for policy evaluation you may pass null as the value.
            </param>
        <summary>
            Attempts authorization for a policy using <see cref="T:Microsoft.AspNetCore.Authorization.IAuthorizationService" />.
            </summary>
        <returns>Returns <see cref="M:Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Success" /> if authorization succeeds.
            Otherwise returns <see cref="M:Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Forbid(Microsoft.AspNetCore.Authorization.AuthorizationFailure)" /> if <see cref="P:Microsoft.AspNetCore.Authentication.AuthenticateResult.Succeeded" />, otherwise
            returns  <see cref="M:Microsoft.AspNetCore.Authorization.Policy.PolicyAuthorizationResult.Challenge" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
