<Type Name="IHtmlHelper&lt;TModel&gt;" FullName="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;TModel&gt;">
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TModel&gt;&#xA;public interface class IHtmlHelper : Microsoft::AspNetCore::Mvc::Rendering::IHtmlHelper" />
  <TypeSignature Language="C#" Value="public interface IHtmlHelper&lt;TModel&gt; : Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHtmlHelper`1&lt;TModel&gt; implements class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IHtmlHelper(Of TModel)&#xA;Implements IHtmlHelper" />
  <TypeSignature Language="F#" Value="type IHtmlHelper&lt;'Model&gt; = interface&#xA;    interface IHtmlHelper" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IHtmlHelper`1&lt;TModel&gt; implements class Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" FrameworkAlternate="aspnetcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TModel" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TModel">The type of the model.</typeparam>
    <summary>
            An <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper" /> for Linq expressions.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CheckBoxFor">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ CheckBoxFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, bool&gt; ^&gt; ^ expression, System::Object ^ htmlAttributes);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent CheckBoxFor (System.Linq.Expressions.Expression&lt;Func&lt;TModel,bool&gt;&gt; expression, object htmlAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent CheckBoxFor(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, bool&gt;&gt; expression, object htmlAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.CheckBoxFor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CheckBoxFor (expression As Expression(Of Func(Of TModel, Boolean)), htmlAttributes As Object) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member CheckBoxFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, bool&gt;&gt; * obj -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.CheckBoxFor (expression, htmlAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,System.Boolean&gt;&gt;" />
        <Parameter Name="htmlAttributes" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the checkbox element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML attributes.
            </param>
        <summary>
            Returns an &lt;input&gt; element of type "checkbox" with value "true" and an &lt;input&gt; element of type
            "hidden" with value "false" for the specified <paramref name="expression" />. Adds a "checked" attribute to
            the "checkbox" element based on the first non-<c>null</c> value found in:
            the <paramref name="htmlAttributes" /> dictionary entry with key "checked", or
            the <see cref="P:Microsoft.AspNetCore.Mvc.ActionContext.ModelState" /> entry with full name.
            If <paramref name="expression" /> evaluates to a non-<c>null</c> value, instead uses the first
            non-<c>null</c> value found in:
            the <see cref="P:Microsoft.AspNetCore.Mvc.ActionContext.ModelState" /> entry with full name, or
            the <paramref name="expression" /> evaluated against <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model" />.
            See <see cref="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.NameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" /> for more information about a "full name".
            </summary>
        <returns>A new <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> containing the &lt;input&gt; elements.</returns>
        <remarks>
            Combines <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.HtmlFieldPrefix" /> and the string representation of the
            <paramref name="expression" /> to set checkbox element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression" /> to set checkbox element's "id" attribute.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ DisplayFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression, System::String ^ templateName, System::String ^ htmlFieldName, System::Object ^ additionalViewData);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent DisplayFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string templateName, string htmlFieldName, object additionalViewData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent DisplayFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression, string templateName, string htmlFieldName, object additionalViewData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.DisplayFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DisplayFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult)), templateName As String, htmlFieldName As String, additionalViewData As Object) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member DisplayFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; * string * string * obj -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.DisplayFor (expression, templateName, htmlFieldName, additionalViewData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        <Parameter Name="templateName" Type="System.String" />
        <Parameter Name="htmlFieldName" Type="System.String" />
        <Parameter Name="additionalViewData" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <param name="templateName">The name of the template used to create the HTML markup.</param>
        <param name="htmlFieldName">
            A <see cref="T:System.String" /> used to disambiguate the names of HTML elements that are created for properties
            that have the same name.
            </param>
        <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" /> that can contain additional
            view data that will be merged into the <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the
            template.
            </param>
        <summary>
            Returns HTML markup for the <paramref name="expression" />, using a display template, specified HTML field
            name, and additional view data. The template name is taken from the <paramref name="templateName" /> or the
            <paramref name="expression" />’s <see cref="P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.TemplateHint" />.
            If the template file is not found, a default template will be used.
            </summary>
        <returns>A new <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> containing the created HTML.</returns>
        <remarks>
          <para>
            For example the default <see cref="T:System.Object" /> display template includes markup for each property in the
            <paramref name="expression" /> result.
            </para>
          <para>
            Custom templates are found under a <c>DisplayTemplates</c> folder within the
            <see href="https://aka.ms/aspnet/7.0/razorpages-pages-folder">Pages</see> folder.
            The folder name is case-sensitive on case-sensitive file systems.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayNameFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::String ^ DisplayNameFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="C#" Value="public string DisplayNameFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string DisplayNameFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.DisplayNameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function DisplayNameFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult))) As String" />
      <MemberSignature Language="F#" Value="abstract member DisplayNameFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; -&gt; string" Usage="iHtmlHelper.DisplayNameFor expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <summary>
            Returns the display name for the specified <paramref name="expression" />.
            </summary>
        <returns>A <see cref="T:System.String" /> containing the display name.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayNameForInnerType&lt;TModelItem,TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TModelItem, typename TResult&gt;&#xA; System::String ^ DisplayNameForInnerType(System::Linq::Expressions::Expression&lt;Func&lt;TModelItem, TResult&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="C#" Value="public string DisplayNameForInnerType&lt;TModelItem,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModelItem,TResult&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string DisplayNameForInnerType&lt;TModelItem, TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TModelItem, !!TResult&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.DisplayNameForInnerType``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="Public Function DisplayNameForInnerType(Of TModelItem, TResult) (expression As Expression(Of Func(Of TModelItem, TResult))) As String" />
      <MemberSignature Language="F#" Value="abstract member DisplayNameForInnerType : System.Linq.Expressions.Expression&lt;Func&lt;'ModelItem, 'Result&gt;&gt; -&gt; string" Usage="iHtmlHelper.DisplayNameForInnerType expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TModelItem" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModelItem,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TModelItem">The type of items in the model collection.</typeparam>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against an item in the current model.</param>
        <summary>
            Returns the display name for the specified <paramref name="expression" />
            if the current model represents a collection.
            </summary>
        <returns>A <see cref="T:System.String" /> containing the display name.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayTextFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::String ^ DisplayTextFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="C#" Value="public string DisplayTextFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string DisplayTextFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.DisplayTextFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function DisplayTextFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult))) As String" />
      <MemberSignature Language="F#" Value="abstract member DisplayTextFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; -&gt; string" Usage="iHtmlHelper.DisplayTextFor expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <summary>
            Returns the simple display text for the specified <paramref name="expression" />.
            </summary>
        <returns>
            A <see cref="T:System.String" /> containing the simple display text.
            If the <paramref name="expression" /> result is <c>null</c>, returns
            <see cref="P:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata.NullDisplayText" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DropDownListFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ DropDownListFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression, System::Collections::Generic::IEnumerable&lt;Microsoft::AspNetCore::Mvc::Rendering::SelectListItem ^&gt; ^ selectList, System::String ^ optionLabel, System::Object ^ htmlAttributes);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList, string optionLabel, object htmlAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent DropDownListFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList, string optionLabel, object htmlAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.DropDownListFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function DropDownListFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult)), selectList As IEnumerable(Of SelectListItem), optionLabel As String, htmlAttributes As Object) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member DropDownListFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; * seq&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; * string * obj -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.DropDownListFor (expression, selectList, optionLabel, htmlAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        <Parameter Name="selectList" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt;" />
        <Parameter Name="optionLabel" Type="System.String" />
        <Parameter Name="htmlAttributes" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem" /> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements. If <c>null</c>, uses the <see cref="P:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.ViewData" /> entry with
            full name and that entry must be a collection of <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem" /> objects.
            </param>
        <param name="optionLabel">
            The text for a default empty item. Does not include such an item if argument is <c>null</c>.
            </param>
        <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the &lt;select&gt; element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML attributes.
            </param>
        <summary>
            Returns a single-selection HTML &lt;select&gt; element for the <paramref name="expression" />. Adds
            &lt;option&gt; elements based on <paramref name="optionLabel" /> and <paramref name="selectList" />. Adds a
            "selected" attribute to an &lt;option&gt; if its <see cref="P:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.Value" /> (if non-<c>null</c>) or
            <see cref="P:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.Text" /> matches the first non-<c>null</c> value found in:
            the <see cref="P:Microsoft.AspNetCore.Mvc.ActionContext.ModelState" /> entry with full name, or
            the <paramref name="expression" /> evaluated against <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model" />.
            See <see cref="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.NameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" /> for more information about a "full name".
            </summary>
        <returns>A new <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> containing the &lt;select&gt; element.</returns>
        <remarks>
            Combines <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.HtmlFieldPrefix" /> and the string representation of the
            <paramref name="expression" /> to set &lt;select&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression" /> to set element's "id" attribute.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditorFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ EditorFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression, System::String ^ templateName, System::String ^ htmlFieldName, System::Object ^ additionalViewData);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent EditorFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string templateName, string htmlFieldName, object additionalViewData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent EditorFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression, string templateName, string htmlFieldName, object additionalViewData) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.EditorFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function EditorFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult)), templateName As String, htmlFieldName As String, additionalViewData As Object) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member EditorFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; * string * string * obj -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.EditorFor (expression, templateName, htmlFieldName, additionalViewData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        <Parameter Name="templateName" Type="System.String" />
        <Parameter Name="htmlFieldName" Type="System.String" />
        <Parameter Name="additionalViewData" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <param name="templateName">The name of the template that is used to create the HTML markup.</param>
        <param name="htmlFieldName">
            A <see cref="T:System.String" /> used to disambiguate the names of HTML elements that are created for properties
            that have the same name.
            </param>
        <param name="additionalViewData">
            An anonymous <see cref="T:System.Object" /> or <see cref="T:System.Collections.Generic.IDictionary`2" /> that can contain additional
            view data that will be merged into the <see cref="T:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1" /> instance created for the
            template.
            </param>
        <summary>
            Returns HTML markup for the <paramref name="expression" />, using an editor template, specified HTML field
            name, and additional view data. The template is found using the <paramref name="templateName" /> or the
            <paramref name="expression" />'s <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelMetadata" />.
            </summary>
        <returns>A new <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> containing the &lt;input&gt; element(s).</returns>
        <remarks>
          <para>
            For example the default <see cref="T:System.Object" /> editor template includes &lt;label&gt; and &lt;input&gt;
            elements for each property in the <paramref name="expression" /> result.
            </para>
          <para>
            Custom templates are found under a <c>EditorTemplates</c> folder. The folder name is case-sensitive on
            case-sensitive file systems.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Encode(System::Object ^ value);" />
      <MemberSignature Language="C#" Value="public string Encode (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Encode(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.Encode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Encode (value As Object) As String" />
      <MemberSignature Language="F#" Value="abstract member Encode : obj -&gt; string" Usage="iHtmlHelper.Encode value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Encode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Encode(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Encode(System::String ^ value);" />
      <MemberSignature Language="C#" Value="public string Encode (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Encode(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.Encode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Encode (value As String) As String" />
      <MemberSignature Language="F#" Value="abstract member Encode : string -&gt; string" Usage="iHtmlHelper.Encode value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Encode(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Encode(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HiddenFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ HiddenFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression, System::Object ^ htmlAttributes);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent HiddenFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, object htmlAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent HiddenFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression, object htmlAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.HiddenFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function HiddenFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult)), htmlAttributes As Object) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member HiddenFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; * obj -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.HiddenFor (expression, htmlAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        <Parameter Name="htmlAttributes" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML attributes.
            </param>
        <summary>
            Returns an &lt;input&gt; element of type "hidden" for the specified <paramref name="expression" />. Adds a
            "value" attribute to the element containing the first non-<c>null</c> value found in:
            the <see cref="P:Microsoft.AspNetCore.Mvc.ActionContext.ModelState" /> entry with full name,
            the <paramref name="expression" /> evaluated against <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model" />, or
            the <paramref name="htmlAttributes" /> dictionary entry with key "value".
            See <see cref="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.NameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" /> for more information about a "full name".
            </summary>
        <returns>A new <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> containing the &lt;input&gt; element.</returns>
        <remarks>
            Combines <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.HtmlFieldPrefix" /> and the string representation of the
            <paramref name="expression" /> to set &lt;input&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression" /> to set element's "id" attribute.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IdFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::String ^ IdFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="C#" Value="public string IdFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string IdFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.IdFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function IdFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult))) As String" />
      <MemberSignature Language="F#" Value="abstract member IdFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; -&gt; string" Usage="iHtmlHelper.IdFor expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <summary>
            Returns the HTML element Id for the specified <paramref name="expression" />.
            </summary>
        <returns>A <see cref="T:System.String" /> containing the element Id.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LabelFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ LabelFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression, System::String ^ labelText, System::Object ^ htmlAttributes);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent LabelFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string labelText, object htmlAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent LabelFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression, string labelText, object htmlAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.LabelFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function LabelFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult)), labelText As String, htmlAttributes As Object) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member LabelFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; * string * obj -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.LabelFor (expression, labelText, htmlAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        <Parameter Name="labelText" Type="System.String" />
        <Parameter Name="htmlAttributes" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <param name="labelText">The inner text of the element.</param>
        <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML attributes.
            </param>
        <summary>
            Returns a &lt;label&gt; element for the specified <paramref name="expression" />.
            </summary>
        <returns>A new <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> containing the &lt;label&gt; element.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListBoxFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ ListBoxFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression, System::Collections::Generic::IEnumerable&lt;Microsoft::AspNetCore::Mvc::Rendering::SelectListItem ^&gt; ^ selectList, System::Object ^ htmlAttributes);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent ListBoxFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList, object htmlAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent ListBoxFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; selectList, object htmlAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.ListBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{Microsoft.AspNetCore.Mvc.Rendering.SelectListItem},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ListBoxFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult)), selectList As IEnumerable(Of SelectListItem), htmlAttributes As Object) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member ListBoxFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; * seq&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt; * obj -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.ListBoxFor (expression, selectList, htmlAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        <Parameter Name="selectList" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Mvc.Rendering.SelectListItem&gt;" />
        <Parameter Name="htmlAttributes" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <param name="selectList">
            A collection of <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem" /> objects used to populate the &lt;select&gt; element with
            &lt;optgroup&gt; and &lt;option&gt; elements. If <c>null</c>, finds the <see cref="T:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem" />
            collection with name <paramref name="expression" /> in <see cref="P:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.ViewData" />.
            </param>
        <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the &lt;select&gt; element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML attributes.
            </param>
        <summary>
            Returns a multi-selection &lt;select&gt; element for the <paramref name="expression" />. Adds
            &lt;option&gt; elements based on <paramref name="selectList" />. Adds a "selected" attribute to an
            &lt;option&gt; if its <see cref="P:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.Value" /> (if non-<c>null</c>) or
            <see cref="P:Microsoft.AspNetCore.Mvc.Rendering.SelectListItem.Text" /> matches an entry in the first non-<c>null</c> collection found in:
            the <see cref="P:Microsoft.AspNetCore.Mvc.ActionContext.ModelState" /> entry with full name, or
            the <paramref name="expression" /> evaluated against <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model" />.
            See <see cref="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.NameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" /> for more information about a "full name".
            </summary>
        <returns>A new <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> containing the &lt;select&gt; element.</returns>
        <remarks>
            Combines <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.HtmlFieldPrefix" /> and the string representation of the
            <paramref name="expression" /> to set &lt;select&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression" /> to set element's "id" attribute.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::String ^ NameFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression);" />
      <MemberSignature Language="C#" Value="public string NameFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string NameFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.NameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Function NameFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult))) As String" />
      <MemberSignature Language="F#" Value="abstract member NameFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; -&gt; string" Usage="iHtmlHelper.NameFor expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <summary>
            Returns the full HTML element name for the specified <paramref name="expression" />. Uses
            <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.HtmlFieldPrefix" /> (if non-empty) to reflect relationship between current
            <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model" /> and the top-level view's model.
            </summary>
        <returns>A <see cref="T:System.String" /> containing the element name.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ PasswordFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression, System::Object ^ htmlAttributes);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent PasswordFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, object htmlAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent PasswordFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression, object htmlAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.PasswordFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function PasswordFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult)), htmlAttributes As Object) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member PasswordFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; * obj -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.PasswordFor (expression, htmlAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        <Parameter Name="htmlAttributes" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML attributes.
            </param>
        <summary>
            Returns an &lt;input&gt; element of type "password" for the specified <paramref name="expression" />. Adds a
            "value" attribute containing the <paramref name="htmlAttributes" /> dictionary entry with key "value" (if
            any).
            </summary>
        <returns>A new <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> containing the &lt;input&gt; element.</returns>
        <remarks>
            Combines <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.HtmlFieldPrefix" /> and the string representation of the
            <paramref name="expression" /> to set &lt;input&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression" /> to set element's "id" attribute.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RadioButtonFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ RadioButtonFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression, System::Object ^ value, System::Object ^ htmlAttributes);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent RadioButtonFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, object value, object htmlAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent RadioButtonFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression, object value, object htmlAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.RadioButtonFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function RadioButtonFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult)), value As Object, htmlAttributes As Object) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member RadioButtonFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; * obj * obj -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.RadioButtonFor (expression, value, htmlAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="htmlAttributes" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <param name="value">Value to include in the element. Must not be <c>null</c>.</param>
        <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML attributes.
            </param>
        <summary>
            Returns an &lt;input&gt; element of type "radio" for the specified <paramref name="expression" />.
            Adds a "value" attribute to the element containing the first non-<c>null</c> value found in:
            the <paramref name="value" /> parameter, or
            the <paramref name="htmlAttributes" /> dictionary entry with key "value".
            Adds a "checked" attribute to the element if <paramref name="value" /> matches the first non-<c>null</c>
            value found in:
            the <paramref name="htmlAttributes" /> dictionary entry with key "checked", or
            the <see cref="P:Microsoft.AspNetCore.Mvc.ActionContext.ModelState" /> entry with full name.
            If <paramref name="expression" /> evaluates to a non-<c>null</c> value, instead uses the first
            non-<c>null</c> value found in:
            the <see cref="P:Microsoft.AspNetCore.Mvc.ActionContext.ModelState" /> entry with full name, or
            the <paramref name="expression" /> evaluated against <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model" />.
            See <see cref="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.NameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" /> for more information about a "full name".
            Adds a "value" attribute to the element containing the <paramref name="value" /> parameter.
            </summary>
        <returns>A new <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> containing the &lt;input&gt; element.</returns>
        <remarks>
            Combines <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.HtmlFieldPrefix" /> and the string representation of the
            <paramref name="expression" /> to set &lt;select&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression" /> to set element's "id" attribute.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Raw">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ Raw(System::Object ^ value);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent Raw (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent Raw(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.Raw(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Raw (value As Object) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member Raw : obj -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.Raw value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Raw">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ Raw(System::String ^ value);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent Raw (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent Raw(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.Raw(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Raw (value As String) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member Raw : string -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.Raw value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc cref="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper.Raw(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TextAreaFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ TextAreaFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression, int rows, int columns, System::Object ^ htmlAttributes);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent TextAreaFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, int rows, int columns, object htmlAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent TextAreaFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression, int32 rows, int32 columns, object htmlAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.TextAreaFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TextAreaFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult)), rows As Integer, columns As Integer, htmlAttributes As Object) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member TextAreaFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; * int * int * obj -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.TextAreaFor (expression, rows, columns, htmlAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        <Parameter Name="rows" Type="System.Int32" />
        <Parameter Name="columns" Type="System.Int32" />
        <Parameter Name="htmlAttributes" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <param name="rows">Number of rows in the textarea.</param>
        <param name="columns">Number of columns in the textarea.</param>
        <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML attributes.
            </param>
        <summary>
            Returns a &lt;textarea&gt; element for the specified <paramref name="expression" />. Adds content to the
            element body based on the first non-<c>null</c> value found in:
            the <see cref="P:Microsoft.AspNetCore.Mvc.ActionContext.ModelState" /> entry with full name, or
            the <paramref name="expression" /> evaluated against <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model" />.
            See <see cref="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.NameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" /> for more information about a "full name".
            </summary>
        <returns>A new <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> containing the &lt;textarea&gt; element.</returns>
        <remarks>
            Combines <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.HtmlFieldPrefix" /> and the string representation of the
            <paramref name="expression" /> to set &lt;textarea&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression" /> to set element's "id" attribute.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextBoxFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ TextBoxFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression, System::String ^ format, System::Object ^ htmlAttributes);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string format, object htmlAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent TextBoxFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression, string format, object htmlAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.TextBoxFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TextBoxFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult)), format As String, htmlAttributes As Object) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member TextBoxFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; * string * obj -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.TextBoxFor (expression, format, htmlAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="htmlAttributes" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <param name="format">
            The format string (see <see href="https://msdn.microsoft.com/en-us/library/txafckwd.aspx" />) used to format the
            <paramref name="expression" /> value when using that in the "value" attribute.
            </param>
        <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the element. Alternatively, an
            <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML attributes.
            </param>
        <summary>
            Returns an &lt;input&gt; element of type "text" for the specified <paramref name="expression" />. Adds a
            "value" attribute to the element containing the first non-<c>null</c> value found in:
            the <see cref="P:Microsoft.AspNetCore.Mvc.ActionContext.ModelState" /> entry with full name,
            the <paramref name="expression" /> evaluated against <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model" />, or
            the <paramref name="htmlAttributes" /> dictionary entry with key "value".
            See <see cref="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.NameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" /> for more information about a "full name".
            </summary>
        <returns>A new <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> containing the &lt;input&gt; element.</returns>
        <remarks>
            Combines <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.TemplateInfo.HtmlFieldPrefix" /> and the string representation of the
            <paramref name="expression" /> to set &lt;input&gt; element's "name" attribute. Sanitizes the string
            representation of the <paramref name="expression" /> to set element's "id" attribute.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationMessageFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; Microsoft::AspNetCore::Html::IHtmlContent ^ ValidationMessageFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression, System::String ^ message, System::Object ^ htmlAttributes, System::String ^ tag);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string message, object htmlAttributes, string tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Html.IHtmlContent ValidationMessageFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression, string message, object htmlAttributes, string tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.ValidationMessageFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidationMessageFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult)), message As String, htmlAttributes As Object, tag As String) As IHtmlContent" />
      <MemberSignature Language="F#" Value="abstract member ValidationMessageFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; * string * obj * string -&gt; Microsoft.AspNetCore.Html.IHtmlContent" Usage="iHtmlHelper.ValidationMessageFor (expression, message, htmlAttributes, tag)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Html.IHtmlContent</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="htmlAttributes" Type="System.Object" />
        <Parameter Name="tag" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <param name="message">
            The message to be displayed. If <c>null</c> or empty, method extracts an error string from the
            <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" /> object. Message will always be visible but client-side
            validation may update the associated CSS class.
            </param>
        <param name="htmlAttributes">
            An <see cref="T:System.Object" /> that contains the HTML attributes for the <paramref name="tag" /> element.
            Alternatively, an <see cref="T:System.Collections.Generic.IDictionary`2" /> instance containing the HTML attributes.
            </param>
        <param name="tag">
            The tag to wrap the <paramref name="message" /> in the generated HTML. Its default value is
            <see cref="P:Microsoft.AspNetCore.Mvc.Rendering.ViewContext.ValidationMessageElement" />.
            </param>
        <summary>
            Returns the validation message if an error exists in the <see cref="T:Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary" />
            object for the specified <paramref name="expression" />.
            </summary>
        <returns>
            A new <see cref="T:Microsoft.AspNetCore.Html.IHtmlContent" /> containing the <paramref name="tag" /> element. <c>null</c> if the
            <paramref name="expression" /> is valid and client-side validation is disabled.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueFor&lt;TResult&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::String ^ ValueFor(System::Linq::Expressions::Expression&lt;Func&lt;TModel, TResult&gt; ^&gt; ^ expression, System::String ^ format);" />
      <MemberSignature Language="C#" Value="public string ValueFor&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TModel,TResult&gt;&gt; expression, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ValueFor&lt;TResult&gt;(class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!TModel, !!TResult&gt;&gt; expression, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.ValueFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ValueFor(Of TResult) (expression As Expression(Of Func(Of TModel, TResult)), format As String) As String" />
      <MemberSignature Language="F#" Value="abstract member ValueFor : System.Linq.Expressions.Expression&lt;Func&lt;'Model, 'Result&gt;&gt; * string -&gt; string" Usage="iHtmlHelper.ValueFor (expression, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TModel,TResult&gt;&gt;" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The type of the <paramref name="expression" /> result.</typeparam>
        <param name="expression">An expression to be evaluated against the current model.</param>
        <param name="format">
            The format string (see <see href="https://msdn.microsoft.com/en-us/library/txafckwd.aspx" />) used to format the
            <paramref name="expression" /> value when returning that value.
            </param>
        <summary>
            Returns the formatted value for the specified <paramref name="expression" />. Specifically, returns the
            first non-<c>null</c> value found in:
            the <see cref="P:Microsoft.AspNetCore.Mvc.ActionContext.ModelState" /> entry with full name, or
            the <paramref name="expression" /> evaluated against <see cref="P:Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.Model" />.
            See <see cref="M:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.NameFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})" /> for more information about a "full name".
            </summary>
        <returns>A <see cref="T:System.String" /> containing the formatted value.</returns>
        <remarks>
            Converts the <paramref name="expression" /> result to a <see cref="T:System.String" /> directly if
            <paramref name="format" /> is <c>null</c> or empty.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewData">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::AspNetCore::Mvc::ViewFeatures::ViewDataDictionary&lt;TModel&gt; ^ ViewData { Microsoft::AspNetCore::Mvc::ViewFeatures::ViewDataDictionary&lt;TModel&gt; ^ get(); };" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary&lt;TModel&gt; ViewData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary`1&lt;!TModel&gt; ViewData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper`1.ViewData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ViewData As ViewDataDictionary(Of TModel)" />
      <MemberSignature Language="F#" Value="member this.ViewData : Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary&lt;'Model&gt;" Usage="Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper&lt;'Model&gt;.ViewData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.ViewFeatures</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary&lt;TModel&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the current view data.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
