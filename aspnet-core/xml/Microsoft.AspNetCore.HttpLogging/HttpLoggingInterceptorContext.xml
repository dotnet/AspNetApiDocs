<Type Name="HttpLoggingInterceptorContext" FullName="Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext">
  <TypeSignature Language="C#" Value="public sealed class HttpLoggingInterceptorContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpLoggingInterceptorContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpLoggingInterceptorContext" />
  <TypeSignature Language="F#" Value="type HttpLoggingInterceptorContext = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.HttpLogging</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            The context used for <see cref="T:Microsoft.AspNetCore.HttpLogging.IHttpLoggingInterceptor" />.
            </summary>
    <remarks>
            Settings will be pre-initialized with the relevant values from <see cref="T:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions" /> and updated with endpoint specific
            values from <see cref="T:Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute" /> or
            <see cref="M:Microsoft.AspNetCore.Builder.HttpLoggingEndpointConventionBuilderExtensions.WithHttpLogging``1(``0,Microsoft.AspNetCore.HttpLogging.HttpLoggingFields,System.Nullable{System.Int32},System.Nullable{System.Int32})" />.
            All settings can be modified per request. All settings will carry over from
            <see cref="M:Microsoft.AspNetCore.HttpLogging.IHttpLoggingInterceptor.OnRequestAsync(Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext)" />
            to <see cref="M:Microsoft.AspNetCore.HttpLogging.IHttpLoggingInterceptor.OnResponseAsync(Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext)" /> except the <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.Parameters" />
            which are cleared after logging the request.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpLoggingInterceptorContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HttpLogging</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParameter">
      <MemberSignature Language="C#" Value="public void AddParameter (string key, object? value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddParameter(string key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.AddParameter(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddParameter (key As String, value As Object)" />
      <MemberSignature Language="F#" Value="member this.AddParameter : string * obj -&gt; unit" Usage="httpLoggingInterceptorContext.AddParameter (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HttpLogging</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="key">The parameter name.</param>
        <param name="value">The parameter value.</param>
        <summary>
            Adds data that will be logged as part of the request or response. See <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.Parameters" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Disable">
      <MemberSignature Language="C#" Value="public void Disable (Microsoft.AspNetCore.HttpLogging.HttpLoggingFields fields);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Disable(valuetype Microsoft.AspNetCore.HttpLogging.HttpLoggingFields fields) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.Disable(Microsoft.AspNetCore.HttpLogging.HttpLoggingFields)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Disable (fields As HttpLoggingFields)" />
      <MemberSignature Language="F#" Value="member this.Disable : Microsoft.AspNetCore.HttpLogging.HttpLoggingFields -&gt; unit" Usage="httpLoggingInterceptorContext.Disable fields" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HttpLogging</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fields" Type="Microsoft.AspNetCore.HttpLogging.HttpLoggingFields" />
      </Parameters>
      <Docs>
        <param name="fields">Fields to disable.</param>
        <summary>
            Removes the given fields from what's currently enabled in <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.LoggingFields" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enable">
      <MemberSignature Language="C#" Value="public void Enable (Microsoft.AspNetCore.HttpLogging.HttpLoggingFields fields);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enable(valuetype Microsoft.AspNetCore.HttpLogging.HttpLoggingFields fields) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.Enable(Microsoft.AspNetCore.HttpLogging.HttpLoggingFields)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Enable (fields As HttpLoggingFields)" />
      <MemberSignature Language="F#" Value="member this.Enable : Microsoft.AspNetCore.HttpLogging.HttpLoggingFields -&gt; unit" Usage="httpLoggingInterceptorContext.Enable fields" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HttpLogging</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fields" Type="Microsoft.AspNetCore.HttpLogging.HttpLoggingFields" />
      </Parameters>
      <Docs>
        <param name="fields">Additional fields to enable.</param>
        <summary>
            Adds the given fields to what's currently enabled in <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.LoggingFields" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpContext">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Http.HttpContext HttpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Http.HttpContext HttpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.HttpContext" />
      <MemberSignature Language="VB.NET" Value="Public Property HttpContext As HttpContext" />
      <MemberSignature Language="F#" Value="member this.HttpContext : Microsoft.AspNetCore.Http.HttpContext with get, set" Usage="Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.HttpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HttpLogging</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Http.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The request context.
            </summary>
        <value>To be added.</value>
        <remarks>
            This property should not be set by user code except for testing purposes.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnyEnabled">
      <MemberSignature Language="C#" Value="public bool IsAnyEnabled (Microsoft.AspNetCore.HttpLogging.HttpLoggingFields fields);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAnyEnabled(valuetype Microsoft.AspNetCore.HttpLogging.HttpLoggingFields fields) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.IsAnyEnabled(Microsoft.AspNetCore.HttpLogging.HttpLoggingFields)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAnyEnabled (fields As HttpLoggingFields) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsAnyEnabled : Microsoft.AspNetCore.HttpLogging.HttpLoggingFields -&gt; bool" Usage="httpLoggingInterceptorContext.IsAnyEnabled fields" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HttpLogging</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fields" Type="Microsoft.AspNetCore.HttpLogging.HttpLoggingFields" />
      </Parameters>
      <Docs>
        <param name="fields">One or more field flags to check.</param>
        <summary>
            Checks if any of the given fields are currently enabled in <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.LoggingFields" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoggingFields">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.HttpLogging.HttpLoggingFields LoggingFields { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.AspNetCore.HttpLogging.HttpLoggingFields LoggingFields" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.LoggingFields" />
      <MemberSignature Language="VB.NET" Value="Public Property LoggingFields As HttpLoggingFields" />
      <MemberSignature Language="F#" Value="member this.LoggingFields : Microsoft.AspNetCore.HttpLogging.HttpLoggingFields with get, set" Usage="Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.LoggingFields" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HttpLogging</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.HttpLogging.HttpLoggingFields</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets which parts of the request and response to log.
            </summary>
        <value>To be added.</value>
        <remarks>
            This is pre-populated with the value from <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.LoggingFields" />,
            <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute.LoggingFields" />, or
            <see cref="M:Microsoft.AspNetCore.Builder.HttpLoggingEndpointConventionBuilderExtensions.WithHttpLogging``1(``0,Microsoft.AspNetCore.HttpLogging.HttpLoggingFields,System.Nullable{System.Int32},System.Nullable{System.Int32})" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;string,object?&gt;&gt; Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; Parameters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.Parameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameters As IList(Of KeyValuePair(Of String, Object))" />
      <MemberSignature Language="F#" Value="member this.Parameters : System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt;" Usage="Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HttpLogging</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 0, 1, 2 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a list of parameters that will be logged as part of the request or response. Values specified in <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.LoggingFields" />
            will be added automatically after all interceptors run. All values are cleared after logging the request.
            All other relevant settings will carry over to the response.
            </summary>
        <value>To be added.</value>
        <remarks>
            If <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.CombineLogs" /> is enabled, the parameters will be logged as part of the combined log.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestBodyLogLimit">
      <MemberSignature Language="C#" Value="public int RequestBodyLogLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RequestBodyLogLimit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.RequestBodyLogLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestBodyLogLimit As Integer" />
      <MemberSignature Language="F#" Value="member this.RequestBodyLogLimit : int with get, set" Usage="Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.RequestBodyLogLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HttpLogging</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the maximum number of bytes of the request body to log.
            </summary>
        <value>To be added.</value>
        <remarks>
            This is pre-populated with the value from <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.RequestBodyLogLimit" />,
            <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute.RequestBodyLogLimit" />, or
            <see cref="M:Microsoft.AspNetCore.Builder.HttpLoggingEndpointConventionBuilderExtensions.WithHttpLogging``1(``0,Microsoft.AspNetCore.HttpLogging.HttpLoggingFields,System.Nullable{System.Int32},System.Nullable{System.Int32})" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseBodyLogLimit">
      <MemberSignature Language="C#" Value="public int ResponseBodyLogLimit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ResponseBodyLogLimit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.ResponseBodyLogLimit" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseBodyLogLimit As Integer" />
      <MemberSignature Language="F#" Value="member this.ResponseBodyLogLimit : int with get, set" Usage="Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.ResponseBodyLogLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HttpLogging</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the maximum number of bytes of the response body to log.
            </summary>
        <value>To be added.</value>
        <remarks>
            This is pre-populated with the value from <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingOptions.ResponseBodyLogLimit" />,
            <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingAttribute.ResponseBodyLogLimit" />, or
            <see cref="M:Microsoft.AspNetCore.Builder.HttpLoggingEndpointConventionBuilderExtensions.WithHttpLogging``1(``0,Microsoft.AspNetCore.HttpLogging.HttpLoggingFields,System.Nullable{System.Int32},System.Nullable{System.Int32})" />.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDisable">
      <MemberSignature Language="C#" Value="public bool TryDisable (Microsoft.AspNetCore.HttpLogging.HttpLoggingFields fields);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryDisable(valuetype Microsoft.AspNetCore.HttpLogging.HttpLoggingFields fields) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.TryDisable(Microsoft.AspNetCore.HttpLogging.HttpLoggingFields)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryDisable (fields As HttpLoggingFields) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryDisable : Microsoft.AspNetCore.HttpLogging.HttpLoggingFields -&gt; bool" Usage="httpLoggingInterceptorContext.TryDisable fields" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HttpLogging</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fields" Type="Microsoft.AspNetCore.HttpLogging.HttpLoggingFields" />
      </Parameters>
      <Docs>
        <param name="fields">One or more field flags to disable if present.</param>
        <summary>
            Disables the given fields if any are currently enabled in <see cref="P:Microsoft.AspNetCore.HttpLogging.HttpLoggingInterceptorContext.LoggingFields" />.
            </summary>
        <returns>
          <see langword="true" /> if any of the fields were previously enabled.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
