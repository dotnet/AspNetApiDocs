<Type Name="CandidateSet" FullName="Microsoft.AspNetCore.Routing.Matching.CandidateSet">
  <TypeSignature Language="C++ CLI" Value="public ref class CandidateSet sealed" />
  <TypeSignature Language="C#" Value="public sealed class CandidateSet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CandidateSet extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Routing.Matching.CandidateSet" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CandidateSet" />
  <TypeSignature Language="F#" Value="type CandidateSet = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="aspnetcore-8.0;aspnetcore-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="aspnetcore-8.0;aspnetcore-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents a set of <see cref="T:Microsoft.AspNetCore.Http.Endpoint" /> candidates that have been matched
            by the routing system. Used by implementations of <see cref="T:Microsoft.AspNetCore.Routing.Matching.EndpointSelector" />
            and <see cref="T:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CandidateSet(cli::array &lt;Microsoft::AspNetCore::Http::Endpoint ^&gt; ^ endpoints, cli::array &lt;Microsoft::AspNetCore::Routing::RouteValueDictionary ^&gt; ^ values, cli::array &lt;int&gt; ^ scores);" />
      <MemberSignature Language="C#" Value="public CandidateSet (Microsoft.AspNetCore.Http.Endpoint[] endpoints, Microsoft.AspNetCore.Routing.RouteValueDictionary[] values, int[] scores);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Http.Endpoint[] endpoints, class Microsoft.AspNetCore.Routing.RouteValueDictionary[] values, int32[] scores) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.CandidateSet.#ctor(Microsoft.AspNetCore.Http.Endpoint[],Microsoft.AspNetCore.Routing.RouteValueDictionary[],System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoints As Endpoint(), values As RouteValueDictionary(), scores As Integer())" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Routing.Matching.CandidateSet : Microsoft.AspNetCore.Http.Endpoint[] * Microsoft.AspNetCore.Routing.RouteValueDictionary[] * int[] -&gt; Microsoft.AspNetCore.Routing.Matching.CandidateSet" Usage="new Microsoft.AspNetCore.Routing.Matching.CandidateSet (endpoints, values, scores)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoints" Type="Microsoft.AspNetCore.Http.Endpoint[]" />
        <Parameter Name="values" Type="Microsoft.AspNetCore.Routing.RouteValueDictionary[]" />
        <Parameter Name="scores" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="endpoints">The list of endpoints, sorted in descending priority order.</param>
        <param name="values">The list of <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary" /> instances.</param>
        <param name="scores">The list of endpoint scores. <see cref="P:Microsoft.AspNetCore.Routing.Matching.CandidateState.Score" />.</param>
        <summary>
          <para>
            Initializes a new instances of the <see cref="T:Microsoft.AspNetCore.Routing.Matching.CandidateSet" /> class with the provided <paramref name="endpoints" />,
            <paramref name="values" />, and <paramref name="scores" />.
            </para>
          <para>
            The constructor is provided to enable unit tests of implementations of <see cref="T:Microsoft.AspNetCore.Routing.Matching.EndpointSelector" />
            and <see cref="T:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy" />.
            </para>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Routing.Matching.CandidateSet.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.AspNetCore.Routing.Matching.CandidateSet.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the count of candidates in the set.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandEndpoint">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExpandEndpoint(int index, System::Collections::Generic::IReadOnlyList&lt;Microsoft::AspNetCore::Http::Endpoint ^&gt; ^ endpoints, System::Collections::Generic::IComparer&lt;Microsoft::AspNetCore::Http::Endpoint ^&gt; ^ comparer);" />
      <MemberSignature Language="C#" Value="public void ExpandEndpoint (int index, System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; endpoints, System.Collections.Generic.IComparer&lt;Microsoft.AspNetCore.Http.Endpoint&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExpandEndpoint(int32 index, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.AspNetCore.Http.Endpoint&gt; endpoints, class System.Collections.Generic.IComparer`1&lt;class Microsoft.AspNetCore.Http.Endpoint&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.CandidateSet.ExpandEndpoint(System.Int32,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint},System.Collections.Generic.IComparer{Microsoft.AspNetCore.Http.Endpoint})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExpandEndpoint (index As Integer, endpoints As IReadOnlyList(Of Endpoint), comparer As IComparer(Of Endpoint))" />
      <MemberSignature Language="F#" Value="member this.ExpandEndpoint : int * System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; * System.Collections.Generic.IComparer&lt;Microsoft.AspNetCore.Http.Endpoint&gt; -&gt; unit" Usage="candidateSet.ExpandEndpoint (index, endpoints, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0;aspnetcore-9.0" />
        <Parameter Name="endpoints" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt;" Index="1" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0;aspnetcore-9.0" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;Microsoft.AspNetCore.Http.Endpoint&gt;" Index="2" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0;aspnetcore-9.0" />
      </Parameters>
      <Docs>
        <param name="index">The candidate index.</param>
        <param name="endpoints">
            The list of endpoints <see cref="T:Microsoft.AspNetCore.Http.Endpoint" /> to replace the original <see cref="T:Microsoft.AspNetCore.Http.Endpoint" /> at
            the <paramref name="index" />. If <paramref name="endpoints" /> is empty, the candidate will be marked
            as invalid.
            </param>
        <param name="comparer">
            The endpoint comparer used to order the endpoints. Can be retrieved from the service provider as
            type <see cref="T:Microsoft.AspNetCore.Routing.Matching.EndpointMetadataComparer" />.
            </param>
        <summary>
            Replaces the <see cref="T:Microsoft.AspNetCore.Http.Endpoint" /> at the provided <paramref name="index" /> with the
            provided <paramref name="endpoints" />.
            </summary>
        <remarks>
          <para>
            This method supports replacing a dynamic endpoint with a collection of endpoints, and relying on
            <see cref="T:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy" /> implementations to disambiguate further.
            </para>
          <para>
            The endpoint being replace should have a unique score value. The score is the combination of route
            patter precedence, order, and policy metadata evaluation. A dynamic endpoint will not function
            correctly if other endpoints exist with the same score.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidCandidate">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidCandidate(int index);" />
      <MemberSignature Language="C#" Value="public bool IsValidCandidate (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidCandidate(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.CandidateSet.IsValidCandidate(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidCandidate (index As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsValidCandidate : int -&gt; bool" Usage="candidateSet.IsValidCandidate index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The candidate index.</param>
        <summary>
            Gets a value which indicates where the <see cref="T:Microsoft.AspNetCore.Http.Endpoint" /> is considered
            a valid candidate for the current request.
            </summary>
        <returns>
          <c>true</c> if the candidate at position <paramref name="index" /> is considered valid
            for the current request, otherwise <c>false</c>.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::AspNetCore::Routing::Matching::CandidateState % default[int] { Microsoft::AspNetCore::Routing::Matching::CandidateState % get(int index); };" />
      <MemberSignature Language="C#" Value="public ref Microsoft.AspNetCore.Routing.Matching.CandidateState this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.AspNetCore.Routing.Matching.CandidateState Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Routing.Matching.CandidateSet.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As CandidateState" />
      <MemberSignature Language="F#" Value="member this.Item(int) : CandidateState" Usage="Microsoft.AspNetCore.Routing.Matching.CandidateSet.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>Microsoft.AspNetCore.Routing.Matching.CandidateState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The candidate index.</param>
        <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Routing.Matching.CandidateState" /> associated with the candidate <see cref="T:Microsoft.AspNetCore.Http.Endpoint" />
            at <paramref name="index" />.
            </summary>
        <value>
            A reference to the <see cref="T:Microsoft.AspNetCore.Routing.Matching.CandidateState" />. The result is returned by reference.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceEndpoint">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReplaceEndpoint(int index, Microsoft::AspNetCore::Http::Endpoint ^ endpoint, Microsoft::AspNetCore::Routing::RouteValueDictionary ^ values);" />
      <MemberSignature Language="C#" Value="public void ReplaceEndpoint (int index, Microsoft.AspNetCore.Http.Endpoint endpoint, Microsoft.AspNetCore.Routing.RouteValueDictionary values);" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReplaceEndpoint(int32 index, class Microsoft.AspNetCore.Http.Endpoint endpoint, class Microsoft.AspNetCore.Routing.RouteValueDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.CandidateSet.ReplaceEndpoint(System.Int32,Microsoft.AspNetCore.Http.Endpoint,Microsoft.AspNetCore.Routing.RouteValueDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReplaceEndpoint (index As Integer, endpoint As Endpoint, values As RouteValueDictionary)" />
      <MemberSignature Language="F#" Value="member this.ReplaceEndpoint : int * Microsoft.AspNetCore.Http.Endpoint * Microsoft.AspNetCore.Routing.RouteValueDictionary -&gt; unit" Usage="candidateSet.ReplaceEndpoint (index, endpoint, values)" />
      <MemberSignature Language="C#" Value="public void ReplaceEndpoint (int index, Microsoft.AspNetCore.Http.Endpoint? endpoint, Microsoft.AspNetCore.Routing.RouteValueDictionary? values);" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0;aspnetcore-9.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-8.0;aspnetcore-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0;aspnetcore-9.0" />
        <Parameter Name="endpoint" Type="Microsoft.AspNetCore.Http.Endpoint" Index="1" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0;aspnetcore-9.0" />
        <Parameter Name="values" Type="Microsoft.AspNetCore.Routing.RouteValueDictionary" Index="2" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0;aspnetcore-9.0" />
      </Parameters>
      <Docs>
        <param name="index">The candidate index.</param>
        <param name="endpoint">
            The <see cref="T:Microsoft.AspNetCore.Http.Endpoint" /> to replace the original <see cref="T:Microsoft.AspNetCore.Http.Endpoint" /> at
            the <paramref name="index" />. If <paramref name="endpoint" /> is <c>null</c>. the candidate will be marked
            as invalid.
            </param>
        <param name="values">
            The <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary" /> to replace the original <see cref="T:Microsoft.AspNetCore.Routing.RouteValueDictionary" /> at
            the <paramref name="index" />.
            </param>
        <summary>
            Replaces the <see cref="T:Microsoft.AspNetCore.Http.Endpoint" /> at the provided <paramref name="index" /> with the
            provided <paramref name="endpoint" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValidity">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValidity(int index, bool value);" />
      <MemberSignature Language="C#" Value="public void SetValidity (int index, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValidity(int32 index, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.CandidateSet.SetValidity(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValidity (index As Integer, value As Boolean)" />
      <MemberSignature Language="F#" Value="member this.SetValidity : int * bool -&gt; unit" Usage="candidateSet.SetValidity (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">The candidate index.</param>
        <param name="value">
            The value to set. If <c>true</c> the candidate is considered valid for the current request.
            </param>
        <summary>
            Sets the validity of the candidate at the provided index.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
