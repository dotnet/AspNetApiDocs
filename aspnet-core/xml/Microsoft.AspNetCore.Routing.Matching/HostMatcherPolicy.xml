<Type Name="HostMatcherPolicy" FullName="Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy">
  <TypeSignature Language="C++ CLI" Value="public ref class HostMatcherPolicy sealed : Microsoft::AspNetCore::Routing::MatcherPolicy, Microsoft::AspNetCore::Routing::Matching::IEndpointComparerPolicy, Microsoft::AspNetCore::Routing::Matching::IEndpointSelectorPolicy, Microsoft::AspNetCore::Routing::Matching::INodeBuilderPolicy" />
  <TypeSignature Language="C#" Value="public sealed class HostMatcherPolicy : Microsoft.AspNetCore.Routing.MatcherPolicy, Microsoft.AspNetCore.Routing.Matching.IEndpointComparerPolicy, Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy, Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HostMatcherPolicy extends Microsoft.AspNetCore.Routing.MatcherPolicy implements class Microsoft.AspNetCore.Routing.Matching.IEndpointComparerPolicy, class Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy, class Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HostMatcherPolicy&#xA;Inherits MatcherPolicy&#xA;Implements IEndpointComparerPolicy, IEndpointSelectorPolicy, INodeBuilderPolicy" />
  <TypeSignature Language="F#" Value="type HostMatcherPolicy = class&#xA;    inherit MatcherPolicy&#xA;    interface IEndpointComparerPolicy&#xA;    interface IEndpointSelectorPolicy&#xA;    interface INodeBuilderPolicy" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1" />
  <TypeSignature Language="F#" Value="type HostMatcherPolicy = class&#xA;    inherit MatcherPolicy&#xA;    interface IEndpointComparerPolicy&#xA;    interface INodeBuilderPolicy&#xA;    interface IEndpointSelectorPolicy" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.AspNetCore.Routing.MatcherPolicy</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Routing.Matching.IEndpointComparerPolicy</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="aspnetcore-8.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="aspnetcore-8.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            A <see cref="T:Microsoft.AspNetCore.Routing.MatcherPolicy" /> that implements filtering and selection by
            the host header of a request.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HostMatcherPolicy();" />
      <MemberSignature Language="C#" Value="public HostMatcherPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ ApplyAsync(Microsoft::AspNetCore::Http::HttpContext ^ httpContext, Microsoft::AspNetCore::Routing::Matching::CandidateSet ^ candidates);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task ApplyAsync (Microsoft.AspNetCore.Http.HttpContext httpContext, Microsoft.AspNetCore.Routing.Matching.CandidateSet candidates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ApplyAsync(class Microsoft.AspNetCore.Http.HttpContext httpContext, class Microsoft.AspNetCore.Routing.Matching.CandidateSet candidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.ApplyAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.Matching.CandidateSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyAsync (httpContext As HttpContext, candidates As CandidateSet) As Task" />
      <MemberSignature Language="F#" Value="abstract member ApplyAsync : Microsoft.AspNetCore.Http.HttpContext * Microsoft.AspNetCore.Routing.Matching.CandidateSet -&gt; System.Threading.Tasks.Task&#xA;override this.ApplyAsync : Microsoft.AspNetCore.Http.HttpContext * Microsoft.AspNetCore.Routing.Matching.CandidateSet -&gt; System.Threading.Tasks.Task" Usage="hostMatcherPolicy.ApplyAsync (httpContext, candidates)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy.ApplyAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.Matching.CandidateSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" />
        <Parameter Name="candidates" Type="Microsoft.AspNetCore.Routing.Matching.CandidateSet" />
      </Parameters>
      <Docs>
        <param name="httpContext">To be added.</param>
        <param name="candidates">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="BuildJumpTable">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Microsoft::AspNetCore::Routing::Matching::PolicyJumpTable ^ BuildJumpTable(int exitDestination, System::Collections::Generic::IReadOnlyList&lt;Microsoft::AspNetCore::Routing::Matching::PolicyJumpTableEdge&gt; ^ edges);" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable BuildJumpTable (int exitDestination, System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge&gt; edges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable BuildJumpTable(int32 exitDestination, class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge&gt; edges) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.BuildJumpTable(System.Int32,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge})" />
      <MemberSignature Language="VB.NET" Value="Public Function BuildJumpTable (exitDestination As Integer, edges As IReadOnlyList(Of PolicyJumpTableEdge)) As PolicyJumpTable" />
      <MemberSignature Language="F#" Value="abstract member BuildJumpTable : int * System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge&gt; -&gt; Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable&#xA;override this.BuildJumpTable : int * System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge&gt; -&gt; Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable" Usage="hostMatcherPolicy.BuildJumpTable (exitDestination, edges)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy.BuildJumpTable(System.Int32,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Routing.Matching.PolicyJumpTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitDestination" Type="System.Int32" />
        <Parameter Name="edges" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Routing.Matching.PolicyJumpTableEdge&gt;" />
      </Parameters>
      <Docs>
        <param name="exitDestination">To be added.</param>
        <param name="edges">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IComparer&lt;Microsoft::AspNetCore::Http::Endpoint ^&gt; ^ Comparer { System::Collections::Generic::IComparer&lt;Microsoft::AspNetCore::Http::Endpoint ^&gt; ^ get(); };" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IComparer&lt;Microsoft.AspNetCore.Http.Endpoint&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IComparer`1&lt;class Microsoft.AspNetCore.Http.Endpoint&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IComparer(Of Endpoint)" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IComparer&lt;Microsoft.AspNetCore.Http.Endpoint&gt;" Usage="Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.Comparer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.AspNetCore.Routing.Matching.IEndpointComparerPolicy.Comparer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IComparer&lt;Microsoft.AspNetCore.Http.Endpoint&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="GetEdges">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IReadOnlyList&lt;Microsoft::AspNetCore::Routing::Matching::PolicyNodeEdge&gt; ^ GetEdges(System::Collections::Generic::IReadOnlyList&lt;Microsoft::AspNetCore::Http::Endpoint ^&gt; ^ endpoints);" />
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge&gt; GetEdges (System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; endpoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyList`1&lt;valuetype Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge&gt; GetEdges(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.AspNetCore.Http.Endpoint&gt; endpoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.GetEdges(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEdges (endpoints As IReadOnlyList(Of Endpoint)) As IReadOnlyList(Of PolicyNodeEdge)" />
      <MemberSignature Language="F#" Value="abstract member GetEdges : System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge&gt;&#xA;override this.GetEdges : System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge&gt;" Usage="hostMatcherPolicy.GetEdges endpoints" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy.GetEdges(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Routing.Matching.PolicyNodeEdge&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoints" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt;" />
      </Parameters>
      <Docs>
        <param name="endpoints">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy.AppliesToEndpoints">
      <MemberSignature Language="C++ CLI" Value=" virtual bool Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy.AppliesToEndpoints(System::Collections::Generic::IReadOnlyList&lt;Microsoft::AspNetCore::Http::Endpoint ^&gt; ^ endpoints) = Microsoft::AspNetCore::Routing::Matching::IEndpointSelectorPolicy::AppliesToEndpoints;" />
      <MemberSignature Language="C#" Value="bool IEndpointSelectorPolicy.AppliesToEndpoints (System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; endpoints);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy.AppliesToEndpoints(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.AspNetCore.Http.Endpoint&gt; endpoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.Microsoft#AspNetCore#Routing#Matching#IEndpointSelectorPolicy#AppliesToEndpoints(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})" />
      <MemberSignature Language="VB.NET" Value="Function AppliesToEndpoints (endpoints As IReadOnlyList(Of Endpoint)) As Boolean Implements IEndpointSelectorPolicy.AppliesToEndpoints" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy.AppliesToEndpoints : System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; -&gt; bool&#xA;override this.Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy.AppliesToEndpoints : System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; -&gt; bool" Usage="hostMatcherPolicy.Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy.AppliesToEndpoints endpoints" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy.AppliesToEndpoints(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoints" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt;" />
      </Parameters>
      <Docs>
        <param name="endpoints">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy.AppliesToEndpoints">
      <MemberSignature Language="C++ CLI" Value=" virtual bool Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy.AppliesToEndpoints(System::Collections::Generic::IReadOnlyList&lt;Microsoft::AspNetCore::Http::Endpoint ^&gt; ^ endpoints) = Microsoft::AspNetCore::Routing::Matching::INodeBuilderPolicy::AppliesToEndpoints;" />
      <MemberSignature Language="C#" Value="bool INodeBuilderPolicy.AppliesToEndpoints (System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; endpoints);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy.AppliesToEndpoints(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.AspNetCore.Http.Endpoint&gt; endpoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.Microsoft#AspNetCore#Routing#Matching#INodeBuilderPolicy#AppliesToEndpoints(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})" />
      <MemberSignature Language="VB.NET" Value="Function AppliesToEndpoints (endpoints As IReadOnlyList(Of Endpoint)) As Boolean Implements INodeBuilderPolicy.AppliesToEndpoints" />
      <MemberSignature Language="F#" Value="abstract member Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy.AppliesToEndpoints : System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; -&gt; bool&#xA;override this.Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy.AppliesToEndpoints : System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; -&gt; bool" Usage="hostMatcherPolicy.Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy.AppliesToEndpoints endpoints" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy.AppliesToEndpoints(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoints" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt;" />
      </Parameters>
      <Docs>
        <param name="endpoints">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Order { int get(); };" />
      <MemberSignature Language="C#" Value="public override int Order { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Order" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.Order" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Order As Integer" />
      <MemberSignature Language="F#" Value="member this.Order : int" Usage="Microsoft.AspNetCore.Routing.Matching.HostMatcherPolicy.Order" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
  </Members>
</Type>
