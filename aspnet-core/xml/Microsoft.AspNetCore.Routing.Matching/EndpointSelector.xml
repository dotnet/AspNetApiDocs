<Type Name="EndpointSelector" FullName="Microsoft.AspNetCore.Routing.Matching.EndpointSelector">
  <TypeSignature Language="C++ CLI" Value="public ref class EndpointSelector abstract" />
  <TypeSignature Language="C#" Value="public abstract class EndpointSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit EndpointSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Routing.Matching.EndpointSelector" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class EndpointSelector" />
  <TypeSignature Language="F#" Value="type EndpointSelector = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A service that is responsible for the final <see cref="T:Microsoft.AspNetCore.Http.Endpoint" /> selection
            decision. To use a custom <see cref="T:Microsoft.AspNetCore.Routing.Matching.EndpointSelector" /> register an implementation
            of <see cref="T:Microsoft.AspNetCore.Routing.Matching.EndpointSelector" /> in the dependency injection container as a singleton.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; EndpointSelector();" />
      <MemberSignature Language="C#" Value="protected EndpointSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.EndpointSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Threading::Tasks::Task ^ SelectAsync(Microsoft::AspNetCore::Http::HttpContext ^ httpContext, Microsoft::AspNetCore::Routing::Matching::CandidateSet ^ candidates);" />
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task SelectAsync (Microsoft.AspNetCore.Http.HttpContext httpContext, Microsoft.AspNetCore.Routing.Matching.CandidateSet candidates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SelectAsync(class Microsoft.AspNetCore.Http.HttpContext httpContext, class Microsoft.AspNetCore.Routing.Matching.CandidateSet candidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.EndpointSelector.SelectAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.Matching.CandidateSet)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectAsync (httpContext As HttpContext, candidates As CandidateSet) As Task" />
      <MemberSignature Language="F#" Value="abstract member SelectAsync : Microsoft.AspNetCore.Http.HttpContext * Microsoft.AspNetCore.Routing.Matching.CandidateSet -&gt; System.Threading.Tasks.Task" Usage="endpointSelector.SelectAsync (httpContext, candidates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" Index="0" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="candidates" Type="Microsoft.AspNetCore.Routing.Matching.CandidateSet" Index="1" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="httpContext">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> associated with the current request.</param>
        <param name="candidates">The <see cref="T:Microsoft.AspNetCore.Routing.Matching.CandidateSet" />.</param>
        <summary>
            Asynchronously selects an <see cref="T:Microsoft.AspNetCore.Http.Endpoint" /> from the <see cref="T:Microsoft.AspNetCore.Routing.Matching.CandidateSet" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes asynchronously once endpoint selection is complete.</returns>
        <remarks>
            An <see cref="T:Microsoft.AspNetCore.Routing.Matching.EndpointSelector" /> should assign the endpoint by calling
            <see cref="M:Microsoft.AspNetCore.Http.EndpointHttpContextExtensions.SetEndpoint(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Http.Endpoint)" />
            and setting <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.RouteValues" /> once an endpoint is selected.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Threading::Tasks::Task ^ SelectAsync(Microsoft::AspNetCore::Http::HttpContext ^ httpContext, Microsoft::AspNetCore::Routing::EndpointSelectorContext ^ context, Microsoft::AspNetCore::Routing::Matching::CandidateSet ^ candidates);" />
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task SelectAsync (Microsoft.AspNetCore.Http.HttpContext httpContext, Microsoft.AspNetCore.Routing.EndpointSelectorContext context, Microsoft.AspNetCore.Routing.Matching.CandidateSet candidates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SelectAsync(class Microsoft.AspNetCore.Http.HttpContext httpContext, class Microsoft.AspNetCore.Routing.EndpointSelectorContext context, class Microsoft.AspNetCore.Routing.Matching.CandidateSet candidates) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.EndpointSelector.SelectAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.EndpointSelectorContext,Microsoft.AspNetCore.Routing.Matching.CandidateSet)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function SelectAsync (httpContext As HttpContext, context As EndpointSelectorContext, candidates As CandidateSet) As Task" />
      <MemberSignature Language="F#" Value="abstract member SelectAsync : Microsoft.AspNetCore.Http.HttpContext * Microsoft.AspNetCore.Routing.EndpointSelectorContext * Microsoft.AspNetCore.Routing.Matching.CandidateSet -&gt; System.Threading.Tasks.Task" Usage="endpointSelector.SelectAsync (httpContext, context, candidates)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" Index="0" FrameworkAlternate="aspnetcore-2.2" />
        <Parameter Name="context" Type="Microsoft.AspNetCore.Routing.EndpointSelectorContext" Index="1" FrameworkAlternate="aspnetcore-2.2" />
        <Parameter Name="candidates" Type="Microsoft.AspNetCore.Routing.Matching.CandidateSet" Index="2" FrameworkAlternate="aspnetcore-2.2" />
      </Parameters>
      <Docs>
        <param name="httpContext">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> associated with the current request.</param>
        <param name="context">The <see cref="T:Microsoft.AspNetCore.Routing.EndpointSelectorContext" /> associated with the current request.</param>
        <param name="candidates">The <see cref="T:Microsoft.AspNetCore.Routing.Matching.CandidateSet" />.</param>
        <summary>
            Asynchronously selects an <see cref="T:Microsoft.AspNetCore.Http.Endpoint" /> from the <see cref="T:Microsoft.AspNetCore.Routing.Matching.CandidateSet" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes asynchronously once endpoint selection is complete.</returns>
        <remarks>
            An <see cref="T:Microsoft.AspNetCore.Routing.Matching.EndpointSelector" /> should assign the <see cref="P:Microsoft.AspNetCore.Routing.EndpointSelectorContext.Endpoint" />
            and <see cref="P:Microsoft.AspNetCore.Routing.EndpointSelectorContext.RouteValues" /> properties once an endpoint is selected.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
