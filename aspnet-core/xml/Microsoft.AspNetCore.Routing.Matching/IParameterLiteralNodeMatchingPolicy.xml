<Type Name="IParameterLiteralNodeMatchingPolicy" FullName="Microsoft.AspNetCore.Routing.Matching.IParameterLiteralNodeMatchingPolicy">
  <TypeSignature Language="C#" Value="public interface IParameterLiteralNodeMatchingPolicy : Microsoft.AspNetCore.Routing.IParameterPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IParameterLiteralNodeMatchingPolicy implements class Microsoft.AspNetCore.Routing.IParameterPolicy" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Routing.Matching.IParameterLiteralNodeMatchingPolicy" />
  <TypeSignature Language="VB.NET" Value="Public Interface IParameterLiteralNodeMatchingPolicy&#xA;Implements IParameterPolicy" />
  <TypeSignature Language="F#" Value="type IParameterLiteralNodeMatchingPolicy = interface&#xA;    interface IParameterPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IParameterLiteralNodeMatchingPolicy implements class Microsoft.AspNetCore.Routing.IParameterPolicy" FrameworkAlternate="aspnetcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Routing.IParameterPolicy</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Defines the contract that a class must implement in order to check if a literal value is valid for a given constraint.
            <remarks>
            When a parameter implements this interface, the router is able to optimize away some paths from the route table that don't match this constraint.
            </remarks></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="MatchesLiteral">
      <MemberSignature Language="C#" Value="public bool MatchesLiteral (string parameterName, string literal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MatchesLiteral(string parameterName, string literal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.Matching.IParameterLiteralNodeMatchingPolicy.MatchesLiteral(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MatchesLiteral (parameterName As String, literal As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member MatchesLiteral : string * string -&gt; bool" Usage="iParameterLiteralNodeMatchingPolicy.MatchesLiteral (parameterName, literal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
        <Parameter Name="literal" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameterName">The parameter name we are currently evaluating.</param>
        <param name="literal">The literal to test the constraint against.</param>
        <summary>
            Determines whether the given <paramref name="literal" /> can match the constraint.
            </summary>
        <returns>
          <c>true</c> if the literal contains a valid value; otherwise, <c>false</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
