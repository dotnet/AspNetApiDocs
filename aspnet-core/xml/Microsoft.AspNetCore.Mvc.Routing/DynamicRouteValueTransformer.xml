<Type Name="DynamicRouteValueTransformer" FullName="Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer">
  <TypeSignature Language="C++ CLI" Value="public ref class DynamicRouteValueTransformer abstract" />
  <TypeSignature Language="C#" Value="public abstract class DynamicRouteValueTransformer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DynamicRouteValueTransformer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class DynamicRouteValueTransformer" />
  <TypeSignature Language="F#" Value="type DynamicRouteValueTransformer = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="aspnetcore-8.0;aspnetcore-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="aspnetcore-8.0;aspnetcore-9.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
             Provides an abstraction for dynamically manipulating route value to select a controller action or page.
             </summary>
    <remarks>
      <para>
        <see cref="T:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer" /> can be used with
             <see cref="M:Microsoft.AspNetCore.Builder.ControllerEndpointRouteBuilderExtensions.MapDynamicControllerRoute``1(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.String)" />
             or <c>MapDynamicPageRoute</c> to implement custom logic that selects a controller action or page.
             </para>
      <para>
             The route values returned from a <see cref="M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.TransformAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary)" /> implementation
             will be used to select an action based on matching of the route values. All actions that match the route values
             will be considered as candidates, and may be further disambiguated by
             <see cref="M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.FilterAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})" /> as well as
             <see cref="T:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy" /> implementations such as <see cref="T:Microsoft.AspNetCore.Routing.Matching.HttpMethodMatcherPolicy" />.
             </para>
      <para>
             Operations on a <see cref="T:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer" /> instance will be called for each dynamic endpoint
             in the following sequence:
            
             <list type="bullet"><item><description><see cref="P:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.State" /> is set</description></item><item><description><see cref="M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.TransformAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary)" /></description></item><item><description><see cref="M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.FilterAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})" /></description></item></list>
            
             Implementations that are registered with the service collection as transient may safely use class
             members to persist state across these operations.
             </para>
      <para>
             Implementations <see cref="T:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer" /> should be registered with the service
             collection as type <see cref="T:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer" />. Implementations can use any service
             lifetime. Implementations that make use of <see cref="P:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.State" /> must be registered as transient.
             </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DynamicRouteValueTransformer();" />
      <MemberSignature Language="C#" Value="protected DynamicRouteValueTransformer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask&lt;System::Collections::Generic::IReadOnlyList&lt;Microsoft::AspNetCore::Http::Endpoint ^&gt; ^&gt; FilterAsync(Microsoft::AspNetCore::Http::HttpContext ^ httpContext, Microsoft::AspNetCore::Routing::RouteValueDictionary ^ values, System::Collections::Generic::IReadOnlyList&lt;Microsoft::AspNetCore::Http::Endpoint ^&gt; ^ endpoints);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt;&gt; FilterAsync (Microsoft.AspNetCore.Http.HttpContext httpContext, Microsoft.AspNetCore.Routing.RouteValueDictionary values, System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; endpoints);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.AspNetCore.Http.Endpoint&gt;&gt; FilterAsync(class Microsoft.AspNetCore.Http.HttpContext httpContext, class Microsoft.AspNetCore.Routing.RouteValueDictionary values, class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.AspNetCore.Http.Endpoint&gt; endpoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.FilterAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FilterAsync (httpContext As HttpContext, values As RouteValueDictionary, endpoints As IReadOnlyList(Of Endpoint)) As ValueTask(Of IReadOnlyList(Of Endpoint))" />
      <MemberSignature Language="F#" Value="abstract member FilterAsync : Microsoft.AspNetCore.Http.HttpContext * Microsoft.AspNetCore.Routing.RouteValueDictionary * System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; -&gt; System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt;&gt;&#xA;override this.FilterAsync : Microsoft.AspNetCore.Http.HttpContext * Microsoft.AspNetCore.Routing.RouteValueDictionary * System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; -&gt; System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt;&gt;" Usage="dynamicRouteValueTransformer.FilterAsync (httpContext, values, endpoints)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-8.0;aspnetcore-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" Index="0" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0;aspnetcore-9.0" />
        <Parameter Name="values" Type="Microsoft.AspNetCore.Routing.RouteValueDictionary" Index="1" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0;aspnetcore-9.0" />
        <Parameter Name="endpoints" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt;" Index="2" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0;aspnetcore-9.0" />
      </Parameters>
      <Docs>
        <param name="httpContext">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> associated with the current request.</param>
        <param name="values">The route values returned from <see cref="M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.TransformAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary)" />.</param>
        <param name="endpoints">
            The endpoints that were chosen as a result of lookup based on the route values returned by
            <see cref="M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.TransformAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary)" />.
            </param>
        <summary>
            Filters the set of endpoints that were chosen as a result of lookup based on the route values returned by
            <see cref="M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.TransformAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary)" />.
            </summary>
        <returns>Asynchronously returns a list of endpoints to apply to the matches collection.</returns>
        <remarks>
          <para>
            Implementations of <see cref="M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.FilterAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})" /> may further
            refine the list of endpoints chosen based on route value matching by returning a new list of endpoints based on
            <paramref name="endpoints" />.
            </para>
          <para>
            <see cref="M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.FilterAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})" /> will not be called in the case
            where zero endpoints were matched based on route values.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ State { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="C#" Value="public object State { get; set; }" FrameworkAlternate="aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.State" />
      <MemberSignature Language="VB.NET" Value="Public Property State As Object" />
      <MemberSignature Language="F#" Value="member this.State : obj with get, set" Usage="Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.State" />
      <MemberSignature Language="C#" Value="public object? State { get; set; }" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0;aspnetcore-9.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a state value. An arbitrary value passed to the transformer from where it was registered.
            </summary>
        <value>To be added.</value>
        <remarks>
            Implementations that make use of <see cref="P:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.State" /> must be registered as transient with the service
            collection.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Threading::Tasks::ValueTask&lt;Microsoft::AspNetCore::Routing::RouteValueDictionary ^&gt; TransformAsync(Microsoft::AspNetCore::Http::HttpContext ^ httpContext, Microsoft::AspNetCore::Routing::RouteValueDictionary ^ values);" />
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.ValueTask&lt;Microsoft.AspNetCore.Routing.RouteValueDictionary&gt; TransformAsync (Microsoft.AspNetCore.Http.HttpContext httpContext, Microsoft.AspNetCore.Routing.RouteValueDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;class Microsoft.AspNetCore.Routing.RouteValueDictionary&gt; TransformAsync(class Microsoft.AspNetCore.Http.HttpContext httpContext, class Microsoft.AspNetCore.Routing.RouteValueDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Mvc.Routing.DynamicRouteValueTransformer.TransformAsync(Microsoft.AspNetCore.Http.HttpContext,Microsoft.AspNetCore.Routing.RouteValueDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TransformAsync (httpContext As HttpContext, values As RouteValueDictionary) As ValueTask(Of RouteValueDictionary)" />
      <MemberSignature Language="F#" Value="abstract member TransformAsync : Microsoft.AspNetCore.Http.HttpContext * Microsoft.AspNetCore.Routing.RouteValueDictionary -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.AspNetCore.Routing.RouteValueDictionary&gt;" Usage="dynamicRouteValueTransformer.TransformAsync (httpContext, values)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Mvc.Core</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-8.0;aspnetcore-9.0">
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Microsoft.AspNetCore.Routing.RouteValueDictionary&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" />
        <Parameter Name="values" Type="Microsoft.AspNetCore.Routing.RouteValueDictionary" />
      </Parameters>
      <Docs>
        <param name="httpContext">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> associated with the current request.</param>
        <param name="values">The route values associated with the current match. Implementations should not modify <paramref name="values" />.</param>
        <summary>
            Creates a set of transformed route values that will be used to select an action.
            </summary>
        <returns>Returns a set of new route values, else null to indicate there was no match.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
