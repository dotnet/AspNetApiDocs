<?xml version="1.0" encoding="utf-8"?>
<Framework Name="yarp-1.0">
  <Assemblies>
    <Assembly Name="Yarp.ReverseProxy" Version="1.0.1.0" />
    <Assembly Name="Yarp.Telemetry.Consumption" Version="1.0.1.0" />
  </Assemblies>
  <Namespace Name="Microsoft.AspNetCore.Builder">
    <Type Name="Microsoft.AspNetCore.Builder.AppBuilderHealthExtensions" Id="T:Microsoft.AspNetCore.Builder.AppBuilderHealthExtensions">
      <Member Id="M:Microsoft.AspNetCore.Builder.AppBuilderHealthExtensions.UsePassiveHealthChecks(Microsoft.AspNetCore.Builder.IReverseProxyApplicationBuilder)" />
    </Type>
    <Type Name="Microsoft.AspNetCore.Builder.AppBuilderLoadBalancingExtensions" Id="T:Microsoft.AspNetCore.Builder.AppBuilderLoadBalancingExtensions">
      <Member Id="M:Microsoft.AspNetCore.Builder.AppBuilderLoadBalancingExtensions.UseLoadBalancing(Microsoft.AspNetCore.Builder.IReverseProxyApplicationBuilder)" />
    </Type>
    <Type Name="Microsoft.AspNetCore.Builder.AppBuilderSessionAffinityExtensions" Id="T:Microsoft.AspNetCore.Builder.AppBuilderSessionAffinityExtensions">
      <Member Id="M:Microsoft.AspNetCore.Builder.AppBuilderSessionAffinityExtensions.UseSessionAffinity(Microsoft.AspNetCore.Builder.IReverseProxyApplicationBuilder)" />
    </Type>
    <Type Name="Microsoft.AspNetCore.Builder.IReverseProxyApplicationBuilder" Id="T:Microsoft.AspNetCore.Builder.IReverseProxyApplicationBuilder" />
    <Type Name="Microsoft.AspNetCore.Builder.ReverseProxyConventionBuilder" Id="T:Microsoft.AspNetCore.Builder.ReverseProxyConventionBuilder">
      <Member Id="M:Microsoft.AspNetCore.Builder.ReverseProxyConventionBuilder.Add(System.Action{Microsoft.AspNetCore.Builder.EndpointBuilder})" />
      <Member Id="M:Microsoft.AspNetCore.Builder.ReverseProxyConventionBuilder.ConfigureEndpoints(System.Action{Microsoft.AspNetCore.Builder.IEndpointConventionBuilder,Yarp.ReverseProxy.Configuration.RouteConfig,Yarp.ReverseProxy.Configuration.ClusterConfig})" />
      <Member Id="M:Microsoft.AspNetCore.Builder.ReverseProxyConventionBuilder.ConfigureEndpoints(System.Action{Microsoft.AspNetCore.Builder.IEndpointConventionBuilder,Yarp.ReverseProxy.Configuration.RouteConfig})" />
      <Member Id="M:Microsoft.AspNetCore.Builder.ReverseProxyConventionBuilder.ConfigureEndpoints(System.Action{Microsoft.AspNetCore.Builder.IEndpointConventionBuilder})" />
    </Type>
    <Type Name="Microsoft.AspNetCore.Builder.ReverseProxyIEndpointRouteBuilderExtensions" Id="T:Microsoft.AspNetCore.Builder.ReverseProxyIEndpointRouteBuilderExtensions">
      <Member Id="M:Microsoft.AspNetCore.Builder.ReverseProxyIEndpointRouteBuilderExtensions.MapReverseProxy(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder)" />
      <Member Id="M:Microsoft.AspNetCore.Builder.ReverseProxyIEndpointRouteBuilderExtensions.MapReverseProxy(Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.Action{Microsoft.AspNetCore.Builder.IReverseProxyApplicationBuilder})" />
    </Type>
    <Type Name="Microsoft.AspNetCore.Builder.WebSocketsTelemetryExtensions" Id="T:Microsoft.AspNetCore.Builder.WebSocketsTelemetryExtensions">
      <Member Id="M:Microsoft.AspNetCore.Builder.WebSocketsTelemetryExtensions.UseWebSocketsTelemetry(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
    </Type>
  </Namespace>
  <Namespace Name="Microsoft.AspNetCore.Http">
    <Type Name="Microsoft.AspNetCore.Http.HttpContextFeaturesExtensions" Id="T:Microsoft.AspNetCore.Http.HttpContextFeaturesExtensions">
      <Member Id="M:Microsoft.AspNetCore.Http.HttpContextFeaturesExtensions.GetForwarderErrorFeature(Microsoft.AspNetCore.Http.HttpContext)" />
      <Member Id="M:Microsoft.AspNetCore.Http.HttpContextFeaturesExtensions.GetReverseProxyFeature(Microsoft.AspNetCore.Http.HttpContext)" />
      <Member Id="M:Microsoft.AspNetCore.Http.HttpContextFeaturesExtensions.GetRouteModel(Microsoft.AspNetCore.Http.HttpContext)" />
    </Type>
  </Namespace>
  <Namespace Name="Microsoft.Extensions.DependencyInjection">
    <Type Name="Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder" Id="T:Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder">
      <Member Id="P:Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder.Services" />
    </Type>
    <Type Name="Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions" Id="T:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions">
      <Member Id="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddConfigFilter``1(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder)" />
      <Member Id="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddHttpForwarder(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <Member Id="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddReverseProxy(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <Member Id="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransformFactory``1(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder)" />
      <Member Id="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransforms(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder,System.Action{Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext})" />
      <Member Id="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransforms``1(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder)" />
      <Member Id="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder,System.Action{Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext,System.Net.Http.SocketsHttpHandler})" />
      <Member Id="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.LoadFromConfig(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder,Microsoft.Extensions.Configuration.IConfiguration)" />
    </Type>
    <Type Name="Microsoft.Extensions.DependencyInjection.TelemetryConsumptionExtensions" Id="T:Microsoft.Extensions.DependencyInjection.TelemetryConsumptionExtensions">
      <Member Id="M:Microsoft.Extensions.DependencyInjection.TelemetryConsumptionExtensions.AddTelemetryConsumer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Object)" />
      <Member Id="M:Microsoft.Extensions.DependencyInjection.TelemetryConsumptionExtensions.AddTelemetryConsumer``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <Member Id="M:Microsoft.Extensions.DependencyInjection.TelemetryConsumptionExtensions.AddTelemetryListeners(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
    </Type>
  </Namespace>
  <Namespace Name="Yarp.ReverseProxy.Configuration">
    <Type Name="Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig" Id="T:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig">
      <Member Id="M:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.Equals(Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.op_Equality(Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig,Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.op_Inequality(Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig,Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.Enabled" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.Interval" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.Path" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.Policy" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.ActiveHealthCheckConfig.Timeout" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.ClusterConfig" Id="T:Yarp.ReverseProxy.Configuration.ClusterConfig">
      <Member Id="M:Yarp.ReverseProxy.Configuration.ClusterConfig.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ClusterConfig.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ClusterConfig.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ClusterConfig.Equals(Yarp.ReverseProxy.Configuration.ClusterConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ClusterConfig.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ClusterConfig.op_Equality(Yarp.ReverseProxy.Configuration.ClusterConfig,Yarp.ReverseProxy.Configuration.ClusterConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ClusterConfig.op_Inequality(Yarp.ReverseProxy.Configuration.ClusterConfig,Yarp.ReverseProxy.Configuration.ClusterConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.ClusterConfig.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.ClusterConfig.ClusterId" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.ClusterConfig.Destinations" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.ClusterConfig.HealthCheck" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.ClusterConfig.HttpClient" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.ClusterConfig.HttpRequest" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.ClusterConfig.LoadBalancingPolicy" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.ClusterConfig.Metadata" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.ClusterConfig.SessionAffinity" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.DestinationConfig" Id="T:Yarp.ReverseProxy.Configuration.DestinationConfig">
      <Member Id="M:Yarp.ReverseProxy.Configuration.DestinationConfig.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.DestinationConfig.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.DestinationConfig.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.DestinationConfig.Equals(Yarp.ReverseProxy.Configuration.DestinationConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.DestinationConfig.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.DestinationConfig.op_Equality(Yarp.ReverseProxy.Configuration.DestinationConfig,Yarp.ReverseProxy.Configuration.DestinationConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.DestinationConfig.op_Inequality(Yarp.ReverseProxy.Configuration.DestinationConfig,Yarp.ReverseProxy.Configuration.DestinationConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.DestinationConfig.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.DestinationConfig.Address" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.DestinationConfig.Health" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.DestinationConfig.Metadata" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.HeaderMatchMode" Id="T:Yarp.ReverseProxy.Configuration.HeaderMatchMode">
      <Member Id="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.Contains" />
      <Member Id="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.ExactHeader" />
      <Member Id="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.Exists" />
      <Member Id="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.HeaderPrefix" />
      <Member Id="F:Yarp.ReverseProxy.Configuration.HeaderMatchMode.NotContains" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.HealthCheckConfig" Id="T:Yarp.ReverseProxy.Configuration.HealthCheckConfig">
      <Member Id="M:Yarp.ReverseProxy.Configuration.HealthCheckConfig.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HealthCheckConfig.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HealthCheckConfig.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HealthCheckConfig.Equals(Yarp.ReverseProxy.Configuration.HealthCheckConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HealthCheckConfig.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HealthCheckConfig.op_Equality(Yarp.ReverseProxy.Configuration.HealthCheckConfig,Yarp.ReverseProxy.Configuration.HealthCheckConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HealthCheckConfig.op_Inequality(Yarp.ReverseProxy.Configuration.HealthCheckConfig,Yarp.ReverseProxy.Configuration.HealthCheckConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HealthCheckConfig.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.HealthCheckConfig.Active" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.HealthCheckConfig.AvailableDestinationsPolicy" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.HealthCheckConfig.Passive" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.HttpClientConfig" Id="T:Yarp.ReverseProxy.Configuration.HttpClientConfig">
      <Member Id="F:Yarp.ReverseProxy.Configuration.HttpClientConfig.Empty" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HttpClientConfig.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HttpClientConfig.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HttpClientConfig.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HttpClientConfig.Equals(Yarp.ReverseProxy.Configuration.HttpClientConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HttpClientConfig.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HttpClientConfig.op_Equality(Yarp.ReverseProxy.Configuration.HttpClientConfig,Yarp.ReverseProxy.Configuration.HttpClientConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HttpClientConfig.op_Inequality(Yarp.ReverseProxy.Configuration.HttpClientConfig,Yarp.ReverseProxy.Configuration.HttpClientConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.HttpClientConfig.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.HttpClientConfig.DangerousAcceptAnyServerCertificate" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.HttpClientConfig.EnableMultipleHttp2Connections" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.HttpClientConfig.MaxConnectionsPerServer" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.HttpClientConfig.RequestHeaderEncoding" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.HttpClientConfig.SslProtocols" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.HttpClientConfig.WebProxy" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.IConfigValidator" Id="T:Yarp.ReverseProxy.Configuration.IConfigValidator">
      <Member Id="M:Yarp.ReverseProxy.Configuration.IConfigValidator.ValidateClusterAsync(Yarp.ReverseProxy.Configuration.ClusterConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.IConfigValidator.ValidateRouteAsync(Yarp.ReverseProxy.Configuration.RouteConfig)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.IProxyConfig" Id="T:Yarp.ReverseProxy.Configuration.IProxyConfig">
      <Member Id="P:Yarp.ReverseProxy.Configuration.IProxyConfig.ChangeToken" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.IProxyConfig.Clusters" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.IProxyConfig.Routes" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.IProxyConfigFilter" Id="T:Yarp.ReverseProxy.Configuration.IProxyConfigFilter">
      <Member Id="M:Yarp.ReverseProxy.Configuration.IProxyConfigFilter.ConfigureClusterAsync(Yarp.ReverseProxy.Configuration.ClusterConfig,System.Threading.CancellationToken)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.IProxyConfigFilter.ConfigureRouteAsync(Yarp.ReverseProxy.Configuration.RouteConfig,Yarp.ReverseProxy.Configuration.ClusterConfig,System.Threading.CancellationToken)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.IProxyConfigProvider" Id="T:Yarp.ReverseProxy.Configuration.IProxyConfigProvider">
      <Member Id="M:Yarp.ReverseProxy.Configuration.IProxyConfigProvider.GetConfig" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig" Id="T:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig">
      <Member Id="M:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.Equals(Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.op_Equality(Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig,Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.op_Inequality(Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig,Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.Enabled" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.Policy" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.PassiveHealthCheckConfig.ReactivationPeriod" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.QueryParameterMatchMode" Id="T:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode">
      <Member Id="F:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode.Contains" />
      <Member Id="F:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode.Exact" />
      <Member Id="F:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode.Exists" />
      <Member Id="F:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode.NotContains" />
      <Member Id="F:Yarp.ReverseProxy.Configuration.QueryParameterMatchMode.Prefix" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.RouteConfig" Id="T:Yarp.ReverseProxy.Configuration.RouteConfig">
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteConfig.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteConfig.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteConfig.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteConfig.Equals(Yarp.ReverseProxy.Configuration.RouteConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteConfig.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteConfig.op_Equality(Yarp.ReverseProxy.Configuration.RouteConfig,Yarp.ReverseProxy.Configuration.RouteConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteConfig.op_Inequality(Yarp.ReverseProxy.Configuration.RouteConfig,Yarp.ReverseProxy.Configuration.RouteConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteConfig.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteConfig.AuthorizationPolicy" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteConfig.ClusterId" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteConfig.CorsPolicy" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteConfig.Match" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteConfig.Metadata" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteConfig.Order" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteConfig.RouteId" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteConfig.Transforms" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.RouteHeader" Id="T:Yarp.ReverseProxy.Configuration.RouteHeader">
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteHeader.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteHeader.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteHeader.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteHeader.Equals(Yarp.ReverseProxy.Configuration.RouteHeader)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteHeader.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteHeader.op_Equality(Yarp.ReverseProxy.Configuration.RouteHeader,Yarp.ReverseProxy.Configuration.RouteHeader)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteHeader.op_Inequality(Yarp.ReverseProxy.Configuration.RouteHeader,Yarp.ReverseProxy.Configuration.RouteHeader)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteHeader.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteHeader.IsCaseSensitive" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteHeader.Mode" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteHeader.Name" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteHeader.Values" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.RouteMatch" Id="T:Yarp.ReverseProxy.Configuration.RouteMatch">
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteMatch.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteMatch.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteMatch.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteMatch.Equals(Yarp.ReverseProxy.Configuration.RouteMatch)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteMatch.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteMatch.op_Equality(Yarp.ReverseProxy.Configuration.RouteMatch,Yarp.ReverseProxy.Configuration.RouteMatch)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteMatch.op_Inequality(Yarp.ReverseProxy.Configuration.RouteMatch,Yarp.ReverseProxy.Configuration.RouteMatch)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteMatch.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteMatch.Headers" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteMatch.Hosts" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteMatch.Methods" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteMatch.Path" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteMatch.QueryParameters" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.RouteQueryParameter" Id="T:Yarp.ReverseProxy.Configuration.RouteQueryParameter">
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteQueryParameter.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteQueryParameter.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteQueryParameter.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteQueryParameter.Equals(Yarp.ReverseProxy.Configuration.RouteQueryParameter)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteQueryParameter.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteQueryParameter.op_Equality(Yarp.ReverseProxy.Configuration.RouteQueryParameter,Yarp.ReverseProxy.Configuration.RouteQueryParameter)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteQueryParameter.op_Inequality(Yarp.ReverseProxy.Configuration.RouteQueryParameter,Yarp.ReverseProxy.Configuration.RouteQueryParameter)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.RouteQueryParameter.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteQueryParameter.IsCaseSensitive" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteQueryParameter.Mode" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteQueryParameter.Name" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.RouteQueryParameter.Values" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.SessionAffinityConfig" Id="T:Yarp.ReverseProxy.Configuration.SessionAffinityConfig">
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.Equals(Yarp.ReverseProxy.Configuration.SessionAffinityConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.op_Equality(Yarp.ReverseProxy.Configuration.SessionAffinityConfig,Yarp.ReverseProxy.Configuration.SessionAffinityConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.op_Inequality(Yarp.ReverseProxy.Configuration.SessionAffinityConfig,Yarp.ReverseProxy.Configuration.SessionAffinityConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.AffinityKeyName" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.Cookie" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.Enabled" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.FailurePolicy" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.SessionAffinityConfig.Policy" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig" Id="T:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig">
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.Equals(Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.op_Equality(Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig,Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.op_Inequality(Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig,Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.Domain" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.Expiration" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.HttpOnly" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.IsEssential" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.MaxAge" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.Path" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.SameSite" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.SessionAffinityCookieConfig.SecurePolicy" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Configuration.WebProxyConfig" Id="T:Yarp.ReverseProxy.Configuration.WebProxyConfig">
      <Member Id="M:Yarp.ReverseProxy.Configuration.WebProxyConfig.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.WebProxyConfig.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.WebProxyConfig.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.WebProxyConfig.Equals(Yarp.ReverseProxy.Configuration.WebProxyConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.WebProxyConfig.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.WebProxyConfig.op_Equality(Yarp.ReverseProxy.Configuration.WebProxyConfig,Yarp.ReverseProxy.Configuration.WebProxyConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.WebProxyConfig.op_Inequality(Yarp.ReverseProxy.Configuration.WebProxyConfig,Yarp.ReverseProxy.Configuration.WebProxyConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Configuration.WebProxyConfig.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.WebProxyConfig.Address" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.WebProxyConfig.BypassOnLocal" />
      <Member Id="P:Yarp.ReverseProxy.Configuration.WebProxyConfig.UseDefaultCredentials" />
    </Type>
  </Namespace>
  <Namespace Name="Yarp.ReverseProxy.Forwarder">
    <Type Name="Yarp.ReverseProxy.Forwarder.ForwarderError" Id="T:Yarp.ReverseProxy.Forwarder.ForwarderError">
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.NoAvailableDestinations" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.None" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.Request" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.RequestBodyCanceled" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.RequestBodyClient" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.RequestBodyDestination" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.RequestCanceled" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.RequestTimedOut" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.ResponseBodyCanceled" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.ResponseBodyClient" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.ResponseBodyDestination" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.ResponseHeaders" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.UpgradeRequestCanceled" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.UpgradeRequestClient" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.UpgradeRequestDestination" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.UpgradeResponseCanceled" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.UpgradeResponseClient" />
      <Member Id="F:Yarp.ReverseProxy.Forwarder.ForwarderError.UpgradeResponseDestination" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext" Id="T:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext">
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.#ctor" />
      <Member Id="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.ClusterId" />
      <Member Id="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.NewConfig" />
      <Member Id="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.NewMetadata" />
      <Member Id="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.OldClient" />
      <Member Id="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.OldConfig" />
      <Member Id="P:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext.OldMetadata" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory" Id="T:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory">
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory.#ctor(Microsoft.Extensions.Logging.ILogger{Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory})" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory.CanReuseOldClient(Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext)" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory.ConfigureHandler(Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext,System.Net.Http.SocketsHttpHandler)" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory.CreateClient(Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext)" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderHttpClientFactory.WrapHandler(Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext,System.Net.Http.HttpMessageHandler)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig" Id="T:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig">
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.&lt;Clone&gt;$" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.Equals(System.Object)" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.Equals(Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.GetHashCode" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.op_Equality(Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.op_Inequality(Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.ActivityTimeout" />
      <Member Id="P:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.AllowResponseBuffering" />
      <Member Id="P:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.Empty" />
      <Member Id="P:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.Version" />
      <Member Id="P:Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig.VersionPolicy" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Forwarder.HttpTransformer" Id="T:Yarp.ReverseProxy.Forwarder.HttpTransformer">
      <Member Id="F:Yarp.ReverseProxy.Forwarder.HttpTransformer.Default" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformRequestAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpRequestMessage,System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformResponseAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpResponseMessage)" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformResponseTrailersAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpResponseMessage)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Forwarder.IForwarderErrorFeature" Id="T:Yarp.ReverseProxy.Forwarder.IForwarderErrorFeature">
      <Member Id="P:Yarp.ReverseProxy.Forwarder.IForwarderErrorFeature.Error" />
      <Member Id="P:Yarp.ReverseProxy.Forwarder.IForwarderErrorFeature.Exception" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Forwarder.IForwarderHttpClientFactory" Id="T:Yarp.ReverseProxy.Forwarder.IForwarderHttpClientFactory">
      <Member Id="M:Yarp.ReverseProxy.Forwarder.IForwarderHttpClientFactory.CreateClient(Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Forwarder.IHttpForwarder" Id="T:Yarp.ReverseProxy.Forwarder.IHttpForwarder">
      <Member Id="M:Yarp.ReverseProxy.Forwarder.IHttpForwarder.SendAsync(Microsoft.AspNetCore.Http.HttpContext,System.String,System.Net.Http.HttpMessageInvoker,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig,Yarp.ReverseProxy.Forwarder.HttpTransformer)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Forwarder.IHttpForwarderExtensions" Id="T:Yarp.ReverseProxy.Forwarder.IHttpForwarderExtensions">
      <Member Id="M:Yarp.ReverseProxy.Forwarder.IHttpForwarderExtensions.SendAsync(Yarp.ReverseProxy.Forwarder.IHttpForwarder,Microsoft.AspNetCore.Http.HttpContext,System.String,System.Net.Http.HttpMessageInvoker)" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.IHttpForwarderExtensions.SendAsync(Yarp.ReverseProxy.Forwarder.IHttpForwarder,Microsoft.AspNetCore.Http.HttpContext,System.String,System.Net.Http.HttpMessageInvoker,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpRequestMessage,System.Threading.Tasks.ValueTask})" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.IHttpForwarderExtensions.SendAsync(Yarp.ReverseProxy.Forwarder.IHttpForwarder,Microsoft.AspNetCore.Http.HttpContext,System.String,System.Net.Http.HttpMessageInvoker,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Forwarder.IHttpForwarderExtensions.SendAsync(Yarp.ReverseProxy.Forwarder.IHttpForwarder,Microsoft.AspNetCore.Http.HttpContext,System.String,System.Net.Http.HttpMessageInvoker,Yarp.ReverseProxy.Forwarder.ForwarderRequestConfig,System.Func{Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpRequestMessage,System.Threading.Tasks.ValueTask})" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Forwarder.RequestUtilities" Id="T:Yarp.ReverseProxy.Forwarder.RequestUtilities">
      <Member Id="M:Yarp.ReverseProxy.Forwarder.RequestUtilities.MakeDestinationAddress(System.String,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString)" />
    </Type>
  </Namespace>
  <Namespace Name="Yarp.ReverseProxy.Health">
    <Type Name="Yarp.ReverseProxy.Health.ActiveHealthCheckMonitorOptions" Id="T:Yarp.ReverseProxy.Health.ActiveHealthCheckMonitorOptions">
      <Member Id="M:Yarp.ReverseProxy.Health.ActiveHealthCheckMonitorOptions.#ctor" />
      <Member Id="P:Yarp.ReverseProxy.Health.ActiveHealthCheckMonitorOptions.DefaultInterval" />
      <Member Id="P:Yarp.ReverseProxy.Health.ActiveHealthCheckMonitorOptions.DefaultTimeout" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.ConsecutiveFailuresHealthPolicyOptions" Id="T:Yarp.ReverseProxy.Health.ConsecutiveFailuresHealthPolicyOptions">
      <Member Id="F:Yarp.ReverseProxy.Health.ConsecutiveFailuresHealthPolicyOptions.ThresholdMetadataName" />
      <Member Id="M:Yarp.ReverseProxy.Health.ConsecutiveFailuresHealthPolicyOptions.#ctor" />
      <Member Id="P:Yarp.ReverseProxy.Health.ConsecutiveFailuresHealthPolicyOptions.DefaultThreshold" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.DestinationProbingResult" Id="T:Yarp.ReverseProxy.Health.DestinationProbingResult">
      <Member Id="M:Yarp.ReverseProxy.Health.DestinationProbingResult.#ctor(Yarp.ReverseProxy.Model.DestinationState,System.Net.Http.HttpResponseMessage,System.Exception)" />
      <Member Id="P:Yarp.ReverseProxy.Health.DestinationProbingResult.Destination" />
      <Member Id="P:Yarp.ReverseProxy.Health.DestinationProbingResult.Exception" />
      <Member Id="P:Yarp.ReverseProxy.Health.DestinationProbingResult.Response" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.HealthCheckConstants" Id="T:Yarp.ReverseProxy.Health.HealthCheckConstants" />
    <Type Name="Yarp.ReverseProxy.Health.HealthCheckConstants/ActivePolicy" Id="T:Yarp.ReverseProxy.Health.HealthCheckConstants.ActivePolicy">
      <Member Id="F:Yarp.ReverseProxy.Health.HealthCheckConstants.ActivePolicy.ConsecutiveFailures" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.HealthCheckConstants/AvailableDestinations" Id="T:Yarp.ReverseProxy.Health.HealthCheckConstants.AvailableDestinations">
      <Member Id="F:Yarp.ReverseProxy.Health.HealthCheckConstants.AvailableDestinations.HealthyAndUnknown" />
      <Member Id="F:Yarp.ReverseProxy.Health.HealthCheckConstants.AvailableDestinations.HealthyOrPanic" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.HealthCheckConstants/PassivePolicy" Id="T:Yarp.ReverseProxy.Health.HealthCheckConstants.PassivePolicy">
      <Member Id="F:Yarp.ReverseProxy.Health.HealthCheckConstants.PassivePolicy.TransportFailureRate" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.IActiveHealthCheckMonitor" Id="T:Yarp.ReverseProxy.Health.IActiveHealthCheckMonitor">
      <Member Id="M:Yarp.ReverseProxy.Health.IActiveHealthCheckMonitor.CheckHealthAsync(System.Collections.Generic.IEnumerable{Yarp.ReverseProxy.Model.ClusterState})" />
      <Member Id="P:Yarp.ReverseProxy.Health.IActiveHealthCheckMonitor.InitialProbeCompleted" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.IActiveHealthCheckPolicy" Id="T:Yarp.ReverseProxy.Health.IActiveHealthCheckPolicy">
      <Member Id="M:Yarp.ReverseProxy.Health.IActiveHealthCheckPolicy.ProbingCompleted(Yarp.ReverseProxy.Model.ClusterState,System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Health.DestinationProbingResult})" />
      <Member Id="P:Yarp.ReverseProxy.Health.IActiveHealthCheckPolicy.Name" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.IAvailableDestinationsPolicy" Id="T:Yarp.ReverseProxy.Health.IAvailableDestinationsPolicy">
      <Member Id="M:Yarp.ReverseProxy.Health.IAvailableDestinationsPolicy.GetAvailalableDestinations(Yarp.ReverseProxy.Configuration.ClusterConfig,System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Model.DestinationState})" />
      <Member Id="P:Yarp.ReverseProxy.Health.IAvailableDestinationsPolicy.Name" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.IClusterDestinationsUpdater" Id="T:Yarp.ReverseProxy.Health.IClusterDestinationsUpdater">
      <Member Id="M:Yarp.ReverseProxy.Health.IClusterDestinationsUpdater.UpdateAllDestinations(Yarp.ReverseProxy.Model.ClusterState)" />
      <Member Id="M:Yarp.ReverseProxy.Health.IClusterDestinationsUpdater.UpdateAvailableDestinations(Yarp.ReverseProxy.Model.ClusterState)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.IDestinationHealthUpdater" Id="T:Yarp.ReverseProxy.Health.IDestinationHealthUpdater">
      <Member Id="M:Yarp.ReverseProxy.Health.IDestinationHealthUpdater.SetActive(Yarp.ReverseProxy.Model.ClusterState,System.Collections.Generic.IEnumerable{Yarp.ReverseProxy.Health.NewActiveDestinationHealth})" />
      <Member Id="M:Yarp.ReverseProxy.Health.IDestinationHealthUpdater.SetPassive(Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Model.DestinationState,Yarp.ReverseProxy.Model.DestinationHealth,System.TimeSpan)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.IPassiveHealthCheckPolicy" Id="T:Yarp.ReverseProxy.Health.IPassiveHealthCheckPolicy">
      <Member Id="M:Yarp.ReverseProxy.Health.IPassiveHealthCheckPolicy.RequestProxied(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Model.DestinationState)" />
      <Member Id="P:Yarp.ReverseProxy.Health.IPassiveHealthCheckPolicy.Name" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.IProbingRequestFactory" Id="T:Yarp.ReverseProxy.Health.IProbingRequestFactory">
      <Member Id="M:Yarp.ReverseProxy.Health.IProbingRequestFactory.CreateRequest(Yarp.ReverseProxy.Model.ClusterModel,Yarp.ReverseProxy.Model.DestinationModel)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.NewActiveDestinationHealth" Id="T:Yarp.ReverseProxy.Health.NewActiveDestinationHealth">
      <Member Id="M:Yarp.ReverseProxy.Health.NewActiveDestinationHealth.#ctor(Yarp.ReverseProxy.Model.DestinationState,Yarp.ReverseProxy.Model.DestinationHealth)" />
      <Member Id="P:Yarp.ReverseProxy.Health.NewActiveDestinationHealth.Destination" />
      <Member Id="P:Yarp.ReverseProxy.Health.NewActiveDestinationHealth.NewActiveHealth" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.PassiveHealthCheckMiddleware" Id="T:Yarp.ReverseProxy.Health.PassiveHealthCheckMiddleware">
      <Member Id="M:Yarp.ReverseProxy.Health.PassiveHealthCheckMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,System.Collections.Generic.IEnumerable{Yarp.ReverseProxy.Health.IPassiveHealthCheckPolicy})" />
      <Member Id="M:Yarp.ReverseProxy.Health.PassiveHealthCheckMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicyOptions" Id="T:Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicyOptions">
      <Member Id="F:Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicyOptions.FailureRateLimitMetadataName" />
      <Member Id="M:Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicyOptions.#ctor" />
      <Member Id="P:Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicyOptions.DefaultFailureRateLimit" />
      <Member Id="P:Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicyOptions.DetectionWindowSize" />
      <Member Id="P:Yarp.ReverseProxy.Health.TransportFailureRateHealthPolicyOptions.MinimalTotalCountThreshold" />
    </Type>
  </Namespace>
  <Namespace Name="Yarp.ReverseProxy.LoadBalancing">
    <Type Name="Yarp.ReverseProxy.LoadBalancing.ILoadBalancingPolicy" Id="T:Yarp.ReverseProxy.LoadBalancing.ILoadBalancingPolicy">
      <Member Id="M:Yarp.ReverseProxy.LoadBalancing.ILoadBalancingPolicy.PickDestination(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Model.DestinationState})" />
      <Member Id="P:Yarp.ReverseProxy.LoadBalancing.ILoadBalancingPolicy.Name" />
    </Type>
    <Type Name="Yarp.ReverseProxy.LoadBalancing.LoadBalancingPolicies" Id="T:Yarp.ReverseProxy.LoadBalancing.LoadBalancingPolicies">
      <Member Id="P:Yarp.ReverseProxy.LoadBalancing.LoadBalancingPolicies.FirstAlphabetical" />
      <Member Id="P:Yarp.ReverseProxy.LoadBalancing.LoadBalancingPolicies.LeastRequests" />
      <Member Id="P:Yarp.ReverseProxy.LoadBalancing.LoadBalancingPolicies.PowerOfTwoChoices" />
      <Member Id="P:Yarp.ReverseProxy.LoadBalancing.LoadBalancingPolicies.Random" />
      <Member Id="P:Yarp.ReverseProxy.LoadBalancing.LoadBalancingPolicies.RoundRobin" />
    </Type>
  </Namespace>
  <Namespace Name="Yarp.ReverseProxy.Model">
    <Type Name="Yarp.ReverseProxy.Model.ClusterDestinationsState" Id="T:Yarp.ReverseProxy.Model.ClusterDestinationsState">
      <Member Id="M:Yarp.ReverseProxy.Model.ClusterDestinationsState.#ctor(System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Model.DestinationState},System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Model.DestinationState})" />
      <Member Id="P:Yarp.ReverseProxy.Model.ClusterDestinationsState.AllDestinations" />
      <Member Id="P:Yarp.ReverseProxy.Model.ClusterDestinationsState.AvailableDestinations" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Model.ClusterModel" Id="T:Yarp.ReverseProxy.Model.ClusterModel">
      <Member Id="M:Yarp.ReverseProxy.Model.ClusterModel.#ctor(Yarp.ReverseProxy.Configuration.ClusterConfig,System.Net.Http.HttpMessageInvoker)" />
      <Member Id="P:Yarp.ReverseProxy.Model.ClusterModel.Config" />
      <Member Id="P:Yarp.ReverseProxy.Model.ClusterModel.HttpClient" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Model.ClusterState" Id="T:Yarp.ReverseProxy.Model.ClusterState">
      <Member Id="M:Yarp.ReverseProxy.Model.ClusterState.#ctor(System.String)" />
      <Member Id="P:Yarp.ReverseProxy.Model.ClusterState.ClusterId" />
      <Member Id="P:Yarp.ReverseProxy.Model.ClusterState.Destinations" />
      <Member Id="P:Yarp.ReverseProxy.Model.ClusterState.DestinationsState" />
      <Member Id="P:Yarp.ReverseProxy.Model.ClusterState.Model" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Model.DestinationHealth" Id="T:Yarp.ReverseProxy.Model.DestinationHealth">
      <Member Id="F:Yarp.ReverseProxy.Model.DestinationHealth.Healthy" />
      <Member Id="F:Yarp.ReverseProxy.Model.DestinationHealth.Unhealthy" />
      <Member Id="F:Yarp.ReverseProxy.Model.DestinationHealth.Unknown" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Model.DestinationHealthState" Id="T:Yarp.ReverseProxy.Model.DestinationHealthState">
      <Member Id="M:Yarp.ReverseProxy.Model.DestinationHealthState.#ctor" />
      <Member Id="P:Yarp.ReverseProxy.Model.DestinationHealthState.Active" />
      <Member Id="P:Yarp.ReverseProxy.Model.DestinationHealthState.Passive" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Model.DestinationModel" Id="T:Yarp.ReverseProxy.Model.DestinationModel">
      <Member Id="M:Yarp.ReverseProxy.Model.DestinationModel.#ctor(Yarp.ReverseProxy.Configuration.DestinationConfig)" />
      <Member Id="P:Yarp.ReverseProxy.Model.DestinationModel.Config" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Model.DestinationState" Id="T:Yarp.ReverseProxy.Model.DestinationState">
      <Member Id="M:Yarp.ReverseProxy.Model.DestinationState.#ctor(System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Model.DestinationState.System#Collections#Generic#IEnumerable&lt;Yarp#ReverseProxy#Model#DestinationState&gt;#GetEnumerator" />
      <Member Id="M:Yarp.ReverseProxy.Model.DestinationState.System#Collections#IEnumerable#GetEnumerator" />
      <Member Id="P:Yarp.ReverseProxy.Model.DestinationState.ConcurrentRequestCount" />
      <Member Id="P:Yarp.ReverseProxy.Model.DestinationState.DestinationId" />
      <Member Id="P:Yarp.ReverseProxy.Model.DestinationState.Health" />
      <Member Id="P:Yarp.ReverseProxy.Model.DestinationState.Model" />
      <Member Id="P:Yarp.ReverseProxy.Model.DestinationState.System#Collections#Generic#IReadOnlyCollection&lt;Yarp#ReverseProxy#Model#DestinationState&gt;#Count" />
      <Member Id="P:Yarp.ReverseProxy.Model.DestinationState.System#Collections#Generic#IReadOnlyList&lt;Yarp#ReverseProxy#Model#DestinationState&gt;#Item(System.Int32)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Model.IClusterChangeListener" Id="T:Yarp.ReverseProxy.Model.IClusterChangeListener">
      <Member Id="M:Yarp.ReverseProxy.Model.IClusterChangeListener.OnClusterAdded(Yarp.ReverseProxy.Model.ClusterState)" />
      <Member Id="M:Yarp.ReverseProxy.Model.IClusterChangeListener.OnClusterChanged(Yarp.ReverseProxy.Model.ClusterState)" />
      <Member Id="M:Yarp.ReverseProxy.Model.IClusterChangeListener.OnClusterRemoved(Yarp.ReverseProxy.Model.ClusterState)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Model.IReverseProxyFeature" Id="T:Yarp.ReverseProxy.Model.IReverseProxyFeature">
      <Member Id="P:Yarp.ReverseProxy.Model.IReverseProxyFeature.AllDestinations" />
      <Member Id="P:Yarp.ReverseProxy.Model.IReverseProxyFeature.AvailableDestinations" />
      <Member Id="P:Yarp.ReverseProxy.Model.IReverseProxyFeature.Cluster" />
      <Member Id="P:Yarp.ReverseProxy.Model.IReverseProxyFeature.ProxiedDestination" />
      <Member Id="P:Yarp.ReverseProxy.Model.IReverseProxyFeature.Route" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Model.ReverseProxyApplicationBuilder" Id="T:Yarp.ReverseProxy.Model.ReverseProxyApplicationBuilder">
      <Member Id="M:Yarp.ReverseProxy.Model.ReverseProxyApplicationBuilder.#ctor(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      <Member Id="M:Yarp.ReverseProxy.Model.ReverseProxyApplicationBuilder.Build" />
      <Member Id="M:Yarp.ReverseProxy.Model.ReverseProxyApplicationBuilder.New" />
      <Member Id="M:Yarp.ReverseProxy.Model.ReverseProxyApplicationBuilder.Use(System.Func{Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.AspNetCore.Http.RequestDelegate})" />
      <Member Id="P:Yarp.ReverseProxy.Model.ReverseProxyApplicationBuilder.ApplicationServices" />
      <Member Id="P:Yarp.ReverseProxy.Model.ReverseProxyApplicationBuilder.Properties" />
      <Member Id="P:Yarp.ReverseProxy.Model.ReverseProxyApplicationBuilder.ServerFeatures" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Model.ReverseProxyFeature" Id="T:Yarp.ReverseProxy.Model.ReverseProxyFeature">
      <Member Id="M:Yarp.ReverseProxy.Model.ReverseProxyFeature.#ctor" />
      <Member Id="P:Yarp.ReverseProxy.Model.ReverseProxyFeature.AllDestinations" />
      <Member Id="P:Yarp.ReverseProxy.Model.ReverseProxyFeature.AvailableDestinations" />
      <Member Id="P:Yarp.ReverseProxy.Model.ReverseProxyFeature.Cluster" />
      <Member Id="P:Yarp.ReverseProxy.Model.ReverseProxyFeature.ProxiedDestination" />
      <Member Id="P:Yarp.ReverseProxy.Model.ReverseProxyFeature.Route" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Model.RouteModel" Id="T:Yarp.ReverseProxy.Model.RouteModel">
      <Member Id="M:Yarp.ReverseProxy.Model.RouteModel.#ctor(Yarp.ReverseProxy.Configuration.RouteConfig,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Forwarder.HttpTransformer)" />
      <Member Id="P:Yarp.ReverseProxy.Model.RouteModel.Cluster" />
      <Member Id="P:Yarp.ReverseProxy.Model.RouteModel.Config" />
      <Member Id="P:Yarp.ReverseProxy.Model.RouteModel.Transformer" />
    </Type>
  </Namespace>
  <Namespace Name="Yarp.ReverseProxy.SessionAffinity">
    <Type Name="Yarp.ReverseProxy.SessionAffinity.AffinityResult" Id="T:Yarp.ReverseProxy.SessionAffinity.AffinityResult">
      <Member Id="M:Yarp.ReverseProxy.SessionAffinity.AffinityResult.#ctor(System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Model.DestinationState},Yarp.ReverseProxy.SessionAffinity.AffinityStatus)" />
      <Member Id="P:Yarp.ReverseProxy.SessionAffinity.AffinityResult.Destinations" />
      <Member Id="P:Yarp.ReverseProxy.SessionAffinity.AffinityResult.Status" />
    </Type>
    <Type Name="Yarp.ReverseProxy.SessionAffinity.AffinityStatus" Id="T:Yarp.ReverseProxy.SessionAffinity.AffinityStatus">
      <Member Id="F:Yarp.ReverseProxy.SessionAffinity.AffinityStatus.AffinityKeyExtractionFailed" />
      <Member Id="F:Yarp.ReverseProxy.SessionAffinity.AffinityStatus.AffinityKeyNotSet" />
      <Member Id="F:Yarp.ReverseProxy.SessionAffinity.AffinityStatus.DestinationNotFound" />
      <Member Id="F:Yarp.ReverseProxy.SessionAffinity.AffinityStatus.OK" />
    </Type>
    <Type Name="Yarp.ReverseProxy.SessionAffinity.IAffinityFailurePolicy" Id="T:Yarp.ReverseProxy.SessionAffinity.IAffinityFailurePolicy">
      <Member Id="M:Yarp.ReverseProxy.SessionAffinity.IAffinityFailurePolicy.Handle(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.SessionAffinity.AffinityStatus)" />
      <Member Id="P:Yarp.ReverseProxy.SessionAffinity.IAffinityFailurePolicy.Name" />
    </Type>
    <Type Name="Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy" Id="T:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy">
      <Member Id="M:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.AffinitizeResponse(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Configuration.SessionAffinityConfig,Yarp.ReverseProxy.Model.DestinationState)" />
      <Member Id="M:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.FindAffinitizedDestinations(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Configuration.SessionAffinityConfig,System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Model.DestinationState})" />
      <Member Id="P:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.Name" />
    </Type>
    <Type Name="Yarp.ReverseProxy.SessionAffinity.SessionAffinityConstants" Id="T:Yarp.ReverseProxy.SessionAffinity.SessionAffinityConstants" />
    <Type Name="Yarp.ReverseProxy.SessionAffinity.SessionAffinityConstants/FailurePolicies" Id="T:Yarp.ReverseProxy.SessionAffinity.SessionAffinityConstants.FailurePolicies">
      <Member Id="P:Yarp.ReverseProxy.SessionAffinity.SessionAffinityConstants.FailurePolicies.Redistribute" />
      <Member Id="P:Yarp.ReverseProxy.SessionAffinity.SessionAffinityConstants.FailurePolicies.Return503Error" />
    </Type>
    <Type Name="Yarp.ReverseProxy.SessionAffinity.SessionAffinityConstants/Policies" Id="T:Yarp.ReverseProxy.SessionAffinity.SessionAffinityConstants.Policies">
      <Member Id="P:Yarp.ReverseProxy.SessionAffinity.SessionAffinityConstants.Policies.Cookie" />
      <Member Id="P:Yarp.ReverseProxy.SessionAffinity.SessionAffinityConstants.Policies.CustomHeader" />
    </Type>
  </Namespace>
  <Namespace Name="Yarp.ReverseProxy.Transforms.Builder">
    <Type Name="Yarp.ReverseProxy.Transforms.Builder.ITransformBuilder" Id="T:Yarp.ReverseProxy.Transforms.Builder.ITransformBuilder">
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.ITransformBuilder.Build(Yarp.ReverseProxy.Configuration.RouteConfig,Yarp.ReverseProxy.Configuration.ClusterConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.ITransformBuilder.Create(System.Action{Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext})" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.ITransformBuilder.ValidateCluster(Yarp.ReverseProxy.Configuration.ClusterConfig)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.ITransformBuilder.ValidateRoute(Yarp.ReverseProxy.Configuration.RouteConfig)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.Builder.ITransformFactory" Id="T:Yarp.ReverseProxy.Transforms.Builder.ITransformFactory">
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.ITransformFactory.Build(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.ITransformFactory.Validate(Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.Builder.ITransformProvider" Id="T:Yarp.ReverseProxy.Transforms.Builder.ITransformProvider">
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.ITransformProvider.Apply(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.ITransformProvider.ValidateCluster(Yarp.ReverseProxy.Transforms.Builder.TransformClusterValidationContext)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.ITransformProvider.ValidateRoute(Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" Id="T:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext">
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.#ctor" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.Cluster" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.CopyRequestHeaders" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.CopyResponseHeaders" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.CopyResponseTrailers" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.RequestTransforms" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.ResponseTrailersTransforms" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.ResponseTransforms" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.Route" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.Services" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext.UseDefaultForwarders" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.Builder.TransformClusterValidationContext" Id="T:Yarp.ReverseProxy.Transforms.Builder.TransformClusterValidationContext">
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.TransformClusterValidationContext.#ctor" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformClusterValidationContext.Cluster" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformClusterValidationContext.Errors" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformClusterValidationContext.Services" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.Builder.TransformHelpers" Id="T:Yarp.ReverseProxy.Transforms.Builder.TransformHelpers">
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.TransformHelpers.CheckTooManyParameters(System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Int32)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.TransformHelpers.TryCheckTooManyParameters(Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Int32)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext" Id="T:Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext">
      <Member Id="M:Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext.#ctor" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext.Errors" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext.Route" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext.Services" />
    </Type>
  </Namespace>
  <Namespace Name="Yarp.ReverseProxy.Transforms">
    <Type Name="Yarp.ReverseProxy.Transforms.ForwardedTransformActions" Id="T:Yarp.ReverseProxy.Transforms.ForwardedTransformActions">
      <Member Id="F:Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Append" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Off" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Remove" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions" Id="T:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddClientCertHeader(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddForwarded(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Boolean,System.Boolean,Yarp.ReverseProxy.Transforms.NodeFormat,Yarp.ReverseProxy.Transforms.NodeFormat,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwarded(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedFor(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedHost(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedPrefix(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedProto(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.WithTransformClientCertHeader(Yarp.ReverseProxy.Configuration.RouteConfig,System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.WithTransformForwarded(Yarp.ReverseProxy.Configuration.RouteConfig,System.Boolean,System.Boolean,Yarp.ReverseProxy.Transforms.NodeFormat,Yarp.ReverseProxy.Transforms.NodeFormat,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.WithTransformXForwarded(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions,System.Nullable{Yarp.ReverseProxy.Transforms.ForwardedTransformActions},System.Nullable{Yarp.ReverseProxy.Transforms.ForwardedTransformActions},System.Nullable{Yarp.ReverseProxy.Transforms.ForwardedTransformActions},System.Nullable{Yarp.ReverseProxy.Transforms.ForwardedTransformActions})" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.HttpMethodChangeTransform" Id="T:Yarp.ReverseProxy.Transforms.HttpMethodChangeTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.HttpMethodChangeTransform.#ctor(System.String,System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.HttpMethodChangeTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.HttpMethodTransformExtensions" Id="T:Yarp.ReverseProxy.Transforms.HttpMethodTransformExtensions">
      <Member Id="M:Yarp.ReverseProxy.Transforms.HttpMethodTransformExtensions.AddHttpMethodChange(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.HttpMethodTransformExtensions.WithTransformHttpMethodChange(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.NodeFormat" Id="T:Yarp.ReverseProxy.Transforms.NodeFormat">
      <Member Id="F:Yarp.ReverseProxy.Transforms.NodeFormat.Ip" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.NodeFormat.IpAndPort" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.NodeFormat.IpAndRandomPort" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.NodeFormat.None" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.NodeFormat.Random" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.NodeFormat.RandomAndPort" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.NodeFormat.RandomAndRandomPort" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.NodeFormat.Unknown" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.NodeFormat.UnknownAndPort" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.NodeFormat.UnknownAndRandomPort" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.PathRouteValuesTransform" Id="T:Yarp.ReverseProxy.Transforms.PathRouteValuesTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.PathRouteValuesTransform.#ctor(System.String,Microsoft.AspNetCore.Routing.Template.TemplateBinderFactory)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.PathRouteValuesTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.PathStringTransform" Id="T:Yarp.ReverseProxy.Transforms.PathStringTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.PathStringTransform.#ctor(Yarp.ReverseProxy.Transforms.PathStringTransform.PathTransformMode,Microsoft.AspNetCore.Http.PathString)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.PathStringTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.PathStringTransform/PathTransformMode" Id="T:Yarp.ReverseProxy.Transforms.PathStringTransform.PathTransformMode">
      <Member Id="F:Yarp.ReverseProxy.Transforms.PathStringTransform.PathTransformMode.Prefix" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.PathStringTransform.PathTransformMode.RemovePrefix" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.PathStringTransform.PathTransformMode.Set" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.PathTransformExtensions" Id="T:Yarp.ReverseProxy.Transforms.PathTransformExtensions">
      <Member Id="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.AddPathPrefix(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,Microsoft.AspNetCore.Http.PathString)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.AddPathRemovePrefix(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,Microsoft.AspNetCore.Http.PathString)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.AddPathRouteValues(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,Microsoft.AspNetCore.Http.PathString)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.AddPathSet(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,Microsoft.AspNetCore.Http.PathString)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.WithTransformPathPrefix(Yarp.ReverseProxy.Configuration.RouteConfig,Microsoft.AspNetCore.Http.PathString)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.WithTransformPathRemovePrefix(Yarp.ReverseProxy.Configuration.RouteConfig,Microsoft.AspNetCore.Http.PathString)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.WithTransformPathRouteValues(Yarp.ReverseProxy.Configuration.RouteConfig,Microsoft.AspNetCore.Http.PathString)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.PathTransformExtensions.WithTransformPathSet(Yarp.ReverseProxy.Configuration.RouteConfig,Microsoft.AspNetCore.Http.PathString)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.QueryParameterFromStaticTransform" Id="T:Yarp.ReverseProxy.Transforms.QueryParameterFromStaticTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryParameterFromStaticTransform.#ctor(Yarp.ReverseProxy.Transforms.QueryStringTransformMode,System.String,System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryParameterFromStaticTransform.GetValue(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.QueryParameterRemoveTransform" Id="T:Yarp.ReverseProxy.Transforms.QueryParameterRemoveTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryParameterRemoveTransform.#ctor(System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryParameterRemoveTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.QueryParameterRouteTransform" Id="T:Yarp.ReverseProxy.Transforms.QueryParameterRouteTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryParameterRouteTransform.#ctor(Yarp.ReverseProxy.Transforms.QueryStringTransformMode,System.String,System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryParameterRouteTransform.GetValue(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.QueryParameterTransform" Id="T:Yarp.ReverseProxy.Transforms.QueryParameterTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryParameterTransform.#ctor(Yarp.ReverseProxy.Transforms.QueryStringTransformMode,System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryParameterTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryParameterTransform.GetValue(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.QueryStringTransformMode" Id="T:Yarp.ReverseProxy.Transforms.QueryStringTransformMode">
      <Member Id="F:Yarp.ReverseProxy.Transforms.QueryStringTransformMode.Append" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.QueryStringTransformMode.Set" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.QueryTransformContext" Id="T:Yarp.ReverseProxy.Transforms.QueryTransformContext">
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryTransformContext.#ctor(Microsoft.AspNetCore.Http.HttpRequest)" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.QueryTransformContext.Collection" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.QueryTransformContext.QueryString" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.QueryTransformExtensions" Id="T:Yarp.ReverseProxy.Transforms.QueryTransformExtensions">
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryTransformExtensions.AddQueryRemoveKey(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryTransformExtensions.AddQueryRouteValue(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String,System.Boolean)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryTransformExtensions.AddQueryValue(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String,System.Boolean)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryTransformExtensions.WithTransformQueryRemoveKey(Yarp.ReverseProxy.Configuration.RouteConfig,System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryTransformExtensions.WithTransformQueryRouteValue(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String,System.Boolean)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.QueryTransformExtensions.WithTransformQueryValue(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String,System.Boolean)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestFuncTransform" Id="T:Yarp.ReverseProxy.Transforms.RequestFuncTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestFuncTransform.#ctor(System.Func{Yarp.ReverseProxy.Transforms.RequestTransformContext,System.Threading.Tasks.ValueTask})" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestFuncTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestHeaderClientCertTransform" Id="T:Yarp.ReverseProxy.Transforms.RequestHeaderClientCertTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderClientCertTransform.#ctor(System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderClientCertTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestHeaderForwardedTransform" Id="T:Yarp.ReverseProxy.Transforms.RequestHeaderForwardedTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderForwardedTransform.#ctor(Yarp.ReverseProxy.Utilities.IRandomFactory,Yarp.ReverseProxy.Transforms.NodeFormat,Yarp.ReverseProxy.Transforms.NodeFormat,System.Boolean,System.Boolean,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderForwardedTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestHeaderOriginalHostTransform" Id="T:Yarp.ReverseProxy.Transforms.RequestHeaderOriginalHostTransform">
      <Member Id="F:Yarp.ReverseProxy.Transforms.RequestHeaderOriginalHostTransform.OriginalHost" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.RequestHeaderOriginalHostTransform.SuppressHost" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderOriginalHostTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestHeaderRemoveTransform" Id="T:Yarp.ReverseProxy.Transforms.RequestHeaderRemoveTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderRemoveTransform.#ctor(System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderRemoveTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestHeadersAllowedTransform" Id="T:Yarp.ReverseProxy.Transforms.RequestHeadersAllowedTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeadersAllowedTransform.#ctor(System.String[])" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeadersAllowedTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions" Id="T:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddOriginalHost(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Boolean)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeader(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String,System.Boolean)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeaderRemove(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeadersAllowed(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String[])" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformCopyRequestHeaders(Yarp.ReverseProxy.Configuration.RouteConfig,System.Boolean)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeader(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String,System.Boolean)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeaderRemove(Yarp.ReverseProxy.Configuration.RouteConfig,System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeadersAllowed(Yarp.ReverseProxy.Configuration.RouteConfig,System.String[])" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformUseOriginalHostHeader(Yarp.ReverseProxy.Configuration.RouteConfig,System.Boolean)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestHeaderValueTransform" Id="T:Yarp.ReverseProxy.Transforms.RequestHeaderValueTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderValueTransform.#ctor(System.String,System.String,System.Boolean)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderValueTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedForTransform" Id="T:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedForTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedForTransform.#ctor(System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedForTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedHostTransform" Id="T:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedHostTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedHostTransform.#ctor(System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedHostTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedPrefixTransform" Id="T:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedPrefixTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedPrefixTransform.#ctor(System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedPrefixTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedProtoTransform" Id="T:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedProtoTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedProtoTransform.#ctor(System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestHeaderXForwardedProtoTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestTransform" Id="T:Yarp.ReverseProxy.Transforms.RequestTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestTransform.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestTransform.AddHeader(Yarp.ReverseProxy.Transforms.RequestTransformContext,System.String,Microsoft.Extensions.Primitives.StringValues)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.RequestTransformContext)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestTransform.RemoveHeader(Yarp.ReverseProxy.Transforms.RequestTransformContext,System.String)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestTransform.TakeHeader(Yarp.ReverseProxy.Transforms.RequestTransformContext,System.String)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RequestTransformContext" Id="T:Yarp.ReverseProxy.Transforms.RequestTransformContext">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RequestTransformContext.#ctor" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.DestinationPrefix" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.HeadersCopied" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.HttpContext" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.Path" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.ProxyRequest" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.RequestTransformContext.Query" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseCondition" Id="T:Yarp.ReverseProxy.Transforms.ResponseCondition">
      <Member Id="F:Yarp.ReverseProxy.Transforms.ResponseCondition.Always" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.ResponseCondition.Failure" />
      <Member Id="F:Yarp.ReverseProxy.Transforms.ResponseCondition.Success" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseFuncTransform" Id="T:Yarp.ReverseProxy.Transforms.ResponseFuncTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseFuncTransform.#ctor(System.Func{Yarp.ReverseProxy.Transforms.ResponseTransformContext,System.Threading.Tasks.ValueTask})" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseFuncTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseHeaderRemoveTransform" Id="T:Yarp.ReverseProxy.Transforms.ResponseHeaderRemoveTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseHeaderRemoveTransform.#ctor(System.String,Yarp.ReverseProxy.Transforms.ResponseCondition)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseHeaderRemoveTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseHeadersAllowedTransform" Id="T:Yarp.ReverseProxy.Transforms.ResponseHeadersAllowedTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseHeadersAllowedTransform.#ctor(System.String[])" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseHeadersAllowedTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseHeaderValueTransform" Id="T:Yarp.ReverseProxy.Transforms.ResponseHeaderValueTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseHeaderValueTransform.#ctor(System.String,System.String,System.Boolean,Yarp.ReverseProxy.Transforms.ResponseCondition)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseHeaderValueTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseTrailerRemoveTransform" Id="T:Yarp.ReverseProxy.Transforms.ResponseTrailerRemoveTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTrailerRemoveTransform.#ctor(System.String,Yarp.ReverseProxy.Transforms.ResponseCondition)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTrailerRemoveTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseTrailersAllowedTransform" Id="T:Yarp.ReverseProxy.Transforms.ResponseTrailersAllowedTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTrailersAllowedTransform.#ctor(System.String[])" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTrailersAllowedTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseTrailersFuncTransform" Id="T:Yarp.ReverseProxy.Transforms.ResponseTrailersFuncTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTrailersFuncTransform.#ctor(System.Func{Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext,System.Threading.Tasks.ValueTask})" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTrailersFuncTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseTrailersTransform" Id="T:Yarp.ReverseProxy.Transforms.ResponseTrailersTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTrailersTransform.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTrailersTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTrailersTransform.SetHeader(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext,System.String,Microsoft.Extensions.Primitives.StringValues)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTrailersTransform.TakeHeader(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext,System.String)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext" Id="T:Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext.#ctor" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext.HeadersCopied" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext.HttpContext" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext.ProxyResponse" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseTrailerValueTransform" Id="T:Yarp.ReverseProxy.Transforms.ResponseTrailerValueTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTrailerValueTransform.#ctor(System.String,System.String,System.Boolean,Yarp.ReverseProxy.Transforms.ResponseCondition)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTrailerValueTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseTransform" Id="T:Yarp.ReverseProxy.Transforms.ResponseTransform">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransform.#ctor" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransform.ApplyAsync(Yarp.ReverseProxy.Transforms.ResponseTransformContext)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransform.SetHeader(Yarp.ReverseProxy.Transforms.ResponseTransformContext,System.String,Microsoft.Extensions.Primitives.StringValues)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransform.TakeHeader(Yarp.ReverseProxy.Transforms.ResponseTransformContext,System.String)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseTransformContext" Id="T:Yarp.ReverseProxy.Transforms.ResponseTransformContext">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformContext.#ctor" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.ResponseTransformContext.HeadersCopied" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.ResponseTransformContext.HttpContext" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.ResponseTransformContext.ProxyResponse" />
      <Member Id="P:Yarp.ReverseProxy.Transforms.ResponseTransformContext.SuppressResponseBody" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.ResponseTransformExtensions" Id="T:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions">
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.AddResponseHeader(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String,System.Boolean,Yarp.ReverseProxy.Transforms.ResponseCondition)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.AddResponseHeaderRemove(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ResponseCondition)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.AddResponseHeadersAllowed(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String[])" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.AddResponseTrailer(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String,System.Boolean,Yarp.ReverseProxy.Transforms.ResponseCondition)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.AddResponseTrailerRemove(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ResponseCondition)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.AddResponseTrailersAllowed(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String[])" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformCopyResponseHeaders(Yarp.ReverseProxy.Configuration.RouteConfig,System.Boolean)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformCopyResponseTrailers(Yarp.ReverseProxy.Configuration.RouteConfig,System.Boolean)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformResponseHeader(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String,System.Boolean,Yarp.ReverseProxy.Transforms.ResponseCondition)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformResponseHeaderRemove(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,Yarp.ReverseProxy.Transforms.ResponseCondition)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformResponseHeadersAllowed(Yarp.ReverseProxy.Configuration.RouteConfig,System.String[])" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformResponseTrailer(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String,System.Boolean,Yarp.ReverseProxy.Transforms.ResponseCondition)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformResponseTrailerRemove(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,Yarp.ReverseProxy.Transforms.ResponseCondition)" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.ResponseTransformExtensions.WithTransformResponseTrailersAllowed(Yarp.ReverseProxy.Configuration.RouteConfig,System.String[])" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.RouteConfigTransformExtensions" Id="T:Yarp.ReverseProxy.Transforms.RouteConfigTransformExtensions">
      <Member Id="M:Yarp.ReverseProxy.Transforms.RouteConfigTransformExtensions.WithTransform(Yarp.ReverseProxy.Configuration.RouteConfig,System.Action{System.Collections.Generic.IDictionary{System.String,System.String}})" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Transforms.TransformBuilderContextFuncExtensions" Id="T:Yarp.ReverseProxy.Transforms.TransformBuilderContextFuncExtensions">
      <Member Id="M:Yarp.ReverseProxy.Transforms.TransformBuilderContextFuncExtensions.AddRequestTransform(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Func{Yarp.ReverseProxy.Transforms.RequestTransformContext,System.Threading.Tasks.ValueTask})" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.TransformBuilderContextFuncExtensions.AddResponseTrailersTransform(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Func{Yarp.ReverseProxy.Transforms.ResponseTrailersTransformContext,System.Threading.Tasks.ValueTask})" />
      <Member Id="M:Yarp.ReverseProxy.Transforms.TransformBuilderContextFuncExtensions.AddResponseTransform(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Func{Yarp.ReverseProxy.Transforms.ResponseTransformContext,System.Threading.Tasks.ValueTask})" />
    </Type>
  </Namespace>
  <Namespace Name="Yarp.ReverseProxy.Utilities">
    <Type Name="Yarp.ReverseProxy.Utilities.IClock" Id="T:Yarp.ReverseProxy.Utilities.IClock">
      <Member Id="M:Yarp.ReverseProxy.Utilities.IClock.Delay(System.Int32,System.Threading.CancellationToken)" />
      <Member Id="M:Yarp.ReverseProxy.Utilities.IClock.Delay(System.TimeSpan,System.Threading.CancellationToken)" />
      <Member Id="M:Yarp.ReverseProxy.Utilities.IClock.GetStopwatchTime" />
      <Member Id="M:Yarp.ReverseProxy.Utilities.IClock.GetUtcNow" />
      <Member Id="P:Yarp.ReverseProxy.Utilities.IClock.TickCount" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Utilities.IRandomFactory" Id="T:Yarp.ReverseProxy.Utilities.IRandomFactory">
      <Member Id="M:Yarp.ReverseProxy.Utilities.IRandomFactory.CreateRandomInstance" />
    </Type>
  </Namespace>
  <Namespace Name="Yarp.ReverseProxy.Utilities.Tls">
    <Type Name="Yarp.ReverseProxy.Utilities.Tls.ExtensionType" Id="T:Yarp.ReverseProxy.Utilities.Tls.ExtensionType">
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.ExtensionType.ApplicationProtocols" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.ExtensionType.CertificateStatusRequest" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.ExtensionType.ClientCertificateUrl" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.ExtensionType.MaximumFagmentLength" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.ExtensionType.ServerName" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.ExtensionType.SupportedVersions" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.ExtensionType.TruncatedHmac" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.ExtensionType.TrustedCaKeys" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription" Id="T:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription">
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.AccessDenied" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.BadCertificate" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.BadRecordMac" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.CertificateExpired" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.CertificateRevoked" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.CertificateUnknown" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.CloseNotify" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.DecodeError" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.DecompressionFail" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.DecryptError" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.DecryptionFailed" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.ExportRestriction" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.HandshakeFailure" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.IllegalParameter" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.InsuffientSecurity" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.InternalError" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.NoRenegotiation" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.ProtocolVersion" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.RecordOverflow" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.UnexpectedMessage" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.UnknownCA" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.UnsupportedCert" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.UnsupportedExt" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription.UserCanceled" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Utilities.Tls.TlsAlertLevel" Id="T:Yarp.ReverseProxy.Utilities.Tls.TlsAlertLevel">
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertLevel.Fatal" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsAlertLevel.Warning" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Utilities.Tls.TlsContentType" Id="T:Yarp.ReverseProxy.Utilities.Tls.TlsContentType">
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsContentType.Alert" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsContentType.AppData" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsContentType.ChangeCipherSpec" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsContentType.Handshake" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Utilities.Tls.TlsFrameHeader" Id="T:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHeader">
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHeader.Length" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHeader.Type" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHeader.Version" />
      <Member Id="M:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHeader.ToString" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper" Id="T:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper">
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.HeaderSize" />
      <Member Id="M:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.CreateAlertFrame(System.Security.Authentication.SslProtocols,Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription)" />
      <Member Id="M:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.GetFrameSize(System.ReadOnlySpan{System.Byte})" />
      <Member Id="M:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.GetServerName(System.ReadOnlySpan{System.Byte})" />
      <Member Id="M:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.TryGetAlertInfo(System.ReadOnlySpan{System.Byte},Yarp.ReverseProxy.Utilities.Tls.TlsAlertLevel@,Yarp.ReverseProxy.Utilities.Tls.TlsAlertDescription@)" />
      <Member Id="M:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.TryGetFrameHeader(System.ReadOnlySpan{System.Byte},Yarp.ReverseProxy.Utilities.Tls.TlsFrameHeader@)" />
      <Member Id="M:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.TryGetFrameInfo(System.ReadOnlySpan{System.Byte},Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.TlsFrameInfo@,Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.ProcessingOptions,Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.HelloExtensionCallback)" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper/ApplicationProtocolInfo" Id="T:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.ApplicationProtocolInfo">
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.ApplicationProtocolInfo.Http11" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.ApplicationProtocolInfo.Http2" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.ApplicationProtocolInfo.None" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.ApplicationProtocolInfo.Other" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper/HelloExtensionCallback" Id="T:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.HelloExtensionCallback" />
    <Type Name="Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper/ProcessingOptions" Id="T:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.ProcessingOptions">
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.ProcessingOptions.All" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.ProcessingOptions.ApplicationProtocol" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.ProcessingOptions.CipherSuites" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.ProcessingOptions.ServerName" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.ProcessingOptions.Versions" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper/TlsFrameInfo" Id="T:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.TlsFrameInfo">
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.TlsFrameInfo.AlertDescription" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.TlsFrameInfo.ApplicationProtocols" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.TlsFrameInfo.HandshakeType" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.TlsFrameInfo.Header" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.TlsFrameInfo.SupportedVersions" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.TlsFrameInfo.TargetName" />
      <Member Id="M:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.TlsFrameInfo.ToString" />
      <Member Id="P:Yarp.ReverseProxy.Utilities.Tls.TlsFrameHelper.TlsFrameInfo.TlsCipherSuites" />
    </Type>
    <Type Name="Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType" Id="T:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType">
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.Certificate" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.CertificateRequest" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.CertificateVerify" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.ClientHello" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.ClientKeyExchange" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.EncryptedExtensions" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.EndOfEarlyData" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.Finished" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.HelloRequest" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.KeyEpdate" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.MessageHash" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.NewSessionTicket" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.ServerHello" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.ServerHelloDone" />
      <Member Id="F:Yarp.ReverseProxy.Utilities.Tls.TlsHandshakeType.ServerKeyExchange" />
    </Type>
  </Namespace>
  <Namespace Name="Yarp.Telemetry.Consumption">
    <Type Name="Yarp.Telemetry.Consumption.ForwarderMetrics" Id="T:Yarp.Telemetry.Consumption.ForwarderMetrics">
      <Member Id="M:Yarp.Telemetry.Consumption.ForwarderMetrics.#ctor" />
      <Member Id="P:Yarp.Telemetry.Consumption.ForwarderMetrics.CurrentRequests" />
      <Member Id="P:Yarp.Telemetry.Consumption.ForwarderMetrics.RequestsFailed" />
      <Member Id="P:Yarp.Telemetry.Consumption.ForwarderMetrics.RequestsStarted" />
      <Member Id="P:Yarp.Telemetry.Consumption.ForwarderMetrics.RequestsStartedRate" />
      <Member Id="P:Yarp.Telemetry.Consumption.ForwarderMetrics.Timestamp" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.ForwarderStage" Id="T:Yarp.Telemetry.Consumption.ForwarderStage">
      <Member Id="F:Yarp.Telemetry.Consumption.ForwarderStage.RequestContentTransferStart" />
      <Member Id="F:Yarp.Telemetry.Consumption.ForwarderStage.ResponseContentTransferStart" />
      <Member Id="F:Yarp.Telemetry.Consumption.ForwarderStage.ResponseUpgrade" />
      <Member Id="F:Yarp.Telemetry.Consumption.ForwarderStage.SendAsyncStart" />
      <Member Id="F:Yarp.Telemetry.Consumption.ForwarderStage.SendAsyncStop" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.HttpMetrics" Id="T:Yarp.Telemetry.Consumption.HttpMetrics">
      <Member Id="M:Yarp.Telemetry.Consumption.HttpMetrics.#ctor" />
      <Member Id="P:Yarp.Telemetry.Consumption.HttpMetrics.CurrentHttp11Connections" />
      <Member Id="P:Yarp.Telemetry.Consumption.HttpMetrics.CurrentHttp20Connections" />
      <Member Id="P:Yarp.Telemetry.Consumption.HttpMetrics.CurrentRequests" />
      <Member Id="P:Yarp.Telemetry.Consumption.HttpMetrics.Http11RequestsQueueDuration" />
      <Member Id="P:Yarp.Telemetry.Consumption.HttpMetrics.Http20RequestsQueueDuration" />
      <Member Id="P:Yarp.Telemetry.Consumption.HttpMetrics.RequestsFailed" />
      <Member Id="P:Yarp.Telemetry.Consumption.HttpMetrics.RequestsFailedRate" />
      <Member Id="P:Yarp.Telemetry.Consumption.HttpMetrics.RequestsStarted" />
      <Member Id="P:Yarp.Telemetry.Consumption.HttpMetrics.RequestsStartedRate" />
      <Member Id="P:Yarp.Telemetry.Consumption.HttpMetrics.Timestamp" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.IForwarderTelemetryConsumer" Id="T:Yarp.Telemetry.Consumption.IForwarderTelemetryConsumer">
      <Member Id="M:Yarp.Telemetry.Consumption.IForwarderTelemetryConsumer.OnContentTransferred(System.DateTime,System.Boolean,System.Int64,System.Int64,System.TimeSpan,System.TimeSpan,System.TimeSpan)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IForwarderTelemetryConsumer.OnContentTransferring(System.DateTime,System.Boolean,System.Int64,System.Int64,System.TimeSpan,System.TimeSpan)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IForwarderTelemetryConsumer.OnForwarderFailed(System.DateTime,Yarp.ReverseProxy.Forwarder.ForwarderError)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IForwarderTelemetryConsumer.OnForwarderInvoke(System.DateTime,System.String,System.String,System.String)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IForwarderTelemetryConsumer.OnForwarderStage(System.DateTime,Yarp.Telemetry.Consumption.ForwarderStage)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IForwarderTelemetryConsumer.OnForwarderStart(System.DateTime,System.String)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IForwarderTelemetryConsumer.OnForwarderStop(System.DateTime,System.Int32)" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.IHttpTelemetryConsumer" Id="T:Yarp.Telemetry.Consumption.IHttpTelemetryConsumer">
      <Member Id="M:Yarp.Telemetry.Consumption.IHttpTelemetryConsumer.OnConnectionEstablished(System.DateTime,System.Int32,System.Int32)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IHttpTelemetryConsumer.OnRequestContentStart(System.DateTime)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IHttpTelemetryConsumer.OnRequestContentStop(System.DateTime,System.Int64)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IHttpTelemetryConsumer.OnRequestFailed(System.DateTime)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IHttpTelemetryConsumer.OnRequestHeadersStart(System.DateTime)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IHttpTelemetryConsumer.OnRequestHeadersStop(System.DateTime)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IHttpTelemetryConsumer.OnRequestLeftQueue(System.DateTime,System.TimeSpan,System.Int32,System.Int32)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IHttpTelemetryConsumer.OnRequestStart(System.DateTime,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Net.Http.HttpVersionPolicy)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IHttpTelemetryConsumer.OnRequestStop(System.DateTime)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IHttpTelemetryConsumer.OnResponseHeadersStart(System.DateTime)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IHttpTelemetryConsumer.OnResponseHeadersStop(System.DateTime)" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.IKestrelTelemetryConsumer" Id="T:Yarp.Telemetry.Consumption.IKestrelTelemetryConsumer">
      <Member Id="M:Yarp.Telemetry.Consumption.IKestrelTelemetryConsumer.OnRequestStart(System.DateTime,System.String,System.String,System.String,System.String,System.String)" />
      <Member Id="M:Yarp.Telemetry.Consumption.IKestrelTelemetryConsumer.OnRequestStop(System.DateTime,System.String,System.String,System.String,System.String,System.String)" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.IMetricsConsumer`1" Id="T:Yarp.Telemetry.Consumption.IMetricsConsumer`1">
      <Member Id="M:Yarp.Telemetry.Consumption.IMetricsConsumer`1.OnMetrics(`0,`0)" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.INameResolutionTelemetryConsumer" Id="T:Yarp.Telemetry.Consumption.INameResolutionTelemetryConsumer">
      <Member Id="M:Yarp.Telemetry.Consumption.INameResolutionTelemetryConsumer.OnResolutionFailed(System.DateTime)" />
      <Member Id="M:Yarp.Telemetry.Consumption.INameResolutionTelemetryConsumer.OnResolutionStart(System.DateTime,System.String)" />
      <Member Id="M:Yarp.Telemetry.Consumption.INameResolutionTelemetryConsumer.OnResolutionStop(System.DateTime)" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.INetSecurityTelemetryConsumer" Id="T:Yarp.Telemetry.Consumption.INetSecurityTelemetryConsumer">
      <Member Id="M:Yarp.Telemetry.Consumption.INetSecurityTelemetryConsumer.OnHandshakeFailed(System.DateTime,System.Boolean,System.TimeSpan,System.String)" />
      <Member Id="M:Yarp.Telemetry.Consumption.INetSecurityTelemetryConsumer.OnHandshakeStart(System.DateTime,System.Boolean,System.String)" />
      <Member Id="M:Yarp.Telemetry.Consumption.INetSecurityTelemetryConsumer.OnHandshakeStop(System.DateTime,System.Security.Authentication.SslProtocols)" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.ISocketsTelemetryConsumer" Id="T:Yarp.Telemetry.Consumption.ISocketsTelemetryConsumer">
      <Member Id="M:Yarp.Telemetry.Consumption.ISocketsTelemetryConsumer.OnConnectFailed(System.DateTime,System.Net.Sockets.SocketError,System.String)" />
      <Member Id="M:Yarp.Telemetry.Consumption.ISocketsTelemetryConsumer.OnConnectStart(System.DateTime,System.String)" />
      <Member Id="M:Yarp.Telemetry.Consumption.ISocketsTelemetryConsumer.OnConnectStop(System.DateTime)" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.IWebSocketsTelemetryConsumer" Id="T:Yarp.Telemetry.Consumption.IWebSocketsTelemetryConsumer">
      <Member Id="M:Yarp.Telemetry.Consumption.IWebSocketsTelemetryConsumer.OnWebSocketClosed(System.DateTime,System.DateTime,Yarp.Telemetry.Consumption.WebSocketCloseReason,System.Int64,System.Int64)" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.KestrelMetrics" Id="T:Yarp.Telemetry.Consumption.KestrelMetrics">
      <Member Id="M:Yarp.Telemetry.Consumption.KestrelMetrics.#ctor" />
      <Member Id="P:Yarp.Telemetry.Consumption.KestrelMetrics.ConnectionQueueLength" />
      <Member Id="P:Yarp.Telemetry.Consumption.KestrelMetrics.ConnectionRate" />
      <Member Id="P:Yarp.Telemetry.Consumption.KestrelMetrics.CurrentConnections" />
      <Member Id="P:Yarp.Telemetry.Consumption.KestrelMetrics.CurrentTlsHandshakes" />
      <Member Id="P:Yarp.Telemetry.Consumption.KestrelMetrics.CurrentUpgradedRequests" />
      <Member Id="P:Yarp.Telemetry.Consumption.KestrelMetrics.FailedTlsHandshakes" />
      <Member Id="P:Yarp.Telemetry.Consumption.KestrelMetrics.RequestQueueLength" />
      <Member Id="P:Yarp.Telemetry.Consumption.KestrelMetrics.Timestamp" />
      <Member Id="P:Yarp.Telemetry.Consumption.KestrelMetrics.TlsHandshakeRate" />
      <Member Id="P:Yarp.Telemetry.Consumption.KestrelMetrics.TotalConnections" />
      <Member Id="P:Yarp.Telemetry.Consumption.KestrelMetrics.TotalTlsHandshakes" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.NameResolutionMetrics" Id="T:Yarp.Telemetry.Consumption.NameResolutionMetrics">
      <Member Id="M:Yarp.Telemetry.Consumption.NameResolutionMetrics.#ctor" />
      <Member Id="P:Yarp.Telemetry.Consumption.NameResolutionMetrics.AverageLookupDuration" />
      <Member Id="P:Yarp.Telemetry.Consumption.NameResolutionMetrics.CurrentDnsLookups" />
      <Member Id="P:Yarp.Telemetry.Consumption.NameResolutionMetrics.DnsLookupsRequested" />
      <Member Id="P:Yarp.Telemetry.Consumption.NameResolutionMetrics.Timestamp" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.NetSecurityMetrics" Id="T:Yarp.Telemetry.Consumption.NetSecurityMetrics">
      <Member Id="M:Yarp.Telemetry.Consumption.NetSecurityMetrics.#ctor" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.CurrentTlsHandshakes" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.FailedTlsHandshakes" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.Timestamp" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.Tls10HandshakeDuration" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.Tls10SessionsOpen" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.Tls11HandshakeDuration" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.Tls11SessionsOpen" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.Tls12HandshakeDuration" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.Tls12SessionsOpen" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.Tls13HandshakeDuration" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.Tls13SessionsOpen" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.TlsHandshakeDuration" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.TlsHandshakeRate" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.TlsSessionsOpen" />
      <Member Id="P:Yarp.Telemetry.Consumption.NetSecurityMetrics.TotalTlsHandshakes" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.SocketsMetrics" Id="T:Yarp.Telemetry.Consumption.SocketsMetrics">
      <Member Id="M:Yarp.Telemetry.Consumption.SocketsMetrics.#ctor" />
      <Member Id="P:Yarp.Telemetry.Consumption.SocketsMetrics.BytesReceived" />
      <Member Id="P:Yarp.Telemetry.Consumption.SocketsMetrics.BytesSent" />
      <Member Id="P:Yarp.Telemetry.Consumption.SocketsMetrics.DatagramsReceived" />
      <Member Id="P:Yarp.Telemetry.Consumption.SocketsMetrics.DatagramsSent" />
      <Member Id="P:Yarp.Telemetry.Consumption.SocketsMetrics.IncomingConnectionsEstablished" />
      <Member Id="P:Yarp.Telemetry.Consumption.SocketsMetrics.OutgoingConnectionsEstablished" />
      <Member Id="P:Yarp.Telemetry.Consumption.SocketsMetrics.Timestamp" />
    </Type>
    <Type Name="Yarp.Telemetry.Consumption.WebSocketCloseReason" Id="T:Yarp.Telemetry.Consumption.WebSocketCloseReason">
      <Member Id="F:Yarp.Telemetry.Consumption.WebSocketCloseReason.ClientDisconnect" />
      <Member Id="F:Yarp.Telemetry.Consumption.WebSocketCloseReason.ClientGracefulClose" />
      <Member Id="F:Yarp.Telemetry.Consumption.WebSocketCloseReason.ServerDisconnect" />
      <Member Id="F:Yarp.Telemetry.Consumption.WebSocketCloseReason.ServerGracefulClose" />
      <Member Id="F:Yarp.Telemetry.Consumption.WebSocketCloseReason.Unknown" />
    </Type>
  </Namespace>
</Framework>