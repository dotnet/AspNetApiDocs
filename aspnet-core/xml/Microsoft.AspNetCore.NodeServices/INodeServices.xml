<Type Name="INodeServices" FullName="Microsoft.AspNetCore.NodeServices.INodeServices">
  <TypeSignature Language="C++ CLI" Value="public interface class INodeServices : IDisposable" />
  <TypeSignature Language="C#" Value="public interface INodeServices : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INodeServices implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.NodeServices.INodeServices" />
  <TypeSignature Language="VB.NET" Value="Public Interface INodeServices&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type INodeServices = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.3.0</AssemblyVersion>
    <AssemblyVersion>3.1.12.0</AssemblyVersion>
    <AssemblyVersion>3.1.18.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
      <AttributeName Language="C#">[System.Obsolete("Use Microsoft.AspNetCore.SpaServices.Extensions")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("Use Microsoft.AspNetCore.SpaServices.Extensions")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Represents the ability to invoke code in a Node.js environment. Although the underlying Node.js instance
            might change over time (e.g., the process might be restarted), the <see cref="T:Microsoft.AspNetCore.NodeServices.INodeServices" /> instance
            will remain constant.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="InvokeAsync&lt;T&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Threading::Tasks::Task&lt;T&gt; ^ InvokeAsync(System::String ^ moduleName, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; InvokeAsync&lt;T&gt; (string moduleName, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; InvokeAsync&lt;T&gt;(string moduleName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.INodeServices.InvokeAsync``1(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of T) (moduleName As String, ParamArray args As Object()) As Task(Of T)" />
      <MemberSignature Language="F#" Value="abstract member InvokeAsync : string * obj[] -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="iNodeServices.InvokeAsync (moduleName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="moduleName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The JSON-serializable data type that the Node.js code will asynchronously return.</typeparam>
        <param name="moduleName">The path to the Node.js module (i.e., JavaScript file) relative to your project root whose default CommonJS export is the function to be invoked.</param>
        <param name="args">Any sequence of JSON-serializable arguments to be passed to the Node.js function.</param>
        <summary>
            Asynchronously invokes code in the Node.js instance.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the completion of the RPC call.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync&lt;T&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Threading::Tasks::Task&lt;T&gt; ^ InvokeAsync(System::Threading::CancellationToken cancellationToken, System::String ^ moduleName, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; InvokeAsync&lt;T&gt; (System.Threading.CancellationToken cancellationToken, string moduleName, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; InvokeAsync&lt;T&gt;(valuetype System.Threading.CancellationToken cancellationToken, string moduleName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.INodeServices.InvokeAsync``1(System.Threading.CancellationToken,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeAsync(Of T) (cancellationToken As CancellationToken, moduleName As String, ParamArray args As Object()) As Task(Of T)" />
      <MemberSignature Language="F#" Value="abstract member InvokeAsync : System.Threading.CancellationToken * string * obj[] -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="iNodeServices.InvokeAsync (cancellationToken, moduleName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="moduleName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The JSON-serializable data type that the Node.js code will asynchronously return.</typeparam>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the invocation.</param>
        <param name="moduleName">The path to the Node.js module (i.e., JavaScript file) relative to your project root whose default CommonJS export is the function to be invoked.</param>
        <param name="args">Any sequence of JSON-serializable arguments to be passed to the Node.js function.</param>
        <summary>
            Asynchronously invokes code in the Node.js instance.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the completion of the RPC call.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeExportAsync&lt;T&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Threading::Tasks::Task&lt;T&gt; ^ InvokeExportAsync(System::String ^ moduleName, System::String ^ exportedFunctionName, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; InvokeExportAsync&lt;T&gt; (string moduleName, string exportedFunctionName, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; InvokeExportAsync&lt;T&gt;(string moduleName, string exportedFunctionName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.INodeServices.InvokeExportAsync``1(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeExportAsync(Of T) (moduleName As String, exportedFunctionName As String, ParamArray args As Object()) As Task(Of T)" />
      <MemberSignature Language="F#" Value="abstract member InvokeExportAsync : string * string * obj[] -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="iNodeServices.InvokeExportAsync (moduleName, exportedFunctionName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="moduleName" Type="System.String" />
        <Parameter Name="exportedFunctionName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The JSON-serializable data type that the Node.js code will asynchronously return.</typeparam>
        <param name="moduleName">The path to the Node.js module (i.e., JavaScript file) relative to your project root that contains the code to be invoked.</param>
        <param name="exportedFunctionName">Specifies the CommonJS export to be invoked.</param>
        <param name="args">Any sequence of JSON-serializable arguments to be passed to the Node.js function.</param>
        <summary>
            Asynchronously invokes code in the Node.js instance.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the completion of the RPC call.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeExportAsync&lt;T&gt;">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Threading::Tasks::Task&lt;T&gt; ^ InvokeExportAsync(System::Threading::CancellationToken cancellationToken, System::String ^ moduleName, System::String ^ exportedFunctionName, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; InvokeExportAsync&lt;T&gt; (System.Threading.CancellationToken cancellationToken, string moduleName, string exportedFunctionName, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; InvokeExportAsync&lt;T&gt;(valuetype System.Threading.CancellationToken cancellationToken, string moduleName, string exportedFunctionName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.NodeServices.INodeServices.InvokeExportAsync``1(System.Threading.CancellationToken,System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeExportAsync(Of T) (cancellationToken As CancellationToken, moduleName As String, exportedFunctionName As String, ParamArray args As Object()) As Task(Of T)" />
      <MemberSignature Language="F#" Value="abstract member InvokeExportAsync : System.Threading.CancellationToken * string * string * obj[] -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="iNodeServices.InvokeExportAsync (cancellationToken, moduleName, exportedFunctionName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.NodeServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="moduleName" Type="System.String" />
        <Parameter Name="exportedFunctionName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The JSON-serializable data type that the Node.js code will asynchronously return.</typeparam>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that can be used to cancel the invocation.</param>
        <param name="moduleName">The path to the Node.js module (i.e., JavaScript file) relative to your project root that contains the code to be invoked.</param>
        <param name="exportedFunctionName">Specifies the CommonJS export to be invoked.</param>
        <param name="args">Any sequence of JSON-serializable arguments to be passed to the Node.js function.</param>
        <summary>
            Asynchronously invokes code in the Node.js instance.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the completion of the RPC call.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
