<Type Name="IClock" FullName="Yarp.ReverseProxy.Utilities.IClock">
  <TypeSignature Language="C#" Value="public interface IClock" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClock" FrameworkAlternate="yarp-1.0;yarp-1.1;yarp-2.0" />
  <TypeSignature Language="DocId" Value="T:Yarp.ReverseProxy.Utilities.IClock" />
  <TypeSignature Language="VB.NET" Value="Public Interface IClock" />
  <TypeSignature Language="F#" Value="type IClock = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IClock" FrameworkAlternate="yarp-2.1;yarp-2.2" />
  <AssemblyInfo>
    <AssemblyName>Yarp.ReverseProxy</AssemblyName>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.2.0</AssemblyVersion>
    <AssemblyVersion>2.0.1.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="yarp-2.1;yarp-2.2">
      <AttributeName Language="C#">[System.Obsolete("For testing only. Use TimeProvider instead.")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("For testing only. Use TimeProvider instead.")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Abstraction over monotonic time providers
            (Environment.TickCount64, Stopwatch.GetTimestamp, as opposed to DateTime).
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task Delay (int millisecondsDelay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Delay(int32 millisecondsDelay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Utilities.IClock.Delay(System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delay (millisecondsDelay As Integer, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member Delay : int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iClock.Delay (millisecondsDelay, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsDelay" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="millisecondsDelay">The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.</param>
        <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
        <summary>
            Creates a cancellable task that completes after a specified time interval.
            This is equivalent to <see cref="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)" />,
            and facilitates unit tests that use virtual time.
            </summary>
        <returns>A task that represents the time delay.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task Delay (TimeSpan delay, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task Delay(valuetype System.TimeSpan delay, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Utilities.IClock.Delay(System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delay (delay As TimeSpan, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member Delay : TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iClock.Delay (delay, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="delay">The time span to wait before completing the returned task, or TimeSpan.FromMilliseconds(-1) to wait indefinitely.</param>
        <param name="cancellationToken">A cancellation token to observe while waiting for the task to complete.</param>
        <summary>
            Creates a cancellable task that completes after a specified time interval.
            This is equivalent to <see cref="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)" />,
            and facilitates unit tests that use virtual time.
            </summary>
        <returns>A task that represents the time delay.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStopwatchTime">
      <MemberSignature Language="C#" Value="public TimeSpan GetStopwatchTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TimeSpan GetStopwatchTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Utilities.IClock.GetStopwatchTime" />
      <MemberSignature Language="VB.NET" Value="Public Function GetStopwatchTime () As TimeSpan" />
      <MemberSignature Language="F#" Value="abstract member GetStopwatchTime : unit -&gt; TimeSpan" Usage="iClock.GetStopwatchTime " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a precise time measurement using <see cref="T:System.Diagnostics.Stopwatch" /> as the time source.
            </summary>
        <returns>The time measurement.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUtcNow">
      <MemberSignature Language="C#" Value="public DateTimeOffset GetUtcNow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTimeOffset GetUtcNow() cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Utilities.IClock.GetUtcNow" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUtcNow () As DateTimeOffset" />
      <MemberSignature Language="F#" Value="abstract member GetUtcNow : unit -&gt; DateTimeOffset" Usage="iClock.GetUtcNow " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the current time in UTC as a <see cref="T:System.DateTimeOffset" />.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TickCount">
      <MemberSignature Language="C#" Value="public long TickCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 TickCount" />
      <MemberSignature Language="DocId" Value="P:Yarp.ReverseProxy.Utilities.IClock.TickCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TickCount As Long" />
      <MemberSignature Language="F#" Value="member this.TickCount : int64" Usage="Yarp.ReverseProxy.Utilities.IClock.TickCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that indicates the current tick count measured as milliseconds from an arbitrary reference time.
            The default implementation leverages <see cref="P:System.Environment.TickCount64" />.
            This is generally more efficient than <see cref="M:Yarp.ReverseProxy.Utilities.IClock.GetStopwatchTime" />, but provides less precision.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
