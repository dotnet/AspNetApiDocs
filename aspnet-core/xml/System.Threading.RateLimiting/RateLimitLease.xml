<Type Name="RateLimitLease" FullName="System.Threading.RateLimiting.RateLimitLease">
  <TypeSignature Language="C#" Value="public abstract class RateLimitLease : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit RateLimitLease extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Threading.RateLimiting.RateLimitLease" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class RateLimitLease&#xA;Implements IDisposable" />
  <TypeSignature Language="F#" Value="type RateLimitLease = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.RateLimiting</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Abstraction for leases returned by <see cref="T:System.Threading.RateLimiting.RateLimiter" /> implementations.
            A lease represents the success or failure to acquire a resource and contains potential metadata that is relevant to the acquisition operation.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected RateLimitLease ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RateLimiting.RateLimitLease.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.RateLimiting</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RateLimiting.RateLimitLease.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="rateLimitLease.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Threading.RateLimiting</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Dispose the lease. This may free up space on the limiter implementation the lease came from.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RateLimiting.RateLimitLease.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="rateLimitLease.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.RateLimiting</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing" />
        <summary>
            Dispose method for implementations to write.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllMetadata">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,object?&gt;&gt; GetAllMetadata ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; GetAllMetadata() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RateLimiting.RateLimitLease.GetAllMetadata" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAllMetadata () As IEnumerable(Of KeyValuePair(Of String, Object))" />
      <MemberSignature Language="F#" Value="abstract member GetAllMetadata : unit -&gt; seq&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt;&#xA;override this.GetAllMetadata : unit -&gt; seq&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt;" Usage="rateLimitLease.GetAllMetadata " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.RateLimiting</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a list of all the metadata that is available on the lease.
            </summary>
        <returns>List of key-value pairs of metadata name and metadata object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAcquired">
      <MemberSignature Language="C#" Value="public abstract bool IsAcquired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAcquired" />
      <MemberSignature Language="DocId" Value="P:System.Threading.RateLimiting.RateLimitLease.IsAcquired" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsAcquired As Boolean" />
      <MemberSignature Language="F#" Value="member this.IsAcquired : bool" Usage="System.Threading.RateLimiting.RateLimitLease.IsAcquired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.RateLimiting</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Represents whether lease acquisition was successful.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataNames">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;string&gt; MetadataNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; MetadataNames" />
      <MemberSignature Language="DocId" Value="P:System.Threading.RateLimiting.RateLimitLease.MetadataNames" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property MetadataNames As IEnumerable(Of String)" />
      <MemberSignature Language="F#" Value="member this.MetadataNames : seq&lt;string&gt;" Usage="System.Threading.RateLimiting.RateLimitLease.MetadataNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.RateLimiting</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a list of the metadata names that are available on the lease.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMetadata">
      <MemberSignature Language="C#" Value="public abstract bool TryGetMetadata (string metadataName, out object? metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetMetadata(string metadataName, [out] object&amp; metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RateLimiting.RateLimitLease.TryGetMetadata(System.String,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TryGetMetadata (metadataName As String, ByRef metadata As Object) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetMetadata : string * obj -&gt; bool" Usage="rateLimitLease.TryGetMetadata (metadataName, metadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.RateLimiting</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataName" Type="System.String" />
        <Parameter Name="metadata" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="metadataName">The name of the metadata. Some common ones can be found in <see cref="T:System.Threading.RateLimiting.MetadataName" />.</param>
        <param name="metadata">The metadata object if it exists.</param>
        <summary>
            Attempt to extract metadata for the lease.
            </summary>
        <returns>True if the metadata exists, otherwise false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMetadata&lt;T&gt;">
      <MemberSignature Language="C#" Value="public bool TryGetMetadata&lt;T&gt; (System.Threading.RateLimiting.MetadataName&lt;T&gt; metadataName, out T metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetMetadata&lt;T&gt;(class System.Threading.RateLimiting.MetadataName`1&lt;!!T&gt; metadataName, [out] !!T&amp; metadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RateLimiting.RateLimitLease.TryGetMetadata``1(System.Threading.RateLimiting.MetadataName{``0},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetMetadata(Of T) (metadataName As MetadataName(Of T), ByRef metadata As T) As Boolean" />
      <MemberSignature Language="F#" Value="member this.TryGetMetadata : System.Threading.RateLimiting.MetadataName&lt;'T&gt; * 'T -&gt; bool" Usage="rateLimitLease.TryGetMetadata (metadataName, metadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.RateLimiting</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="metadataName" Type="System.Threading.RateLimiting.MetadataName&lt;T&gt;" />
        <Parameter Name="metadata" Type="T" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.MaybeNull]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.MaybeNull&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">Type of the expected metadata.</typeparam>
        <param name="metadataName">The name of the strongly-typed metadata. Some common ones can be found in <see cref="T:System.Threading.RateLimiting.MetadataName" />.</param>
        <param name="metadata">The strongly-typed metadata object if it exists.</param>
        <summary>
            Attempt to extract a strongly-typed metadata for the lease.
            </summary>
        <returns>True if the metadata exists, otherwise false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
