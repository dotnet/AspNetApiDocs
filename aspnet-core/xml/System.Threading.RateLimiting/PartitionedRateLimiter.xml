<Type Name="PartitionedRateLimiter" FullName="System.Threading.RateLimiting.PartitionedRateLimiter">
  <TypeSignature Language="C#" Value="public static class PartitionedRateLimiter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit PartitionedRateLimiter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.RateLimiting.PartitionedRateLimiter" />
  <TypeSignature Language="VB.NET" Value="Public Class PartitionedRateLimiter" />
  <TypeSignature Language="F#" Value="type PartitionedRateLimiter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.RateLimiting</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="aspnetcore-8.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="aspnetcore-8.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Contains methods to assist with creating a <see cref="T:System.Threading.RateLimiting.PartitionedRateLimiter`1" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Create&lt;TResource,TPartitionKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.RateLimiting.PartitionedRateLimiter&lt;TResource&gt; Create&lt;TResource,TPartitionKey&gt; (Func&lt;TResource,System.Threading.RateLimiting.RateLimitPartition&lt;TPartitionKey&gt;&gt; partitioner, System.Collections.Generic.IEqualityComparer&lt;TPartitionKey&gt;? equalityComparer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RateLimiting.PartitionedRateLimiter`1&lt;!!TResource&gt; Create&lt;TResource, TPartitionKey&gt;(class System.Func`2&lt;!!TResource, valuetype System.Threading.RateLimiting.RateLimitPartition`1&lt;!!TPartitionKey&gt;&gt; partitioner, class System.Collections.Generic.IEqualityComparer`1&lt;!!TPartitionKey&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RateLimiting.PartitionedRateLimiter.Create``2(System.Func{``0,System.Threading.RateLimiting.RateLimitPartition{``1}},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TResource, TPartitionKey) (partitioner As Func(Of TResource, RateLimitPartition(Of TPartitionKey)), Optional equalityComparer As IEqualityComparer(Of TPartitionKey) = Nothing) As PartitionedRateLimiter(Of TResource)" />
      <MemberSignature Language="F#" Value="static member Create : Func&lt;'Resource, System.Threading.RateLimiting.RateLimitPartition&lt;'PartitionKey&gt;&gt; * System.Collections.Generic.IEqualityComparer&lt;'PartitionKey&gt; -&gt; System.Threading.RateLimiting.PartitionedRateLimiter&lt;'Resource&gt;" Usage="System.Threading.RateLimiting.PartitionedRateLimiter.Create (partitioner, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.RateLimiting</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.RateLimiting.PartitionedRateLimiter&lt;TResource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResource">
          <Attributes>
            <Attribute FrameworkAlternate="aspnetcore-8.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
        <TypeParameter Name="TPartitionKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="partitioner" Type="System.Func&lt;TResource,System.Threading.RateLimiting.RateLimitPartition&lt;TPartitionKey&gt;&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="aspnetcore-8.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 1, 0, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;TPartitionKey&gt;">
          <Attributes>
            <Attribute FrameworkAlternate="aspnetcore-8.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResource">The resource type that is being rate limited.</typeparam>
        <typeparam name="TPartitionKey">The type to distinguish partitions with.</typeparam>
        <param name="partitioner">Method called every time an Acquire or WaitAsync call is made to figure out what rate limiter to apply to the request.
            If the <see cref="P:System.Threading.RateLimiting.RateLimitPartition`1.PartitionKey" /> matches a cached entry then the rate limiter previously used for that key is used. Otherwise, the factory is called to get a new rate limiter.</param>
        <param name="equalityComparer">Optional <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to customize the comparison logic for <typeparamref name="TPartitionKey" />.</param>
        <summary>
            Method used to create a default implementation of <see cref="T:System.Threading.RateLimiting.PartitionedRateLimiter`1" />.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChained&lt;TResource&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.RateLimiting.PartitionedRateLimiter&lt;TResource&gt; CreateChained&lt;TResource&gt; (params System.Threading.RateLimiting.PartitionedRateLimiter&lt;TResource&gt;[] limiters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.RateLimiting.PartitionedRateLimiter`1&lt;!!TResource&gt; CreateChained&lt;TResource&gt;(class System.Threading.RateLimiting.PartitionedRateLimiter`1&lt;!!TResource&gt;[] limiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.RateLimiting.PartitionedRateLimiter.CreateChained``1(System.Threading.RateLimiting.PartitionedRateLimiter{``0}[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateChained(Of TResource) (ParamArray limiters As PartitionedRateLimiter(Of TResource)()) As PartitionedRateLimiter(Of TResource)" />
      <MemberSignature Language="F#" Value="static member CreateChained : System.Threading.RateLimiting.PartitionedRateLimiter&lt;'Resource&gt;[] -&gt; System.Threading.RateLimiting.PartitionedRateLimiter&lt;'Resource&gt;" Usage="System.Threading.RateLimiting.PartitionedRateLimiter.CreateChained limiters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.RateLimiting</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.RateLimiting.PartitionedRateLimiter&lt;TResource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResource">
          <Attributes>
            <Attribute FrameworkAlternate="aspnetcore-8.0">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="limiters" Type="System.Threading.RateLimiting.PartitionedRateLimiter&lt;TResource&gt;[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResource">The resource type that is being rate limited.</typeparam>
        <param name="limiters">The <see cref="T:System.Threading.RateLimiting.PartitionedRateLimiter`1" />s that will be called in order when acquiring resources.</param>
        <summary>
            Creates a single <see cref="T:System.Threading.RateLimiting.PartitionedRateLimiter`1" /> that wraps the passed in <see cref="T:System.Threading.RateLimiting.PartitionedRateLimiter`1" />s.
            </summary>
        <returns />
        <remarks>
          <para>
            Methods on the returned <see cref="T:System.Threading.RateLimiting.PartitionedRateLimiter`1" /> will iterate over the passed in <paramref name="limiters" /> in the order given.
            </para>
          <para>
            <see cref="M:System.Threading.RateLimiting.PartitionedRateLimiter`1.GetStatistics(`0)" /> will return the lowest value for <see cref="P:System.Threading.RateLimiting.RateLimiterStatistics.CurrentAvailablePermits" />,
            the inner-most limiter's <see cref="P:System.Threading.RateLimiting.RateLimiterStatistics.TotalSuccessfulLeases" />,
            and the aggregate values for the rest of the properties from the <paramref name="limiters" />.
            </para>
          <para>
            <see cref="T:System.Threading.RateLimiting.RateLimitLease" />s returned will aggregate metadata and for duplicates use the value of the first lease with the same metadata name.
            </para>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="limiters" /> is a null parameter.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="limiters" /> is an empty array.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
