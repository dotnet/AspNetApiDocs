<Type Name="HeaderParsingExtensions" FullName="Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions">
  <TypeSignature Language="C#" Value="public static class HeaderParsingExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit HeaderParsingExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module HeaderParsingExtensions" />
  <TypeSignature Language="F#" Value="type HeaderParsingExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.HeaderParsing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extensions exposing HeaderParsing feature.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddHeaderParsing">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddHeaderParsing (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddHeaderParsing(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions.AddHeaderParsing(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddHeaderParsing (services As IServiceCollection) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddHeaderParsing : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions.AddHeaderParsing services" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HeaderParsing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
      </Parameters>
      <Docs>
        <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
        <summary>
            Adds header parsing feature.
            </summary>
        <returns>The same <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> instance for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHeaderParsing">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddHeaderParsing (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfigurationSection section);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddHeaderParsing(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.Extensions.Configuration.IConfigurationSection section) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions.AddHeaderParsing(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationSection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddHeaderParsing (services As IServiceCollection, section As IConfigurationSection) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddHeaderParsing : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.Configuration.IConfigurationSection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions.AddHeaderParsing (services, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HeaderParsing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="section" Type="Microsoft.Extensions.Configuration.IConfigurationSection" />
      </Parameters>
      <Docs>
        <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
        <param name="section">A configuration section.</param>
        <summary>
            Adds header parsing feature.
            </summary>
        <returns>The same <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> instance for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHeaderParsing">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddHeaderParsing (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.HeaderParsing.HeaderParsingOptions&gt; configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddHeaderParsing(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.HeaderParsing.HeaderParsingOptions&gt; configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions.AddHeaderParsing(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.HeaderParsing.HeaderParsingOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddHeaderParsing (services As IServiceCollection, configuration As Action(Of HeaderParsingOptions)) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddHeaderParsing : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.AspNetCore.HeaderParsing.HeaderParsingOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions.AddHeaderParsing (services, configuration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HeaderParsing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="configuration" Type="System.Action&lt;Microsoft.AspNetCore.HeaderParsing.HeaderParsingOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add the services to.</param>
        <param name="configuration">A delegate to setup parsing for the header.</param>
        <summary>
            Adds header parsing feature.
            </summary>
        <returns>The same <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> instance for chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHeaderParsing">
      <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.HeaderParsing.HeaderParsingFeature GetHeaderParsing (this Microsoft.AspNetCore.Http.HttpRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.HeaderParsing.HeaderParsingFeature GetHeaderParsing(class Microsoft.AspNetCore.Http.HttpRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions.GetHeaderParsing(Microsoft.AspNetCore.Http.HttpRequest)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetHeaderParsing (request As HttpRequest) As HeaderParsingFeature" />
      <MemberSignature Language="F#" Value="static member GetHeaderParsing : Microsoft.AspNetCore.Http.HttpRequest -&gt; Microsoft.AspNetCore.HeaderParsing.HeaderParsingFeature" Usage="Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions.GetHeaderParsing request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HeaderParsing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.HeaderParsing.HeaderParsingFeature</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" RefType="this" />
      </Parameters>
      <Docs>
        <param name="request">The <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" /> instance.</param>
        <summary>
            Gets the header parsing feature to access parsed header values.
            </summary>
        <returns>The <see cref="T:Microsoft.AspNetCore.HeaderParsing.HeaderParsingFeature" /> to access parsed header values.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetHeaderValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetHeaderValue&lt;T&gt; (this Microsoft.AspNetCore.Http.HttpRequest request, Microsoft.AspNetCore.HeaderParsing.HeaderKey&lt;T&gt; header, out T? value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetHeaderValue&lt;T&gt;(class Microsoft.AspNetCore.Http.HttpRequest request, class Microsoft.AspNetCore.HeaderParsing.HeaderKey`1&lt;!!T&gt; header, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions.TryGetHeaderValue``1(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.HeaderParsing.HeaderKey{``0},``0@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryGetHeaderValue(Of T) (request As HttpRequest, header As HeaderKey(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryGetHeaderValue : Microsoft.AspNetCore.Http.HttpRequest * Microsoft.AspNetCore.HeaderParsing.HeaderKey&lt;'T&gt; * 'T -&gt; bool" Usage="Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions.TryGetHeaderValue (request, header, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HeaderParsing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" RefType="this" />
        <Parameter Name="header" Type="Microsoft.AspNetCore.HeaderParsing.HeaderKey&lt;T&gt;" />
        <Parameter Name="value" Type="T" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the header value.</typeparam>
        <param name="request">The <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" /> instance.</param>
        <param name="header">The header to parse.</param>
        <param name="value">A resulting value.</param>
        <summary>
            Tries to get a header value if it exists and can be parsed.
            </summary>
        <returns>
          <see langword="true" /> if the header value was successfully fetched parsed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetHeaderValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetHeaderValue&lt;T&gt; (this Microsoft.AspNetCore.Http.HttpRequest request, Microsoft.AspNetCore.HeaderParsing.HeaderKey&lt;T&gt; header, out T? value, out Microsoft.AspNetCore.HeaderParsing.ParsingResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetHeaderValue&lt;T&gt;(class Microsoft.AspNetCore.Http.HttpRequest request, class Microsoft.AspNetCore.HeaderParsing.HeaderKey`1&lt;!!T&gt; header, [out] !!T&amp; value, [out] valuetype Microsoft.AspNetCore.HeaderParsing.ParsingResult&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions.TryGetHeaderValue``1(Microsoft.AspNetCore.Http.HttpRequest,Microsoft.AspNetCore.HeaderParsing.HeaderKey{``0},``0@,Microsoft.AspNetCore.HeaderParsing.ParsingResult@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryGetHeaderValue(Of T) (request As HttpRequest, header As HeaderKey(Of T), ByRef value As T, ByRef result As ParsingResult) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryGetHeaderValue : Microsoft.AspNetCore.Http.HttpRequest * Microsoft.AspNetCore.HeaderParsing.HeaderKey&lt;'T&gt; * 'T * ParsingResult -&gt; bool" Usage="Microsoft.AspNetCore.HeaderParsing.HeaderParsingExtensions.TryGetHeaderValue (request, header, value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HeaderParsing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="request" Type="Microsoft.AspNetCore.Http.HttpRequest" RefType="this" />
        <Parameter Name="header" Type="Microsoft.AspNetCore.HeaderParsing.HeaderKey&lt;T&gt;" />
        <Parameter Name="value" Type="T" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="result" Type="Microsoft.AspNetCore.HeaderParsing.ParsingResult" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the header value.</typeparam>
        <param name="request">The <see cref="T:Microsoft.AspNetCore.Http.HttpRequest" /> instance.</param>
        <param name="header">The header to parse.</param>
        <param name="value">A resulting value.</param>
        <param name="result">Details on the parsing operation.</param>
        <summary>
            Tries to get a header value if it exists and can be parsed.
            </summary>
        <returns>
          <see langword="true" /> if the header value was successfully fetched parsed.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
