<Type Name="HeaderParser&lt;T&gt;" FullName="Microsoft.AspNetCore.HeaderParsing.HeaderParser&lt;T&gt;">
  <TypeSignature Language="C#" Value="public abstract class HeaderParser&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit HeaderParser`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.HeaderParsing.HeaderParser`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class HeaderParser(Of T)" />
  <TypeSignature Language="F#" Value="type HeaderParser&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.HeaderParsing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">The resulting strong type representing the header's value.</typeparam>
    <summary>
            Parses raw header value to a header type.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HeaderParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HeaderParsing.HeaderParser`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HeaderParsing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public abstract bool TryParse (Microsoft.Extensions.Primitives.StringValues values, out T? result, out string? error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryParse(valuetype Microsoft.Extensions.Primitives.StringValues values, [out] !T&amp; result, [out] string&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.HeaderParsing.HeaderParser`1.TryParse(Microsoft.Extensions.Primitives.StringValues,`0@,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function TryParse (values As StringValues, ByRef result As T, ByRef error As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryParse : Microsoft.Extensions.Primitives.StringValues * 'T * string -&gt; bool" Usage="headerParser.TryParse (values, result, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.HeaderParsing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="Microsoft.Extensions.Primitives.StringValues" />
        <Parameter Name="result" Type="T" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="error" Type="System.String" RefType="out">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(false)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(false)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="values">The original value.</param>
        <param name="result">A resulting value.</param>
        <param name="error">An error if parsing failed.</param>
        <summary>
            Parses a raw header value to a strong type.
            </summary>
        <returns>Parsing result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
