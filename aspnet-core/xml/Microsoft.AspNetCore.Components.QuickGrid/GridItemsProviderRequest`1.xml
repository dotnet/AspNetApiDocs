<Type Name="GridItemsProviderRequest&lt;TGridItem&gt;" FullName="Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest&lt;TGridItem&gt;">
  <TypeSignature Language="C#" Value="public readonly struct GridItemsProviderRequest&lt;TGridItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit GridItemsProviderRequest`1&lt;TGridItem&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1" />
  <TypeSignature Language="VB.NET" Value="Public Structure GridItemsProviderRequest(Of TGridItem)" />
  <TypeSignature Language="F#" Value="type GridItemsProviderRequest&lt;'GridItem&gt; = struct" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TGridItem">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TGridItem">The type of data represented by each row in the grid.</typeparam>
    <summary>
            Parameters for data to be supplied by a <see cref="T:Microsoft.AspNetCore.Components.QuickGrid.QuickGrid`1" />'s <see cref="P:Microsoft.AspNetCore.Components.QuickGrid.QuickGrid`1.ItemsProvider" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplySorting">
      <MemberSignature Language="C#" Value="public System.Linq.IQueryable&lt;TGridItem&gt; ApplySorting (System.Linq.IQueryable&lt;TGridItem&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.IQueryable`1&lt;!TGridItem&gt; ApplySorting(class System.Linq.IQueryable`1&lt;!TGridItem&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.ApplySorting(System.Linq.IQueryable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplySorting (source As IQueryable(Of TGridItem)) As IQueryable(Of TGridItem)" />
      <MemberSignature Language="F#" Value="member this.ApplySorting : System.Linq.IQueryable&lt;'GridItem&gt; -&gt; System.Linq.IQueryable&lt;'GridItem&gt;" Usage="gridItemsProviderRequest.ApplySorting source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TGridItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable&lt;TGridItem&gt;" />
      </Parameters>
      <Docs>
        <param name="source">An <see cref="T:System.Linq.IQueryable`1" />.</param>
        <summary>
            Applies the request's sorting rules to the supplied <see cref="T:System.Linq.IQueryable`1" />.
            </summary>
        <returns>A new <see cref="T:System.Linq.IQueryable`1" /> representing the <paramref name="source" /> with sorting rules applied.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancellationToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken CancellationToken { get; init; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken CancellationToken" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.CancellationToken" />
      <MemberSignature Language="VB.NET" Value="Public Property CancellationToken As CancellationToken" />
      <MemberSignature Language="F#" Value="member this.CancellationToken : System.Threading.CancellationToken with get, set" Usage="Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest&lt;'GridItem&gt;.CancellationToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A token that indicates if the request should be cancelled.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int? Count { get; init; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public Property Count As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.Count : Nullable&lt;int&gt; with get, set" Usage="Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest&lt;'GridItem&gt;.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            If set, the maximum number of items to be supplied. If not set, the maximum number is unlimited.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSortByProperties">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.AspNetCore.Components.QuickGrid.SortedProperty&gt; GetSortByProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IReadOnlyCollection`1&lt;valuetype Microsoft.AspNetCore.Components.QuickGrid.SortedProperty&gt; GetSortByProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.GetSortByProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSortByProperties () As IReadOnlyCollection(Of SortedProperty)" />
      <MemberSignature Language="F#" Value="member this.GetSortByProperties : unit -&gt; System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.AspNetCore.Components.QuickGrid.SortedProperty&gt;" Usage="gridItemsProviderRequest.GetSortByProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyCollection&lt;Microsoft.AspNetCore.Components.QuickGrid.SortedProperty&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Produces a collection of (property name, direction) pairs representing the sorting rules.
            </summary>
        <returns>A collection of (property name, direction) pairs representing the sorting rules</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SortByAscending">
      <MemberSignature Language="C#" Value="public bool SortByAscending { get; init; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SortByAscending" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.SortByAscending" />
      <MemberSignature Language="VB.NET" Value="Public Property SortByAscending As Boolean" />
      <MemberSignature Language="F#" Value="member this.SortByAscending : bool with get, set" Usage="Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest&lt;'GridItem&gt;.SortByAscending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Specifies the current sort direction.
            
             Rather than inferring the sort rules manually, you should normally call either <see cref="M:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.ApplySorting(System.Linq.IQueryable{`0})" />
             or <see cref="M:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.GetSortByProperties" />, since they also account for <see cref="P:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.SortByColumn" /> and <see cref="P:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.SortByAscending" /> automatically.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SortByColumn">
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Components.QuickGrid.ColumnBase&lt;TGridItem&gt;? SortByColumn { get; init; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Components.QuickGrid.ColumnBase`1&lt;!TGridItem&gt; SortByColumn" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.SortByColumn" />
      <MemberSignature Language="VB.NET" Value="Public Property SortByColumn As ColumnBase(Of TGridItem)" />
      <MemberSignature Language="F#" Value="member this.SortByColumn : Microsoft.AspNetCore.Components.QuickGrid.ColumnBase&lt;'GridItem&gt; with get, set" Usage="Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest&lt;'GridItem&gt;.SortByColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Components.QuickGrid.ColumnBase&lt;TGridItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Specifies which column represents the sort order.
            
             Rather than inferring the sort rules manually, you should normally call either <see cref="M:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.ApplySorting(System.Linq.IQueryable{`0})" />
             or <see cref="M:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.GetSortByProperties" />, since they also account for <see cref="P:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.SortByColumn" /> and <see cref="P:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.SortByAscending" /> automatically.
             </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartIndex">
      <MemberSignature Language="C#" Value="public int StartIndex { get; init; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartIndex" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest`1.StartIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property StartIndex As Integer" />
      <MemberSignature Language="F#" Value="member this.StartIndex : int with get, set" Usage="Microsoft.AspNetCore.Components.QuickGrid.GridItemsProviderRequest&lt;'GridItem&gt;.StartIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The zero-based index of the first item to be supplied.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
