<Type Name="PaginationState" FullName="Microsoft.AspNetCore.Components.QuickGrid.PaginationState">
  <TypeSignature Language="C#" Value="public class PaginationState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PaginationState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Components.QuickGrid.PaginationState" />
  <TypeSignature Language="VB.NET" Value="Public Class PaginationState" />
  <TypeSignature Language="F#" Value="type PaginationState = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Holds state to represent pagination in a <see cref="T:Microsoft.AspNetCore.Components.QuickGrid.QuickGrid`1" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PaginationState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.QuickGrid.PaginationState.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentPageIndex">
      <MemberSignature Language="C#" Value="public int CurrentPageIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentPageIndex" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Components.QuickGrid.PaginationState.CurrentPageIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentPageIndex As Integer" />
      <MemberSignature Language="F#" Value="member this.CurrentPageIndex : int" Usage="Microsoft.AspNetCore.Components.QuickGrid.PaginationState.CurrentPageIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the current zero-based page index. To set it, call <see cref="M:Microsoft.AspNetCore.Components.QuickGrid.PaginationState.SetCurrentPageIndexAsync(System.Int32)" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.QuickGrid.PaginationState.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="paginationState.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ItemsPerPage">
      <MemberSignature Language="C#" Value="public int ItemsPerPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ItemsPerPage" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Components.QuickGrid.PaginationState.ItemsPerPage" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemsPerPage As Integer" />
      <MemberSignature Language="F#" Value="member this.ItemsPerPage : int with get, set" Usage="Microsoft.AspNetCore.Components.QuickGrid.PaginationState.ItemsPerPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the number of items on each page.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastPageIndex">
      <MemberSignature Language="C#" Value="public int? LastPageIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; LastPageIndex" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Components.QuickGrid.PaginationState.LastPageIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LastPageIndex As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.LastPageIndex : Nullable&lt;int&gt;" Usage="Microsoft.AspNetCore.Components.QuickGrid.PaginationState.LastPageIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the zero-based index of the last page, if known. The value will be null until <see cref="P:Microsoft.AspNetCore.Components.QuickGrid.PaginationState.TotalItemCount" /> is known.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCurrentPageIndexAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SetCurrentPageIndexAsync (int pageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SetCurrentPageIndexAsync(int32 pageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.QuickGrid.PaginationState.SetCurrentPageIndexAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetCurrentPageIndexAsync (pageIndex As Integer) As Task" />
      <MemberSignature Language="F#" Value="member this.SetCurrentPageIndexAsync : int -&gt; System.Threading.Tasks.Task" Usage="paginationState.SetCurrentPageIndexAsync pageIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pageIndex">The new, zero-based page index.</param>
        <summary>
            Sets the current page index, and notifies any associated <see cref="T:Microsoft.AspNetCore.Components.QuickGrid.QuickGrid`1" />
            to fetch and render updated data.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the completion of the operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalItemCount">
      <MemberSignature Language="C#" Value="public int? TotalItemCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; TotalItemCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Components.QuickGrid.PaginationState.TotalItemCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalItemCount As Nullable(Of Integer)" />
      <MemberSignature Language="F#" Value="member this.TotalItemCount : Nullable&lt;int&gt;" Usage="Microsoft.AspNetCore.Components.QuickGrid.PaginationState.TotalItemCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the total number of items across all pages, if known. The value will be null until an
            associated <see cref="T:Microsoft.AspNetCore.Components.QuickGrid.QuickGrid`1" /> assigns a value after loading data.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalItemCountChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;int?&gt;? TotalItemCountChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; TotalItemCountChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.AspNetCore.Components.QuickGrid.PaginationState.TotalItemCountChanged" />
      <MemberSignature Language="VB.NET" Value="Public Event TotalItemCountChanged As EventHandler(Of Nullable(Of Integer)) " />
      <MemberSignature Language="F#" Value="member this.TotalItemCountChanged : EventHandler&lt;Nullable&lt;int&gt;&gt; " Usage="member this.TotalItemCountChanged : System.EventHandler&lt;System.Nullable&lt;System.int&gt;&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.QuickGrid</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[add: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;add: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[remove: System.Runtime.CompilerServices.NullableContext(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;remove: System.Runtime.CompilerServices.NullableContext(2)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Nullable&lt;System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An event that is raised when the total item count has changed.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
