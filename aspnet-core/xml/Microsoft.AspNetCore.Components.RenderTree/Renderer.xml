<Type Name="Renderer" FullName="Microsoft.AspNetCore.Components.RenderTree.Renderer">
  <TypeSignature Language="C++ CLI" Value="public ref class Renderer abstract : IDisposable" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class Renderer abstract : IAsyncDisposable, IDisposable" FrameworkAlternate="aspnetcore-5.0" />
  <TypeSignature Language="C#" Value="public abstract class Renderer : IDisposable" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Renderer extends System.Object implements class System.IDisposable" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Components.RenderTree.Renderer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Renderer&#xA;Implements IDisposable" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1" />
  <TypeSignature Language="F#" Value="type Renderer = class&#xA;    interface IDisposable" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1" />
  <TypeSignature Language="C#" Value="public abstract class Renderer : IAsyncDisposable, IDisposable" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Renderer extends System.Object implements class System.IAsyncDisposable, class System.IDisposable" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Renderer&#xA;Implements IAsyncDisposable, IDisposable" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
  <TypeSignature Language="F#" Value="type Renderer = class&#xA;    interface IDisposable&#xA;    interface IAsyncDisposable" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Types in the Microsoft.AspNetCore.Components.RenderTree are not recommended for use outside
            of the Blazor framework. These types will change in a future release.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Renderer(IServiceProvider ^ serviceProvider, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberSignature Language="C#" Value="public Renderer (IServiceProvider serviceProvider, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Components.RenderTree.Renderer : IServiceProvider * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.Components.RenderTree.Renderer" Usage="new Microsoft.AspNetCore.Components.RenderTree.Renderer (serviceProvider, loggerFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> to be used when initializing components.</param>
        <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />.</param>
        <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Renderer(IServiceProvider ^ serviceProvider, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory, Microsoft::AspNetCore::Components::IComponentActivator ^ componentActivator);" />
      <MemberSignature Language="C#" Value="public Renderer (IServiceProvider serviceProvider, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Microsoft.AspNetCore.Components.IComponentActivator componentActivator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IServiceProvider serviceProvider, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, class Microsoft.AspNetCore.Components.IComponentActivator componentActivator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.#ctor(System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.Components.IComponentActivator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (serviceProvider As IServiceProvider, loggerFactory As ILoggerFactory, componentActivator As IComponentActivator)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Components.RenderTree.Renderer : IServiceProvider * Microsoft.Extensions.Logging.ILoggerFactory * Microsoft.AspNetCore.Components.IComponentActivator -&gt; Microsoft.AspNetCore.Components.RenderTree.Renderer" Usage="new Microsoft.AspNetCore.Components.RenderTree.Renderer (serviceProvider, loggerFactory, componentActivator)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" Index="0" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" Index="1" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="componentActivator" Type="Microsoft.AspNetCore.Components.IComponentActivator" Index="2" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> to be used when initializing components.</param>
        <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />.</param>
        <param name="componentActivator">The <see cref="T:Microsoft.AspNetCore.Components.IComponentActivator" />.</param>
        <summary>
            Constructs an instance of <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPendingTask">
      <MemberSignature Language="C#" Value="protected virtual void AddPendingTask (Microsoft.AspNetCore.Components.Rendering.ComponentState? componentState, System.Threading.Tasks.Task task);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddPendingTask(class Microsoft.AspNetCore.Components.Rendering.ComponentState componentState, class System.Threading.Tasks.Task task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.AddPendingTask(Microsoft.AspNetCore.Components.Rendering.ComponentState,System.Threading.Tasks.Task)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddPendingTask (componentState As ComponentState, task As Task)" />
      <MemberSignature Language="F#" Value="abstract member AddPendingTask : Microsoft.AspNetCore.Components.Rendering.ComponentState * System.Threading.Tasks.Task -&gt; unit&#xA;override this.AddPendingTask : Microsoft.AspNetCore.Components.Rendering.ComponentState * System.Threading.Tasks.Task -&gt; unit" Usage="renderer.AddPendingTask (componentState, task)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentState" Type="Microsoft.AspNetCore.Components.Rendering.ComponentState" Index="0" FrameworkAlternate="aspnetcore-8.0" />
        <Parameter Name="task" Type="System.Threading.Tasks.Task" Index="1" FrameworkAlternate="aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="componentState">The <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState" /> for the component associated with this pending task, if any.</param>
        <param name="task">The <see cref="T:System.Threading.Tasks.Task" />.</param>
        <summary>
            Notifies the renderer that there is a pending task associated with a component. The
            renderer is regarded as quiescent when all such tasks have completed.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignRootComponentId">
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; int AssignRootComponentId(Microsoft::AspNetCore::Components::IComponent ^ component);" />
      <MemberSignature Language="C#" Value="protected internal int AssignRootComponentId (Microsoft.AspNetCore.Components.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance int32 AssignRootComponentId(class Microsoft.AspNetCore.Components.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function AssignRootComponentId (component As IComponent) As Integer" />
      <MemberSignature Language="F#" Value="member this.AssignRootComponentId : Microsoft.AspNetCore.Components.IComponent -&gt; int" Usage="renderer.AssignRootComponentId component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="Microsoft.AspNetCore.Components.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">The component.</param>
        <summary>
            Associates the <see cref="T:Microsoft.AspNetCore.Components.IComponent" /> with the <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer" />, assigning
            an identifier that is unique within the scope of the <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer" />.
            </summary>
        <returns>The component's assigned identifier.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateComponentState">
      <MemberSignature Language="C#" Value="protected virtual Microsoft.AspNetCore.Components.Rendering.ComponentState CreateComponentState (int componentId, Microsoft.AspNetCore.Components.IComponent component, Microsoft.AspNetCore.Components.Rendering.ComponentState? parentComponentState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Microsoft.AspNetCore.Components.Rendering.ComponentState CreateComponentState(int32 componentId, class Microsoft.AspNetCore.Components.IComponent component, class Microsoft.AspNetCore.Components.Rendering.ComponentState parentComponentState) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.CreateComponentState(System.Int32,Microsoft.AspNetCore.Components.IComponent,Microsoft.AspNetCore.Components.Rendering.ComponentState)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateComponentState (componentId As Integer, component As IComponent, parentComponentState As ComponentState) As ComponentState" />
      <MemberSignature Language="F#" Value="abstract member CreateComponentState : int * Microsoft.AspNetCore.Components.IComponent * Microsoft.AspNetCore.Components.Rendering.ComponentState -&gt; Microsoft.AspNetCore.Components.Rendering.ComponentState&#xA;override this.CreateComponentState : int * Microsoft.AspNetCore.Components.IComponent * Microsoft.AspNetCore.Components.Rendering.ComponentState -&gt; Microsoft.AspNetCore.Components.Rendering.ComponentState" Usage="renderer.CreateComponentState (componentId, component, parentComponentState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Components.Rendering.ComponentState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentId" Type="System.Int32" Index="0" FrameworkAlternate="aspnetcore-8.0" />
        <Parameter Name="component" Type="Microsoft.AspNetCore.Components.IComponent" Index="1" FrameworkAlternate="aspnetcore-8.0" />
        <Parameter Name="parentComponentState" Type="Microsoft.AspNetCore.Components.Rendering.ComponentState" Index="2" FrameworkAlternate="aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="componentId">The ID of the newly-created component.</param>
        <param name="component">The component instance.</param>
        <param name="parentComponentState">The <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState" /> associated with the parent component, or null if this is a root component.</param>
        <summary>
            Creates a <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState" /> instance to track state associated with a newly-instantiated component.
            This is called before the component is initialized and tracked within the <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer" />. Subclasses
            may override this method to use their own subclasses of <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState" />.
            </summary>
        <returns>A <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState" /> for the new component.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispatcher">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Microsoft::AspNetCore::Components::Dispatcher ^ Dispatcher { Microsoft::AspNetCore::Components::Dispatcher ^ get(); };" />
      <MemberSignature Language="C#" Value="public abstract Microsoft.AspNetCore.Components.Dispatcher Dispatcher { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Components.Dispatcher Dispatcher" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispatcher" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Dispatcher As Dispatcher" />
      <MemberSignature Language="F#" Value="member this.Dispatcher : Microsoft.AspNetCore.Components.Dispatcher" Usage="Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispatcher" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Components.Dispatcher</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Dispatcher" /> associated with this <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchEventAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ DispatchEventAsync(System::UInt64 eventHandlerId, Microsoft::AspNetCore::Components::RenderTree::EventFieldInfo ^ fieldInfo, EventArgs ^ eventArgs);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DispatchEventAsync (ulong eventHandlerId, Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo fieldInfo, EventArgs eventArgs);" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DispatchEventAsync(unsigned int64 eventHandlerId, class Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo fieldInfo, class System.EventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.DispatchEventAsync(System.UInt64,Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DispatchEventAsync (eventHandlerId As ULong, fieldInfo As EventFieldInfo, eventArgs As EventArgs) As Task" />
      <MemberSignature Language="F#" Value="abstract member DispatchEventAsync : uint64 * Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo * EventArgs -&gt; System.Threading.Tasks.Task&#xA;override this.DispatchEventAsync : uint64 * Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo * EventArgs -&gt; System.Threading.Tasks.Task" Usage="renderer.DispatchEventAsync (eventHandlerId, fieldInfo, eventArgs)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DispatchEventAsync (ulong eventHandlerId, Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo? fieldInfo, EventArgs eventArgs);" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHandlerId" Type="System.UInt64" />
        <Parameter Name="fieldInfo" Type="Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo" />
        <Parameter Name="eventArgs" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="eventHandlerId">The <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeEventHandlerId" /> value from the original event attribute.</param>
        <param name="eventArgs">Arguments to be passed to the event handler.</param>
        <param name="fieldInfo">Information that the renderer can use to update the state of the existing render tree to match the UI.</param>
        <summary>
            Notifies the renderer that an event has occurred.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> which will complete once all asynchronous processing related to the event
            has completed.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchEventAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DispatchEventAsync (ulong eventHandlerId, Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo? fieldInfo, EventArgs eventArgs, bool waitForQuiescence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DispatchEventAsync(unsigned int64 eventHandlerId, class Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo fieldInfo, class System.EventArgs eventArgs, bool waitForQuiescence) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.DispatchEventAsync(System.UInt64,Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo,System.EventArgs,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DispatchEventAsync (eventHandlerId As ULong, fieldInfo As EventFieldInfo, eventArgs As EventArgs, waitForQuiescence As Boolean) As Task" />
      <MemberSignature Language="F#" Value="abstract member DispatchEventAsync : uint64 * Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo * EventArgs * bool -&gt; System.Threading.Tasks.Task&#xA;override this.DispatchEventAsync : uint64 * Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo * EventArgs * bool -&gt; System.Threading.Tasks.Task" Usage="renderer.DispatchEventAsync (eventHandlerId, fieldInfo, eventArgs, waitForQuiescence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHandlerId" Type="System.UInt64" Index="0" FrameworkAlternate="aspnetcore-8.0" />
        <Parameter Name="fieldInfo" Type="Microsoft.AspNetCore.Components.RenderTree.EventFieldInfo" Index="1" FrameworkAlternate="aspnetcore-8.0" />
        <Parameter Name="eventArgs" Type="System.EventArgs" Index="2" FrameworkAlternate="aspnetcore-8.0" />
        <Parameter Name="waitForQuiescence" Type="System.Boolean" Index="3" FrameworkAlternate="aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="eventHandlerId">The <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeEventHandlerId" /> value from the original event attribute.</param>
        <param name="eventArgs">Arguments to be passed to the event handler.</param>
        <param name="fieldInfo">Information that the renderer can use to update the state of the existing render tree to match the UI.</param>
        <param name="waitForQuiescence">A flag indicating whether to wait for quiescence.</param>
        <summary>
            Notifies the renderer that an event has occurred.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> which will complete once all asynchronous processing related to the event
            has completed.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="renderer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Releases all resources currently used by this <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="renderer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> if this method is being invoked by <see cref="M:System.IDisposable.Dispose" />, otherwise <see langword="false" />.</param>
        <summary>
            Releases all resources currently used by this <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer" /> instance.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::ValueTask DisposeAsync();" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="renderer.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <inheritdoc />
      </Docs>
    </Member>
    <Member MemberName="ElementReferenceContext">
      <MemberSignature Language="C++ CLI" Value="public:  property Microsoft::AspNetCore::Components::ElementReferenceContext ^ ElementReferenceContext {  protected public:&#xA;Microsoft::AspNetCore::Components::ElementReferenceContext ^ get(); protected:&#xA; void set(Microsoft::AspNetCore::Components::ElementReferenceContext ^ value); };" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Components.ElementReferenceContext? ElementReferenceContext { protected internal get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Components.ElementReferenceContext ElementReferenceContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Components.RenderTree.Renderer.ElementReferenceContext" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementReferenceContext As ElementReferenceContext" />
      <MemberSignature Language="F#" Value="member this.ElementReferenceContext : Microsoft.AspNetCore.Components.ElementReferenceContext with get, set" Usage="Microsoft.AspNetCore.Components.RenderTree.Renderer.ElementReferenceContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Components.ElementReferenceContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Components.ElementReferenceContext" /> associated with this <see cref="T:Microsoft.AspNetCore.Components.RenderTree.Renderer" />,
            if it exists.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetComponentRenderMode">
      <MemberSignature Language="C#" Value="protected internal virtual Microsoft.AspNetCore.Components.IComponentRenderMode? GetComponentRenderMode (Microsoft.AspNetCore.Components.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class Microsoft.AspNetCore.Components.IComponentRenderMode GetComponentRenderMode(class Microsoft.AspNetCore.Components.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.GetComponentRenderMode(Microsoft.AspNetCore.Components.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetComponentRenderMode (component As IComponent) As IComponentRenderMode" />
      <MemberSignature Language="F#" Value="abstract member GetComponentRenderMode : Microsoft.AspNetCore.Components.IComponent -&gt; Microsoft.AspNetCore.Components.IComponentRenderMode&#xA;override this.GetComponentRenderMode : Microsoft.AspNetCore.Components.IComponent -&gt; Microsoft.AspNetCore.Components.IComponentRenderMode" Usage="renderer.GetComponentRenderMode component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Components.IComponentRenderMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="Microsoft.AspNetCore.Components.IComponent" Index="0" FrameworkAlternate="aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="component">The component type</param>
        <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.IComponentRenderMode" /> for a given component if available.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetComponentState">
      <MemberSignature Language="C#" Value="protected internal Microsoft.AspNetCore.Components.Rendering.ComponentState GetComponentState (Microsoft.AspNetCore.Components.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class Microsoft.AspNetCore.Components.Rendering.ComponentState GetComponentState(class Microsoft.AspNetCore.Components.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.GetComponentState(Microsoft.AspNetCore.Components.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetComponentState (component As IComponent) As ComponentState" />
      <MemberSignature Language="F#" Value="member this.GetComponentState : Microsoft.AspNetCore.Components.IComponent -&gt; Microsoft.AspNetCore.Components.Rendering.ComponentState" Usage="renderer.GetComponentState component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Components.Rendering.ComponentState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="Microsoft.AspNetCore.Components.IComponent" Index="0" FrameworkAlternate="aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="component">The <see cref="T:Microsoft.AspNetCore.Components.IComponent" /> instance</param>
        <summary>
            Resolves the component state for a given <see cref="T:Microsoft.AspNetCore.Components.IComponent" /> instance.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetComponentState">
      <MemberSignature Language="C#" Value="protected Microsoft.AspNetCore.Components.Rendering.ComponentState GetComponentState (int componentId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.AspNetCore.Components.Rendering.ComponentState GetComponentState(int32 componentId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.GetComponentState(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetComponentState (componentId As Integer) As ComponentState" />
      <MemberSignature Language="F#" Value="member this.GetComponentState : int -&gt; Microsoft.AspNetCore.Components.Rendering.ComponentState" Usage="renderer.GetComponentState componentId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Components.Rendering.ComponentState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentId" Type="System.Int32" Index="0" FrameworkAlternate="aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="componentId">The component ID</param>
        <summary>
            Gets the <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState" /> associated with the specified component.
            </summary>
        <returns>The corresponding <see cref="T:Microsoft.AspNetCore.Components.Rendering.ComponentState" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentRenderTreeFrames">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::AspNetCore::Components::RenderTree::ArrayRange&lt;Microsoft::AspNetCore::Components::RenderTree::RenderTreeFrame&gt; GetCurrentRenderTreeFrames(int componentId);" />
      <MemberSignature Language="C#" Value="protected Microsoft.AspNetCore.Components.RenderTree.ArrayRange&lt;Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame&gt; GetCurrentRenderTreeFrames (int componentId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype Microsoft.AspNetCore.Components.RenderTree.ArrayRange`1&lt;valuetype Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame&gt; GetCurrentRenderTreeFrames(int32 componentId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.GetCurrentRenderTreeFrames(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetCurrentRenderTreeFrames (componentId As Integer) As ArrayRange(Of RenderTreeFrame)" />
      <MemberSignature Language="F#" Value="member this.GetCurrentRenderTreeFrames : int -&gt; Microsoft.AspNetCore.Components.RenderTree.ArrayRange&lt;Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame&gt;" Usage="renderer.GetCurrentRenderTreeFrames componentId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Components.RenderTree.ArrayRange&lt;Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="componentId">The id for the component.</param>
        <summary>
            Gets the current render tree for a given component.
            </summary>
        <returns>The <see cref="T:Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder" /> representing the current render tree.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEventArgsType">
      <MemberSignature Language="C#" Value="public Type GetEventArgsType (ulong eventHandlerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetEventArgsType(unsigned int64 eventHandlerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.GetEventArgsType(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEventArgsType (eventHandlerId As ULong) As Type" />
      <MemberSignature Language="F#" Value="member this.GetEventArgsType : uint64 -&gt; Type" Usage="renderer.GetEventArgsType eventHandlerId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventHandlerId" Type="System.UInt64" Index="0" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="eventHandlerId">The <see cref="P:Microsoft.AspNetCore.Components.RenderTree.RenderTreeFrame.AttributeEventHandlerId" /> value from the original event attribute.</param>
        <summary>
            Gets the event arguments type for the specified event handler.
            </summary>
        <returns>The parameter type expected by the event handler. Normally this is a subclass of <see cref="T:System.EventArgs" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void HandleException(Exception ^ exception);" />
      <MemberSignature Language="C#" Value="protected abstract void HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.HandleException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub HandleException (exception As Exception)" />
      <MemberSignature Language="F#" Value="abstract member HandleException : Exception -&gt; unit" Usage="renderer.HandleException exception" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">The <see cref="T:System.Exception" />.</param>
        <summary>
            Allows derived types to handle exceptions during rendering. Defaults to rethrowing the original exception.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstantiateComponent">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Microsoft::AspNetCore::Components::IComponent ^ InstantiateComponent(Type ^ componentType);" />
      <MemberSignature Language="C#" Value="protected Microsoft.AspNetCore.Components.IComponent InstantiateComponent (Type componentType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class Microsoft.AspNetCore.Components.IComponent InstantiateComponent(class System.Type componentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.InstantiateComponent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function InstantiateComponent (componentType As Type) As IComponent" />
      <MemberSignature Language="F#" Value="member this.InstantiateComponent : Type -&gt; Microsoft.AspNetCore.Components.IComponent" Usage="renderer.InstantiateComponent componentType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Components.IComponent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentType" Type="System.Type">
          <Attributes>
            <Attribute FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="componentType">The type of the component to instantiate.</param>
        <summary>
            Constructs a new component of the specified type.
            </summary>
        <returns>The component instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessPendingRender">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ProcessPendingRender();" />
      <MemberSignature Language="C#" Value="protected virtual void ProcessPendingRender ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ProcessPendingRender() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.ProcessPendingRender" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ProcessPendingRender ()" />
      <MemberSignature Language="F#" Value="abstract member ProcessPendingRender : unit -&gt; unit&#xA;override this.ProcessPendingRender : unit -&gt; unit" Usage="renderer.ProcessPendingRender " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Processes pending renders requests from components if there are any.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRootComponent">
      <MemberSignature Language="C#" Value="protected internal void RemoveRootComponent (int componentId);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveRootComponent(int32 componentId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.RemoveRootComponent(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveRootComponent (componentId As Integer)" />
      <MemberSignature Language="F#" Value="member this.RemoveRootComponent : int -&gt; unit" Usage="renderer.RemoveRootComponent componentId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentId" Type="System.Int32" Index="0" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="componentId">The ID of the root component.</param>
        <summary>
            Removes the specified component from the renderer, causing the component and its
            descendants to be disposed.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderRootComponentAsync">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Threading::Tasks::Task ^ RenderRootComponentAsync(int componentId);" />
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task RenderRootComponentAsync (int componentId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task RenderRootComponentAsync(int32 componentId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RenderRootComponentAsync (componentId As Integer) As Task" />
      <MemberSignature Language="F#" Value="member this.RenderRootComponentAsync : int -&gt; System.Threading.Tasks.Task" Usage="renderer.RenderRootComponentAsync componentId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="componentId">The ID returned by <see cref="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent)" />.</param>
        <summary>
            Performs the first render for a root component, waiting for this component and all
            children components to finish rendering in case there is any asynchronous work being
            done by any of the components. After this, the root component
            makes its own decisions about when to re-render, so there is no need to call
            this more than once.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Rendering a root component is an asynchronous operation. Clients may choose to not await the returned task to
            start, but not wait for the entire render to complete.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderRootComponentAsync">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Threading::Tasks::Task ^ RenderRootComponentAsync(int componentId, Microsoft::AspNetCore::Components::ParameterView initialParameters);" />
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task RenderRootComponentAsync (int componentId, Microsoft.AspNetCore.Components.ParameterView initialParameters);" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task RenderRootComponentAsync(int32 componentId, valuetype Microsoft.AspNetCore.Components.ParameterView initialParameters) cil managed" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.RenderRootComponentAsync(System.Int32,Microsoft.AspNetCore.Components.ParameterView)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RenderRootComponentAsync (componentId As Integer, initialParameters As ParameterView) As Task" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="F#" Value="member this.RenderRootComponentAsync : int * Microsoft.AspNetCore.Components.ParameterView -&gt; System.Threading.Tasks.Task" Usage="renderer.RenderRootComponentAsync (componentId, initialParameters)" />
      <MemberSignature Language="C#" Value="protected internal System.Threading.Tasks.Task RenderRootComponentAsync (int componentId, Microsoft.AspNetCore.Components.ParameterView initialParameters);" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Threading.Tasks.Task RenderRootComponentAsync(int32 componentId, valuetype Microsoft.AspNetCore.Components.ParameterView initialParameters) cil managed" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function RenderRootComponentAsync (componentId As Integer, initialParameters As ParameterView) As Task" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentId" Type="System.Int32" />
        <Parameter Name="initialParameters" Type="Microsoft.AspNetCore.Components.ParameterView" />
      </Parameters>
      <Docs>
        <param name="componentId">The ID returned by <see cref="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.AssignRootComponentId(Microsoft.AspNetCore.Components.IComponent)" />.</param>
        <param name="initialParameters">The <see cref="T:Microsoft.AspNetCore.Components.ParameterView" /> with the initial or updated parameters to use for rendering.</param>
        <summary>
             Supplies parameters for a root component, normally causing it to render. This can be
             used to trigger the first render of a root component, or to update its parameters and
             trigger a subsequent render. Note that components may also make their own decisions about
             when to re-render, and may re-render at any time.
            
             The returned <see cref="T:System.Threading.Tasks.Task" /> waits for this component and all descendant components to
             finish rendering in case there is any asynchronous work being done by any of them.
             </summary>
        <returns>To be added.</returns>
        <remarks>
             Rendering a root component is an asynchronous operation. Clients may choose to not await the returned task to
             start, but not wait for the entire render to complete.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveComponentForRenderMode">
      <MemberSignature Language="C#" Value="protected internal virtual Microsoft.AspNetCore.Components.IComponent ResolveComponentForRenderMode (Type componentType, int? parentComponentId, Microsoft.AspNetCore.Components.IComponentActivator componentActivator, Microsoft.AspNetCore.Components.IComponentRenderMode renderMode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class Microsoft.AspNetCore.Components.IComponent ResolveComponentForRenderMode(class System.Type componentType, valuetype System.Nullable`1&lt;int32&gt; parentComponentId, class Microsoft.AspNetCore.Components.IComponentActivator componentActivator, class Microsoft.AspNetCore.Components.IComponentRenderMode renderMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.ResolveComponentForRenderMode(System.Type,System.Nullable{System.Int32},Microsoft.AspNetCore.Components.IComponentActivator,Microsoft.AspNetCore.Components.IComponentRenderMode)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ResolveComponentForRenderMode (componentType As Type, parentComponentId As Nullable(Of Integer), componentActivator As IComponentActivator, renderMode As IComponentRenderMode) As IComponent" />
      <MemberSignature Language="F#" Value="abstract member ResolveComponentForRenderMode : Type * Nullable&lt;int&gt; * Microsoft.AspNetCore.Components.IComponentActivator * Microsoft.AspNetCore.Components.IComponentRenderMode -&gt; Microsoft.AspNetCore.Components.IComponent&#xA;override this.ResolveComponentForRenderMode : Type * Nullable&lt;int&gt; * Microsoft.AspNetCore.Components.IComponentActivator * Microsoft.AspNetCore.Components.IComponentRenderMode -&gt; Microsoft.AspNetCore.Components.IComponent" Usage="renderer.ResolveComponentForRenderMode (componentType, parentComponentId, componentActivator, renderMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Components.IComponent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="componentType" Type="System.Type" Index="0" FrameworkAlternate="aspnetcore-8.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="parentComponentId" Type="System.Nullable&lt;System.Int32&gt;" Index="1" FrameworkAlternate="aspnetcore-8.0" />
        <Parameter Name="componentActivator" Type="Microsoft.AspNetCore.Components.IComponentActivator" Index="2" FrameworkAlternate="aspnetcore-8.0" />
        <Parameter Name="renderMode" Type="Microsoft.AspNetCore.Components.IComponentRenderMode" Index="3" FrameworkAlternate="aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="componentType">The type of component that was requested.</param>
        <param name="parentComponentId">The parent component ID, or null if it is a root component.</param>
        <param name="componentActivator">An <see cref="T:Microsoft.AspNetCore.Components.IComponentActivator" /> that should be used when instantiating component objects.</param>
        <param name="renderMode">The <see cref="T:Microsoft.AspNetCore.Components.IComponentRenderMode" /> declared on <paramref name="componentType" /> or at the call site (for example, by the parent component).</param>
        <summary>
            Determines how to handle an <see cref="T:Microsoft.AspNetCore.Components.IComponentRenderMode" /> when obtaining a component instance.
            This is only called when a render mode is specified either at the call site or on the component type.
            
            Subclasses may override this method to return a component of a different type, or throw, depending on whether the renderer
            supports the render mode and how it implements that support.
            </summary>
        <returns>An <see cref="T:Microsoft.AspNetCore.Components.IComponent" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnhandledSynchronizationException">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event UnhandledExceptionEventHandler ^ UnhandledSynchronizationException;" />
      <MemberSignature Language="C#" Value="public event UnhandledExceptionEventHandler UnhandledSynchronizationException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.UnhandledExceptionEventHandler UnhandledSynchronizationException" />
      <MemberSignature Language="DocId" Value="E:Microsoft.AspNetCore.Components.RenderTree.Renderer.UnhandledSynchronizationException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledSynchronizationException As UnhandledExceptionEventHandler " />
      <MemberSignature Language="F#" Value="member this.UnhandledSynchronizationException : UnhandledExceptionEventHandler " Usage="member this.UnhandledSynchronizationException : System.UnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Allows the caller to handle exceptions from the SynchronizationContext when one is available.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateDisplayAsync">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Threading::Tasks::Task ^ UpdateDisplayAsync(Microsoft::AspNetCore::Components::RenderTree::RenderBatch ^ renderBatch);" />
      <MemberSignature Language="C#" Value="protected abstract System.Threading.Tasks.Task UpdateDisplayAsync (in Microsoft.AspNetCore.Components.RenderTree.RenderBatch renderBatch);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task UpdateDisplayAsync([in]valuetype Microsoft.AspNetCore.Components.RenderTree.RenderBatch renderBatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.RenderTree.Renderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.RenderTree.RenderBatch@|System.Runtime.InteropServices.InAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function UpdateDisplayAsync (renderBatch As RenderBatch) As Task" />
      <MemberSignature Language="F#" Value="abstract member UpdateDisplayAsync : RenderBatch -&gt; System.Threading.Tasks.Task" Usage="renderer.UpdateDisplayAsync renderBatch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="renderBatch" Type="Microsoft.AspNetCore.Components.RenderTree.RenderBatch">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="renderBatch">The changes to the UI since the previous call.</param>
        <summary>
            Updates the visible UI.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> to represent the UI update process.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
