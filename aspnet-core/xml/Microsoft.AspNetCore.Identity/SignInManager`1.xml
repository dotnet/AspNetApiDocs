<Type Name="SignInManager&lt;TUser&gt;" FullName="Microsoft.AspNetCore.Identity.SignInManager&lt;TUser&gt;">
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TUser&gt;&#xA; where TUser : classpublic ref class SignInManager" />
  <TypeSignature Language="C#" Value="public class SignInManager&lt;TUser&gt; where TUser : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SignInManager`1&lt;class TUser&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Identity.SignInManager`1" />
  <TypeSignature Language="VB.NET" Value="Public Class SignInManager(Of TUser)" />
  <TypeSignature Language="F#" Value="type SignInManager&lt;'User (requires 'User : null)&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TUser">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TUser">The type encapsulating a user.</typeparam>
    <summary>
            Provides the APIs for user sign in.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignInManager(Microsoft::AspNetCore::Identity::UserManager&lt;TUser&gt; ^ userManager, Microsoft::AspNetCore::Http::IHttpContextAccessor ^ contextAccessor, Microsoft::AspNetCore::Identity::IUserClaimsPrincipalFactory&lt;TUser&gt; ^ claimsFactory, Microsoft::Extensions::Options::IOptions&lt;Microsoft::AspNetCore::Builder::IdentityOptions ^&gt; ^ optionsAccessor, Microsoft::Extensions::Logging::ILogger&lt;Microsoft::AspNetCore::Identity::SignInManager&lt;TUser&gt; ^&gt; ^ logger);" />
      <MemberSignature Language="C#" Value="public SignInManager (Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt; userManager, Microsoft.AspNetCore.Http.IHttpContextAccessor contextAccessor, Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory&lt;TUser&gt; claimsFactory, Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Builder.IdentityOptions&gt; optionsAccessor, Microsoft.Extensions.Logging.ILogger&lt;Microsoft.AspNetCore.Identity.SignInManager&lt;TUser&gt;&gt; logger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Identity.UserManager`1&lt;!TUser&gt; userManager, class Microsoft.AspNetCore.Http.IHttpContextAccessor contextAccessor, class Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1&lt;!TUser&gt; claimsFactory, class Microsoft.Extensions.Options.IOptions`1&lt;class Microsoft.AspNetCore.Builder.IdentityOptions&gt; optionsAccessor, class Microsoft.Extensions.Logging.ILogger`1&lt;class Microsoft.AspNetCore.Identity.SignInManager`1&lt;!TUser&gt;&gt; logger) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Builder.IdentityOptions},Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.SignInManager{`0}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (userManager As UserManager(Of TUser), contextAccessor As IHttpContextAccessor, claimsFactory As IUserClaimsPrincipalFactory(Of TUser), optionsAccessor As IOptions(Of IdentityOptions), logger As ILogger(Of SignInManager(Of TUser)))" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt; : Microsoft.AspNetCore.Identity.UserManager&lt;'User (requires 'User : null)&gt; * Microsoft.AspNetCore.Http.IHttpContextAccessor * Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory&lt;'User (requires 'User : null)&gt; * Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Builder.IdentityOptions&gt; * Microsoft.Extensions.Logging.ILogger&lt;Microsoft.AspNetCore.Identity.SignInManager&lt;'User&gt;&gt; -&gt; Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt;" Usage="new Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt; (userManager, contextAccessor, claimsFactory, optionsAccessor, logger)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="userManager" Type="Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt;" Index="0" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
        <Parameter Name="contextAccessor" Type="Microsoft.AspNetCore.Http.IHttpContextAccessor" Index="1" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
        <Parameter Name="claimsFactory" Type="Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory&lt;TUser&gt;" Index="2" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
        <Parameter Name="optionsAccessor" Type="Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Builder.IdentityOptions&gt;" Index="3" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger&lt;Microsoft.AspNetCore.Identity.SignInManager&lt;TUser&gt;&gt;" Index="4" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="userManager">An instance of <see cref="P:Microsoft.AspNetCore.Identity.SignInManager`1.UserManager" /> used to retrieve users from and persist users.</param>
        <param name="contextAccessor">The accessor used to access the <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />.</param>
        <param name="claimsFactory">The factory to use to create claims principals for a user.</param>
        <param name="optionsAccessor">The accessor used to access the <see cref="T:Microsoft.AspNetCore.Builder.IdentityOptions" />.</param>
        <param name="logger">The logger used to log messages, warnings and errors.</param>
        <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Identity.SignInManager`1" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignInManager(Microsoft::AspNetCore::Identity::UserManager&lt;TUser&gt; ^ userManager, Microsoft::AspNetCore::Http::IHttpContextAccessor ^ contextAccessor, Microsoft::AspNetCore::Identity::IUserClaimsPrincipalFactory&lt;TUser&gt; ^ claimsFactory, Microsoft::Extensions::Options::IOptions&lt;Microsoft::AspNetCore::Identity::IdentityOptions ^&gt; ^ optionsAccessor, Microsoft::Extensions::Logging::ILogger&lt;Microsoft::AspNetCore::Identity::SignInManager&lt;TUser&gt; ^&gt; ^ logger, Microsoft::AspNetCore::Authentication::IAuthenticationSchemeProvider ^ schemes);" />
      <MemberSignature Language="C#" Value="public SignInManager (Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt; userManager, Microsoft.AspNetCore.Http.IHttpContextAccessor contextAccessor, Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory&lt;TUser&gt; claimsFactory, Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Identity.IdentityOptions&gt; optionsAccessor, Microsoft.Extensions.Logging.ILogger&lt;Microsoft.AspNetCore.Identity.SignInManager&lt;TUser&gt;&gt; logger, Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider schemes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Identity.UserManager`1&lt;!TUser&gt; userManager, class Microsoft.AspNetCore.Http.IHttpContextAccessor contextAccessor, class Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1&lt;!TUser&gt; claimsFactory, class Microsoft.Extensions.Options.IOptions`1&lt;class Microsoft.AspNetCore.Identity.IdentityOptions&gt; optionsAccessor, class Microsoft.Extensions.Logging.ILogger`1&lt;class Microsoft.AspNetCore.Identity.SignInManager`1&lt;!TUser&gt;&gt; logger, class Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider schemes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.IdentityOptions},Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.SignInManager{`0}},Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (userManager As UserManager(Of TUser), contextAccessor As IHttpContextAccessor, claimsFactory As IUserClaimsPrincipalFactory(Of TUser), optionsAccessor As IOptions(Of IdentityOptions), logger As ILogger(Of SignInManager(Of TUser)), schemes As IAuthenticationSchemeProvider)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt; : Microsoft.AspNetCore.Identity.UserManager&lt;'User (requires 'User : null)&gt; * Microsoft.AspNetCore.Http.IHttpContextAccessor * Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory&lt;'User (requires 'User : null)&gt; * Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Identity.IdentityOptions&gt; * Microsoft.Extensions.Logging.ILogger&lt;Microsoft.AspNetCore.Identity.SignInManager&lt;'User&gt;&gt; * Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider -&gt; Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt;" Usage="new Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt; (userManager, contextAccessor, claimsFactory, optionsAccessor, logger, schemes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="userManager" Type="Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt;" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2" />
        <Parameter Name="contextAccessor" Type="Microsoft.AspNetCore.Http.IHttpContextAccessor" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2" />
        <Parameter Name="claimsFactory" Type="Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory&lt;TUser&gt;" Index="2" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2" />
        <Parameter Name="optionsAccessor" Type="Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Identity.IdentityOptions&gt;" Index="3" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger&lt;Microsoft.AspNetCore.Identity.SignInManager&lt;TUser&gt;&gt;" Index="4" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2" />
        <Parameter Name="schemes" Type="Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider" Index="5" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2" />
      </Parameters>
      <Docs>
        <param name="userManager">An instance of <see cref="P:Microsoft.AspNetCore.Identity.SignInManager`1.UserManager" /> used to retrieve users from and persist users.</param>
        <param name="contextAccessor">The accessor used to access the <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />.</param>
        <param name="claimsFactory">The factory to use to create claims principals for a user.</param>
        <param name="optionsAccessor">The accessor used to access the <see cref="T:Microsoft.AspNetCore.Identity.IdentityOptions" />.</param>
        <param name="logger">The logger used to log messages, warnings and errors.</param>
        <param name="schemes">The scheme provider that is used enumerate the authentication schemes.</param>
        <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Identity.SignInManager`1" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SignInManager(Microsoft::AspNetCore::Identity::UserManager&lt;TUser&gt; ^ userManager, Microsoft::AspNetCore::Http::IHttpContextAccessor ^ contextAccessor, Microsoft::AspNetCore::Identity::IUserClaimsPrincipalFactory&lt;TUser&gt; ^ claimsFactory, Microsoft::Extensions::Options::IOptions&lt;Microsoft::AspNetCore::Identity::IdentityOptions ^&gt; ^ optionsAccessor, Microsoft::Extensions::Logging::ILogger&lt;Microsoft::AspNetCore::Identity::SignInManager&lt;TUser&gt; ^&gt; ^ logger, Microsoft::AspNetCore::Authentication::IAuthenticationSchemeProvider ^ schemes, Microsoft::AspNetCore::Identity::IUserConfirmation&lt;TUser&gt; ^ confirmation);" />
      <MemberSignature Language="C#" Value="public SignInManager (Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt; userManager, Microsoft.AspNetCore.Http.IHttpContextAccessor contextAccessor, Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory&lt;TUser&gt; claimsFactory, Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Identity.IdentityOptions&gt; optionsAccessor, Microsoft.Extensions.Logging.ILogger&lt;Microsoft.AspNetCore.Identity.SignInManager&lt;TUser&gt;&gt; logger, Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider schemes, Microsoft.AspNetCore.Identity.IUserConfirmation&lt;TUser&gt; confirmation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Identity.UserManager`1&lt;!TUser&gt; userManager, class Microsoft.AspNetCore.Http.IHttpContextAccessor contextAccessor, class Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1&lt;!TUser&gt; claimsFactory, class Microsoft.Extensions.Options.IOptions`1&lt;class Microsoft.AspNetCore.Identity.IdentityOptions&gt; optionsAccessor, class Microsoft.Extensions.Logging.ILogger`1&lt;class Microsoft.AspNetCore.Identity.SignInManager`1&lt;!TUser&gt;&gt; logger, class Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider schemes, class Microsoft.AspNetCore.Identity.IUserConfirmation`1&lt;!TUser&gt; confirmation) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.#ctor(Microsoft.AspNetCore.Identity.UserManager{`0},Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory{`0},Microsoft.Extensions.Options.IOptions{Microsoft.AspNetCore.Identity.IdentityOptions},Microsoft.Extensions.Logging.ILogger{Microsoft.AspNetCore.Identity.SignInManager{`0}},Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider,Microsoft.AspNetCore.Identity.IUserConfirmation{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (userManager As UserManager(Of TUser), contextAccessor As IHttpContextAccessor, claimsFactory As IUserClaimsPrincipalFactory(Of TUser), optionsAccessor As IOptions(Of IdentityOptions), logger As ILogger(Of SignInManager(Of TUser)), schemes As IAuthenticationSchemeProvider, confirmation As IUserConfirmation(Of TUser))" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt; : Microsoft.AspNetCore.Identity.UserManager&lt;'User (requires 'User : null)&gt; * Microsoft.AspNetCore.Http.IHttpContextAccessor * Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory&lt;'User (requires 'User : null)&gt; * Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Identity.IdentityOptions&gt; * Microsoft.Extensions.Logging.ILogger&lt;Microsoft.AspNetCore.Identity.SignInManager&lt;'User&gt;&gt; * Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider * Microsoft.AspNetCore.Identity.IUserConfirmation&lt;'User (requires 'User : null)&gt; -&gt; Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt;" Usage="new Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt; (userManager, contextAccessor, claimsFactory, optionsAccessor, logger, schemes, confirmation)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="userManager" Type="Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt;" Index="0" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="contextAccessor" Type="Microsoft.AspNetCore.Http.IHttpContextAccessor" Index="1" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="claimsFactory" Type="Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory&lt;TUser&gt;" Index="2" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="optionsAccessor" Type="Microsoft.Extensions.Options.IOptions&lt;Microsoft.AspNetCore.Identity.IdentityOptions&gt;" Index="3" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger&lt;Microsoft.AspNetCore.Identity.SignInManager&lt;TUser&gt;&gt;" Index="4" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="schemes" Type="Microsoft.AspNetCore.Authentication.IAuthenticationSchemeProvider" Index="5" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="confirmation" Type="Microsoft.AspNetCore.Identity.IUserConfirmation&lt;TUser&gt;" Index="6" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="userManager">An instance of <see cref="P:Microsoft.AspNetCore.Identity.SignInManager`1.UserManager" /> used to retrieve users from and persist users.</param>
        <param name="contextAccessor">The accessor used to access the <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />.</param>
        <param name="claimsFactory">The factory to use to create claims principals for a user.</param>
        <param name="optionsAccessor">The accessor used to access the <see cref="T:Microsoft.AspNetCore.Identity.IdentityOptions" />.</param>
        <param name="logger">The logger used to log messages, warnings and errors.</param>
        <param name="schemes">The scheme provider that is used enumerate the authentication schemes.</param>
        <param name="confirmation">The <see cref="T:Microsoft.AspNetCore.Identity.IUserConfirmation`1" /> used check whether a user account is confirmed.</param>
        <summary>
            Creates a new instance of <see cref="T:Microsoft.AspNetCore.Identity.SignInManager`1" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSignInAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;bool&gt; ^ CanSignInAsync(TUser user);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; CanSignInAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; CanSignInAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.CanSignInAsync(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanSignInAsync (user As TUser) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CanSignInAsync : 'User -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.CanSignInAsync : 'User -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="signInManager.CanSignInAsync user" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user whose sign-in status should be returned.</param>
        <summary>
            Returns a flag indicating whether the specified user can sign in.
            </summary>
        <returns>
            The task object representing the asynchronous operation, containing a flag that is true
            if the specified user can sign-in, otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckPasswordSignInAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Identity::SignInResult ^&gt; ^ CheckPasswordSignInAsync(TUser user, System::String ^ password, bool lockoutOnFailure);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt; CheckPasswordSignInAsync (TUser user, string password, bool lockoutOnFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.SignInResult&gt; CheckPasswordSignInAsync(!TUser user, string password, bool lockoutOnFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.CheckPasswordSignInAsync(`0,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckPasswordSignInAsync (user As TUser, password As String, lockoutOnFailure As Boolean) As Task(Of SignInResult)" />
      <MemberSignature Language="F#" Value="abstract member CheckPasswordSignInAsync : 'User * string * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;&#xA;override this.CheckPasswordSignInAsync : 'User * string * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;" Usage="signInManager.CheckPasswordSignInAsync (user, password, lockoutOnFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="password" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="lockoutOnFailure" Type="System.Boolean" Index="2" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="user">The user to sign in.</param>
        <param name="password">The password to attempt to sign in with.</param>
        <param name="lockoutOnFailure">Flag indicating if the user account should be locked if the sign in fails.</param>
        <summary>
            Attempts a password sign in for a user.
            </summary>
        <returns>The task object representing the asynchronous operation containing the <see name="SignInResult" />
            for the sign-in attempt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClaimsFactory">
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property Microsoft::AspNetCore::Identity::IUserClaimsPrincipalFactory&lt;TUser&gt; ^ ClaimsFactory { Microsoft::AspNetCore::Identity::IUserClaimsPrincipalFactory&lt;TUser&gt; ^ get(); void set(Microsoft::AspNetCore::Identity::IUserClaimsPrincipalFactory&lt;TUser&gt; ^ value); };" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::AspNetCore::Identity::IUserClaimsPrincipalFactory&lt;TUser&gt; ^ ClaimsFactory { Microsoft::AspNetCore::Identity::IUserClaimsPrincipalFactory&lt;TUser&gt; ^ get(); void set(Microsoft::AspNetCore::Identity::IUserClaimsPrincipalFactory&lt;TUser&gt; ^ value); };" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="C#" Value="protected internal Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory&lt;TUser&gt; ClaimsFactory { get; set; }" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1&lt;!TUser&gt; ClaimsFactory" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.SignInManager`1.ClaimsFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property ClaimsFactory As IUserClaimsPrincipalFactory(Of TUser)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="member this.ClaimsFactory : Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory&lt;'User (requires 'User : null)&gt; with get, set" Usage="Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt;.ClaimsFactory" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory&lt;TUser&gt; ClaimsFactory { get; set; }" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Property ClaimsFactory As IUserClaimsPrincipalFactory(Of TUser)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1" /> used.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureExternalAuthenticationProperties">
      <MemberSignature Language="C#" Value="public virtual Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties ConfigureExternalAuthenticationProperties (string provider, string redirectUrl, string userId = default);" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties ConfigureExternalAuthenticationProperties(string provider, string redirectUrl, string userId) cil managed" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.ConfigureExternalAuthenticationProperties(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConfigureExternalAuthenticationProperties (provider As String, redirectUrl As String, Optional userId As String = Nothing) As AuthenticationProperties" />
      <MemberSignature Language="F#" Value="abstract member ConfigureExternalAuthenticationProperties : string * string * string -&gt; Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties&#xA;override this.ConfigureExternalAuthenticationProperties : string * string * string -&gt; Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties" Usage="signInManager.ConfigureExternalAuthenticationProperties (provider, redirectUrl, userId)" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.AspNetCore.Authentication.AuthenticationProperties ConfigureExternalAuthenticationProperties (string provider, string redirectUrl, string userId = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.AspNetCore.Authentication.AuthenticationProperties ConfigureExternalAuthenticationProperties(string provider, string redirectUrl, string userId) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member ConfigureExternalAuthenticationProperties : string * string * string -&gt; Microsoft.AspNetCore.Authentication.AuthenticationProperties&#xA;override this.ConfigureExternalAuthenticationProperties : string * string * string -&gt; Microsoft.AspNetCore.Authentication.AuthenticationProperties" Usage="signInManager.ConfigureExternalAuthenticationProperties (provider, redirectUrl, userId)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.AspNetCore.Authentication.AuthenticationProperties ConfigureExternalAuthenticationProperties (string? provider, string? redirectUrl, string? userId = default);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1">Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties</ReturnType>
        <ReturnType FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">Microsoft.AspNetCore.Authentication.AuthenticationProperties</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="redirectUrl" Type="System.String">
          <Attributes>
            <Attribute FrameworkAlternate="aspnetcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.StringSyntax("Uri")]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.StringSyntax("Uri")&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="userId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to configure.</param>
        <param name="redirectUrl">The external login URL users should be redirected to during the login flow.</param>
        <param name="userId">The current user's identifier, which will be used to provide CSRF protection.</param>
        <summary>
            Configures the redirect URL and user identifier for the specified external login <paramref name="provider" />.
            </summary>
        <returns>A configured <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationProperties" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property Microsoft::AspNetCore::Http::HttpContext ^ Context { Microsoft::AspNetCore::Http::HttpContext ^ get(); void set(Microsoft::AspNetCore::Http::HttpContext ^ value); };" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::AspNetCore::Http::HttpContext ^ Context { Microsoft::AspNetCore::Http::HttpContext ^ get(); void set(Microsoft::AspNetCore::Http::HttpContext ^ value); };" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="C#" Value="protected internal Microsoft.AspNetCore.Http.HttpContext Context { get; set; }" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Http.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.SignInManager`1.Context" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property Context As HttpContext" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="member this.Context : Microsoft.AspNetCore.Http.HttpContext with get, set" Usage="Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt;.Context" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Http.HttpContext Context { get; set; }" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Property Context As HttpContext" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Http.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> used.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserPrincipalAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Security::Claims::ClaimsPrincipal ^&gt; ^ CreateUserPrincipalAsync(TUser user);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Security.Claims.ClaimsPrincipal&gt; CreateUserPrincipalAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Security.Claims.ClaimsPrincipal&gt; CreateUserPrincipalAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.CreateUserPrincipalAsync(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateUserPrincipalAsync (user As TUser) As Task(Of ClaimsPrincipal)" />
      <MemberSignature Language="F#" Value="abstract member CreateUserPrincipalAsync : 'User -&gt; System.Threading.Tasks.Task&lt;System.Security.Claims.ClaimsPrincipal&gt;&#xA;override this.CreateUserPrincipalAsync : 'User -&gt; System.Threading.Tasks.Task&lt;System.Security.Claims.ClaimsPrincipal&gt;" Usage="signInManager.CreateUserPrincipalAsync user" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Security.Claims.ClaimsPrincipal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user to create a <see cref="T:System.Security.Claims.ClaimsPrincipal" /> for.</param>
        <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsPrincipal" /> for the specified <paramref name="user" />, as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation, containing the ClaimsPrincipal for the specified user.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternalLoginSignInAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Identity::SignInResult ^&gt; ^ ExternalLoginSignInAsync(System::String ^ loginProvider, System::String ^ providerKey, bool isPersistent);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt; ExternalLoginSignInAsync (string loginProvider, string providerKey, bool isPersistent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.SignInResult&gt; ExternalLoginSignInAsync(string loginProvider, string providerKey, bool isPersistent) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.ExternalLoginSignInAsync(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExternalLoginSignInAsync (loginProvider As String, providerKey As String, isPersistent As Boolean) As Task(Of SignInResult)" />
      <MemberSignature Language="F#" Value="abstract member ExternalLoginSignInAsync : string * string * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;&#xA;override this.ExternalLoginSignInAsync : string * string * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;" Usage="signInManager.ExternalLoginSignInAsync (loginProvider, providerKey, isPersistent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loginProvider" Type="System.String" />
        <Parameter Name="providerKey" Type="System.String" />
        <Parameter Name="isPersistent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="loginProvider">The login provider to use.</param>
        <param name="providerKey">The unique provider identifier for the user.</param>
        <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
        <summary>
            Signs in a user via a previously registered third party login, as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation containing the <see name="SignInResult" />
            for the sign-in attempt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternalLoginSignInAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Identity::SignInResult ^&gt; ^ ExternalLoginSignInAsync(System::String ^ loginProvider, System::String ^ providerKey, bool isPersistent, bool bypassTwoFactor);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt; ExternalLoginSignInAsync (string loginProvider, string providerKey, bool isPersistent, bool bypassTwoFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.SignInResult&gt; ExternalLoginSignInAsync(string loginProvider, string providerKey, bool isPersistent, bool bypassTwoFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.ExternalLoginSignInAsync(System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ExternalLoginSignInAsync (loginProvider As String, providerKey As String, isPersistent As Boolean, bypassTwoFactor As Boolean) As Task(Of SignInResult)" />
      <MemberSignature Language="F#" Value="abstract member ExternalLoginSignInAsync : string * string * bool * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;&#xA;override this.ExternalLoginSignInAsync : string * string * bool * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;" Usage="signInManager.ExternalLoginSignInAsync (loginProvider, providerKey, isPersistent, bypassTwoFactor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loginProvider" Type="System.String" Index="0" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="providerKey" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="isPersistent" Type="System.Boolean" Index="2" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="bypassTwoFactor" Type="System.Boolean" Index="3" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="loginProvider">The login provider to use.</param>
        <param name="providerKey">The unique provider identifier for the user.</param>
        <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
        <param name="bypassTwoFactor">Flag indicating whether to bypass two factor authentication.</param>
        <summary>
            Signs in a user via a previously registered third party login, as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation containing the <see name="SignInResult" />
            for the sign-in attempt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForgetTwoFactorClientAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ ForgetTwoFactorClientAsync();" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ForgetTwoFactorClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ForgetTwoFactorClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.ForgetTwoFactorClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ForgetTwoFactorClientAsync () As Task" />
      <MemberSignature Language="F#" Value="abstract member ForgetTwoFactorClientAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.ForgetTwoFactorClientAsync : unit -&gt; System.Threading.Tasks.Task" Usage="signInManager.ForgetTwoFactorClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Clears the "Remember this browser flag" from the current browser, as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExternalAuthenticationSchemes">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Microsoft::AspNetCore::Http::Authentication::AuthenticationDescription ^&gt; ^ GetExternalAuthenticationSchemes();" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription&gt; GetExternalAuthenticationSchemes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription&gt; GetExternalAuthenticationSchemes() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.GetExternalAuthenticationSchemes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExternalAuthenticationSchemes () As IEnumerable(Of AuthenticationDescription)" />
      <MemberSignature Language="F#" Value="abstract member GetExternalAuthenticationSchemes : unit -&gt; seq&lt;Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription&gt;&#xA;override this.GetExternalAuthenticationSchemes : unit -&gt; seq&lt;Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription&gt;" Usage="signInManager.GetExternalAuthenticationSchemes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a collection of <see cref="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription" />s for the known external login providers.
            </summary>
        <returns>A collection of <see cref="T:Microsoft.AspNetCore.Http.Authentication.AuthenticationDescription" />s for the known external login providers.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExternalAuthenticationSchemesAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Collections::Generic::IEnumerable&lt;Microsoft::AspNetCore::Authentication::AuthenticationScheme ^&gt; ^&gt; ^ GetExternalAuthenticationSchemesAsync();" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Authentication.AuthenticationScheme&gt;&gt; GetExternalAuthenticationSchemesAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.AspNetCore.Authentication.AuthenticationScheme&gt;&gt; GetExternalAuthenticationSchemesAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.GetExternalAuthenticationSchemesAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExternalAuthenticationSchemesAsync () As Task(Of IEnumerable(Of AuthenticationScheme))" />
      <MemberSignature Language="F#" Value="abstract member GetExternalAuthenticationSchemesAsync : unit -&gt; System.Threading.Tasks.Task&lt;seq&lt;Microsoft.AspNetCore.Authentication.AuthenticationScheme&gt;&gt;&#xA;override this.GetExternalAuthenticationSchemesAsync : unit -&gt; System.Threading.Tasks.Task&lt;seq&lt;Microsoft.AspNetCore.Authentication.AuthenticationScheme&gt;&gt;" Usage="signInManager.GetExternalAuthenticationSchemesAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.AspNetCore.Authentication.AuthenticationScheme&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets a collection of <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationScheme" />s for the known external login providers.
            </summary>
        <returns>A collection of <see cref="T:Microsoft.AspNetCore.Authentication.AuthenticationScheme" />s for the known external login providers.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExternalLoginInfoAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.ExternalLoginInfo&gt; GetExternalLoginInfoAsync (string expectedXsrf = default);" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.ExternalLoginInfo&gt; GetExternalLoginInfoAsync(string expectedXsrf) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.GetExternalLoginInfoAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExternalLoginInfoAsync (Optional expectedXsrf As String = Nothing) As Task(Of ExternalLoginInfo)" />
      <MemberSignature Language="F#" Value="abstract member GetExternalLoginInfoAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.ExternalLoginInfo&gt;&#xA;override this.GetExternalLoginInfoAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.ExternalLoginInfo&gt;" Usage="signInManager.GetExternalLoginInfoAsync expectedXsrf" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.ExternalLoginInfo?&gt; GetExternalLoginInfoAsync (string? expectedXsrf = default);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.ExternalLoginInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expectedXsrf" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expectedXsrf">Flag indication whether a Cross Site Request Forgery token was expected in the current request.</param>
        <summary>
            Gets the external login information for the current login, as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation containing the <see name="ExternalLoginInfo" />
            for the sign-in attempt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTwoFactorAuthenticationUserAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;TUser&gt; ^ GetTwoFactorAuthenticationUserAsync();" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser&gt; GetTwoFactorAuthenticationUserAsync ();" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; GetTwoFactorAuthenticationUserAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.GetTwoFactorAuthenticationUserAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTwoFactorAuthenticationUserAsync () As Task(Of TUser)" />
      <MemberSignature Language="F#" Value="abstract member GetTwoFactorAuthenticationUserAsync : unit -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User : null)&gt;&#xA;override this.GetTwoFactorAuthenticationUserAsync : unit -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User : null)&gt;" Usage="signInManager.GetTwoFactorAuthenticationUserAsync " />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser?&gt; GetTwoFactorAuthenticationUserAsync ();" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Gets the <typeparamref name="TUser" /> for the current two factor authentication login, as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation containing the <typeparamref name="TUser" />
            for the sign-in attempt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLockedOut">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Threading::Tasks::Task&lt;bool&gt; ^ IsLockedOut(TUser user);" />
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;bool&gt; IsLockedOut (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; IsLockedOut(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.IsLockedOut(`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsLockedOut (user As TUser) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member IsLockedOut : 'User -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.IsLockedOut : 'User -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="signInManager.IsLockedOut user" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="user">The user.</param>
        <summary>
            Used to determine if a user is considered locked out.
            </summary>
        <returns>Whether a user is considered locked out.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSignedIn">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSignedIn(System::Security::Claims::ClaimsPrincipal ^ principal);" />
      <MemberSignature Language="C#" Value="public virtual bool IsSignedIn (System.Security.Claims.ClaimsPrincipal principal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSignedIn(class System.Security.Claims.ClaimsPrincipal principal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.IsSignedIn(System.Security.Claims.ClaimsPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSignedIn (principal As ClaimsPrincipal) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member IsSignedIn : System.Security.Claims.ClaimsPrincipal -&gt; bool&#xA;override this.IsSignedIn : System.Security.Claims.ClaimsPrincipal -&gt; bool" Usage="signInManager.IsSignedIn principal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal" /> instance.</param>
        <summary>
            Returns true if the principal has an identity with the application cookie identity
            </summary>
        <returns>True if the user is logged in with identity.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTwoFactorClientRememberedAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;bool&gt; ^ IsTwoFactorClientRememberedAsync(TUser user);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; IsTwoFactorClientRememberedAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; IsTwoFactorClientRememberedAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.IsTwoFactorClientRememberedAsync(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsTwoFactorClientRememberedAsync (user As TUser) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member IsTwoFactorClientRememberedAsync : 'User -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.IsTwoFactorClientRememberedAsync : 'User -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="signInManager.IsTwoFactorClientRememberedAsync user" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user attempting to login.</param>
        <summary>
            Returns a flag indicating if the current client browser has been remembered by two factor authentication
            for the user attempting to login, as an asynchronous operation.
            </summary>
        <returns>
            The task object representing the asynchronous operation containing true if the browser has been remembered
            for the current user.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTwoFactorEnabledAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; IsTwoFactorEnabledAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; IsTwoFactorEnabledAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.IsTwoFactorEnabledAsync(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsTwoFactorEnabledAsync (user As TUser) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member IsTwoFactorEnabledAsync : 'User -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.IsTwoFactorEnabledAsync : 'User -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="signInManager.IsTwoFactorEnabledAsync user" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="user" />
        <summary>
            Check if the <paramref name="user" /> has two factor enabled.
            </summary>
        <returns>
            The task object representing the asynchronous operation containing true if the user has two factor enabled.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LockedOut">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Identity::SignInResult ^&gt; ^ LockedOut(TUser user);" />
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt; LockedOut (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.SignInResult&gt; LockedOut(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.LockedOut(`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LockedOut (user As TUser) As Task(Of SignInResult)" />
      <MemberSignature Language="F#" Value="abstract member LockedOut : 'User -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;&#xA;override this.LockedOut : 'User -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;" Usage="signInManager.LockedOut user" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="user">The user.</param>
        <summary>
            Returns a locked out SignInResult.
            </summary>
        <returns>A locked out SignInResult</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Logger">
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property Microsoft::Extensions::Logging::ILogger ^ Logger { Microsoft::Extensions::Logging::ILogger ^ get(); void set(Microsoft::Extensions::Logging::ILogger ^ value); };" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Microsoft::Extensions::Logging::ILogger ^ Logger { Microsoft::Extensions::Logging::ILogger ^ get(); void set(Microsoft::Extensions::Logging::ILogger ^ value); };" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="C#" Value="protected internal virtual Microsoft.Extensions.Logging.ILogger Logger { get; set; }" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Extensions.Logging.ILogger Logger" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.SignInManager`1.Logger" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Property Logger As ILogger" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="member this.Logger : Microsoft.Extensions.Logging.ILogger with get, set" Usage="Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt;.Logger" />
      <MemberSignature Language="C#" Value="public virtual Microsoft.Extensions.Logging.ILogger Logger { get; set; }" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Logger As ILogger" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Logging.ILogger</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger" /> used to log messages from the manager.
            </summary>
        <value>
            The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> used to log messages from the manager.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property Microsoft::AspNetCore::Builder::IdentityOptions ^ Options { Microsoft::AspNetCore::Builder::IdentityOptions ^ get(); void set(Microsoft::AspNetCore::Builder::IdentityOptions ^ value); };" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::AspNetCore::Identity::IdentityOptions ^ Options { Microsoft::AspNetCore::Identity::IdentityOptions ^ get(); void set(Microsoft::AspNetCore::Identity::IdentityOptions ^ value); };" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="C#" Value="protected internal Microsoft.AspNetCore.Builder.IdentityOptions Options { get; set; }" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Builder.IdentityOptions Options" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.SignInManager`1.Options" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property Options As IdentityOptions" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="member this.Options : Microsoft.AspNetCore.Builder.IdentityOptions with get, set" Usage="Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt;.Options" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Identity.IdentityOptions Options { get; set; }" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Identity.IdentityOptions Options" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As IdentityOptions" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="member this.Options : Microsoft.AspNetCore.Identity.IdentityOptions with get, set" Usage="Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt;.Options" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="aspnetcore-1.1">Microsoft.AspNetCore.Builder.IdentityOptions</ReturnType>
        <ReturnType FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">Microsoft.AspNetCore.Identity.IdentityOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.IdentityOptions" /> used.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordSignInAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Identity::SignInResult ^&gt; ^ PasswordSignInAsync(System::String ^ userName, System::String ^ password, bool isPersistent, bool lockoutOnFailure);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt; PasswordSignInAsync (string userName, string password, bool isPersistent, bool lockoutOnFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.SignInResult&gt; PasswordSignInAsync(string userName, string password, bool isPersistent, bool lockoutOnFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.PasswordSignInAsync(System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PasswordSignInAsync (userName As String, password As String, isPersistent As Boolean, lockoutOnFailure As Boolean) As Task(Of SignInResult)" />
      <MemberSignature Language="F#" Value="abstract member PasswordSignInAsync : string * string * bool * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;&#xA;override this.PasswordSignInAsync : string * string * bool * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;" Usage="signInManager.PasswordSignInAsync (userName, password, isPersistent, lockoutOnFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="isPersistent" Type="System.Boolean" />
        <Parameter Name="lockoutOnFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="userName">The user name to sign in.</param>
        <param name="password">The password to attempt to sign in with.</param>
        <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
        <param name="lockoutOnFailure">Flag indicating if the user account should be locked if the sign in fails.</param>
        <summary>
            Attempts to sign in the specified <paramref name="userName" /> and <paramref name="password" /> combination
            as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation containing the <see name="SignInResult" />
            for the sign-in attempt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordSignInAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Identity::SignInResult ^&gt; ^ PasswordSignInAsync(TUser user, System::String ^ password, bool isPersistent, bool lockoutOnFailure);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt; PasswordSignInAsync (TUser user, string password, bool isPersistent, bool lockoutOnFailure);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.SignInResult&gt; PasswordSignInAsync(!TUser user, string password, bool isPersistent, bool lockoutOnFailure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.PasswordSignInAsync(`0,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PasswordSignInAsync (user As TUser, password As String, isPersistent As Boolean, lockoutOnFailure As Boolean) As Task(Of SignInResult)" />
      <MemberSignature Language="F#" Value="abstract member PasswordSignInAsync : 'User * string * bool * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;&#xA;override this.PasswordSignInAsync : 'User * string * bool * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;" Usage="signInManager.PasswordSignInAsync (user, password, isPersistent, lockoutOnFailure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="isPersistent" Type="System.Boolean" />
        <Parameter Name="lockoutOnFailure" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="user">The user to sign in.</param>
        <param name="password">The password to attempt to sign in with.</param>
        <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
        <param name="lockoutOnFailure">Flag indicating if the user account should be locked if the sign in fails.</param>
        <summary>
            Attempts to sign in the specified <paramref name="user" /> and <paramref name="password" /> combination
            as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation containing the <see name="SignInResult" />
            for the sign-in attempt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreSignInCheck">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Identity::SignInResult ^&gt; ^ PreSignInCheck(TUser user);" />
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt; PreSignInCheck (TUser user);" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.SignInResult&gt; PreSignInCheck(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.PreSignInCheck(`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function PreSignInCheck (user As TUser) As Task(Of SignInResult)" />
      <MemberSignature Language="F#" Value="abstract member PreSignInCheck : 'User -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;&#xA;override this.PreSignInCheck : 'User -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;" Usage="signInManager.PreSignInCheck user" />
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult?&gt; PreSignInCheck (TUser user);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="user">The user</param>
        <summary>
            Used to ensure that a user is allowed to sign in.
            </summary>
        <returns>Null if the user should be allowed to sign in, otherwise the SignInResult why they should be denied.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryAuthenticationScheme">
      <MemberSignature Language="C#" Value="public string PrimaryAuthenticationScheme { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PrimaryAuthenticationScheme" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.SignInManager`1.PrimaryAuthenticationScheme" />
      <MemberSignature Language="VB.NET" Value="Public Property PrimaryAuthenticationScheme As String" />
      <MemberSignature Language="F#" Value="member this.PrimaryAuthenticationScheme : string with get, set" Usage="Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt;.PrimaryAuthenticationScheme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The authentication scheme to sign in with. Defaults to <see cref="F:Microsoft.AspNetCore.Identity.IdentityConstants.ApplicationScheme" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshSignInAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ RefreshSignInAsync(TUser user);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RefreshSignInAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RefreshSignInAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.RefreshSignInAsync(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RefreshSignInAsync (user As TUser) As Task" />
      <MemberSignature Language="F#" Value="abstract member RefreshSignInAsync : 'User -&gt; System.Threading.Tasks.Task&#xA;override this.RefreshSignInAsync : 'User -&gt; System.Threading.Tasks.Task" Usage="signInManager.RefreshSignInAsync user" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user to sign-in.</param>
        <summary>
            Signs in the specified <paramref name="user" />, whilst preserving the existing
            AuthenticationProperties of the current signed-in user like rememberMe, as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RememberTwoFactorClientAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ RememberTwoFactorClientAsync(TUser user);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RememberTwoFactorClientAsync (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RememberTwoFactorClientAsync(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.RememberTwoFactorClientAsync(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RememberTwoFactorClientAsync (user As TUser) As Task" />
      <MemberSignature Language="F#" Value="abstract member RememberTwoFactorClientAsync : 'User -&gt; System.Threading.Tasks.Task&#xA;override this.RememberTwoFactorClientAsync : 'User -&gt; System.Threading.Tasks.Task" Usage="signInManager.RememberTwoFactorClientAsync user" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
      </Parameters>
      <Docs>
        <param name="user">The user who choose "remember this browser".</param>
        <summary>
            Sets a flag on the browser to indicate the user has selected "Remember this browser" for two factor authentication purposes,
            as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetLockout">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Threading::Tasks::Task ^ ResetLockout(TUser user);" />
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task ResetLockout (TUser user);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task ResetLockout(!TUser user) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.ResetLockout(`0)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ResetLockout (user As TUser) As Task" />
      <MemberSignature Language="F#" Value="abstract member ResetLockout : 'User -&gt; System.Threading.Tasks.Task&#xA;override this.ResetLockout : 'User -&gt; System.Threading.Tasks.Task" Usage="signInManager.ResetLockout user" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="user">The user</param>
        <summary>
            Used to reset a user's lockout count.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignInAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SignInAsync (TUser user, Microsoft.AspNetCore.Authentication.AuthenticationProperties authenticationProperties, string authenticationMethod = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SignInAsync(!TUser user, class Microsoft.AspNetCore.Authentication.AuthenticationProperties authenticationProperties, string authenticationMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.SignInAsync(`0,Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignInAsync (user As TUser, authenticationProperties As AuthenticationProperties, Optional authenticationMethod As String = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SignInAsync : 'User * Microsoft.AspNetCore.Authentication.AuthenticationProperties * string -&gt; System.Threading.Tasks.Task&#xA;override this.SignInAsync : 'User * Microsoft.AspNetCore.Authentication.AuthenticationProperties * string -&gt; System.Threading.Tasks.Task" Usage="signInManager.SignInAsync (user, authenticationProperties, authenticationMethod)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SignInAsync (TUser user, Microsoft.AspNetCore.Authentication.AuthenticationProperties authenticationProperties, string? authenticationMethod = default);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="authenticationProperties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="authenticationMethod" Type="System.String" Index="2" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="user">The user to sign-in.</param>
        <param name="authenticationProperties">Properties applied to the login and authentication cookie.</param>
        <param name="authenticationMethod">Name of the method used to authenticate the user.</param>
        <summary>
            Signs in the specified <paramref name="user" />.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignInAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SignInAsync (TUser user, Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties authenticationProperties, string authenticationMethod = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SignInAsync(!TUser user, class Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties authenticationProperties, string authenticationMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.SignInAsync(`0,Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignInAsync (user As TUser, authenticationProperties As AuthenticationProperties, Optional authenticationMethod As String = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SignInAsync : 'User * Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties * string -&gt; System.Threading.Tasks.Task&#xA;override this.SignInAsync : 'User * Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties * string -&gt; System.Threading.Tasks.Task" Usage="signInManager.SignInAsync (user, authenticationProperties, authenticationMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
        <Parameter Name="authenticationProperties" Type="Microsoft.AspNetCore.Http.Authentication.AuthenticationProperties" Index="1" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
        <Parameter Name="authenticationMethod" Type="System.String" Index="2" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user to sign-in.</param>
        <param name="authenticationProperties">Properties applied to the login and authentication cookie.</param>
        <param name="authenticationMethod">Name of the method used to authenticate the user.</param>
        <summary>
            Signs in the specified <paramref name="user" />.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignInAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SignInAsync (TUser user, bool isPersistent, string authenticationMethod = default);" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SignInAsync(!TUser user, bool isPersistent, string authenticationMethod) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.SignInAsync(`0,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignInAsync (user As TUser, isPersistent As Boolean, Optional authenticationMethod As String = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SignInAsync : 'User * bool * string -&gt; System.Threading.Tasks.Task&#xA;override this.SignInAsync : 'User * bool * string -&gt; System.Threading.Tasks.Task" Usage="signInManager.SignInAsync (user, isPersistent, authenticationMethod)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SignInAsync (TUser user, bool isPersistent, string? authenticationMethod = default);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="isPersistent" Type="System.Boolean" />
        <Parameter Name="authenticationMethod" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="user">The user to sign-in.</param>
        <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
        <param name="authenticationMethod">Name of the method used to authenticate the user.</param>
        <summary>
            Signs in the specified <paramref name="user" />.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignInOrTwoFactorAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt; SignInOrTwoFactorAsync (TUser user, bool isPersistent, string loginProvider = default, bool bypassTwoFactor = false);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.SignInResult&gt; SignInOrTwoFactorAsync(!TUser user, bool isPersistent, string loginProvider, bool bypassTwoFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.SignInOrTwoFactorAsync(`0,System.Boolean,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SignInOrTwoFactorAsync (user As TUser, isPersistent As Boolean, Optional loginProvider As String = Nothing, Optional bypassTwoFactor As Boolean = false) As Task(Of SignInResult)" />
      <MemberSignature Language="F#" Value="abstract member SignInOrTwoFactorAsync : 'User * bool * string * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;&#xA;override this.SignInOrTwoFactorAsync : 'User * bool * string * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;" Usage="signInManager.SignInOrTwoFactorAsync (user, isPersistent, loginProvider, bypassTwoFactor)" />
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt; SignInOrTwoFactorAsync (TUser user, bool isPersistent, string? loginProvider = default, bool bypassTwoFactor = false);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="isPersistent" Type="System.Boolean" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="loginProvider" Type="System.String" Index="2" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="bypassTwoFactor" Type="System.Boolean" Index="3" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="user" />
        <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
        <param name="loginProvider">The login provider to use. Default is null</param>
        <param name="bypassTwoFactor">Flag indicating whether to bypass two factor authentication. Default is false</param>
        <summary>
            Signs in the specified <paramref name="user" /> if <paramref name="bypassTwoFactor" /> is set to false.
            Otherwise stores the <paramref name="user" /> for use after a two factor check.
            </summary>
        <returns>Returns a <see cref="T:Microsoft.AspNetCore.Identity.SignInResult" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignInWithClaimsAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ SignInWithClaimsAsync(TUser user, Microsoft::AspNetCore::Authentication::AuthenticationProperties ^ authenticationProperties, System::Collections::Generic::IEnumerable&lt;System::Security::Claims::Claim ^&gt; ^ additionalClaims);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SignInWithClaimsAsync (TUser user, Microsoft.AspNetCore.Authentication.AuthenticationProperties authenticationProperties, System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; additionalClaims);" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SignInWithClaimsAsync(!TUser user, class Microsoft.AspNetCore.Authentication.AuthenticationProperties authenticationProperties, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; additionalClaims) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.SignInWithClaimsAsync(`0,Microsoft.AspNetCore.Authentication.AuthenticationProperties,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignInWithClaimsAsync (user As TUser, authenticationProperties As AuthenticationProperties, additionalClaims As IEnumerable(Of Claim)) As Task" />
      <MemberSignature Language="F#" Value="abstract member SignInWithClaimsAsync : 'User * Microsoft.AspNetCore.Authentication.AuthenticationProperties * seq&lt;System.Security.Claims.Claim&gt; -&gt; System.Threading.Tasks.Task&#xA;override this.SignInWithClaimsAsync : 'User * Microsoft.AspNetCore.Authentication.AuthenticationProperties * seq&lt;System.Security.Claims.Claim&gt; -&gt; System.Threading.Tasks.Task" Usage="signInManager.SignInWithClaimsAsync (user, authenticationProperties, additionalClaims)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SignInWithClaimsAsync (TUser user, Microsoft.AspNetCore.Authentication.AuthenticationProperties? authenticationProperties, System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; additionalClaims);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="authenticationProperties" Type="Microsoft.AspNetCore.Authentication.AuthenticationProperties" Index="1" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="additionalClaims" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;" Index="2" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="user">The user to sign-in.</param>
        <param name="authenticationProperties">Properties applied to the login and authentication cookie.</param>
        <param name="additionalClaims">Additional claims that will be stored in the cookie.</param>
        <summary>
            Signs in the specified <paramref name="user" />.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignInWithClaimsAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ SignInWithClaimsAsync(TUser user, bool isPersistent, System::Collections::Generic::IEnumerable&lt;System::Security::Claims::Claim ^&gt; ^ additionalClaims);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SignInWithClaimsAsync (TUser user, bool isPersistent, System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; additionalClaims);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SignInWithClaimsAsync(!TUser user, bool isPersistent, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; additionalClaims) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.SignInWithClaimsAsync(`0,System.Boolean,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignInWithClaimsAsync (user As TUser, isPersistent As Boolean, additionalClaims As IEnumerable(Of Claim)) As Task" />
      <MemberSignature Language="F#" Value="abstract member SignInWithClaimsAsync : 'User * bool * seq&lt;System.Security.Claims.Claim&gt; -&gt; System.Threading.Tasks.Task&#xA;override this.SignInWithClaimsAsync : 'User * bool * seq&lt;System.Security.Claims.Claim&gt; -&gt; System.Threading.Tasks.Task" Usage="signInManager.SignInWithClaimsAsync (user, isPersistent, additionalClaims)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="isPersistent" Type="System.Boolean" Index="1" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="additionalClaims" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;" Index="2" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="user">The user to sign-in.</param>
        <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
        <param name="additionalClaims">Additional claims that will be stored in the cookie.</param>
        <summary>
            Signs in the specified <paramref name="user" />.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignOutAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ SignOutAsync();" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SignOutAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SignOutAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.SignOutAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SignOutAsync () As Task" />
      <MemberSignature Language="F#" Value="abstract member SignOutAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.SignOutAsync : unit -&gt; System.Threading.Tasks.Task" Usage="signInManager.SignOutAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Signs the current user out of the application.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TwoFactorAuthenticatorSignInAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Identity::SignInResult ^&gt; ^ TwoFactorAuthenticatorSignInAsync(System::String ^ code, bool isPersistent, bool rememberClient);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt; TwoFactorAuthenticatorSignInAsync (string code, bool isPersistent, bool rememberClient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.SignInResult&gt; TwoFactorAuthenticatorSignInAsync(string code, bool isPersistent, bool rememberClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.TwoFactorAuthenticatorSignInAsync(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TwoFactorAuthenticatorSignInAsync (code As String, isPersistent As Boolean, rememberClient As Boolean) As Task(Of SignInResult)" />
      <MemberSignature Language="F#" Value="abstract member TwoFactorAuthenticatorSignInAsync : string * bool * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;&#xA;override this.TwoFactorAuthenticatorSignInAsync : string * bool * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;" Usage="signInManager.TwoFactorAuthenticatorSignInAsync (code, isPersistent, rememberClient)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.String" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="isPersistent" Type="System.Boolean" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="rememberClient" Type="System.Boolean" Index="2" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="code">The two factor authentication code to validate.</param>
        <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
        <param name="rememberClient">Flag indicating whether the current browser should be remember, suppressing all further
            two factor authentication prompts.</param>
        <summary>
            Validates the sign in code from an authenticator app and creates and signs in the user, as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation containing the <see name="SignInResult" />
            for the sign-in attempt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TwoFactorRecoveryCodeSignInAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Identity::SignInResult ^&gt; ^ TwoFactorRecoveryCodeSignInAsync(System::String ^ recoveryCode);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt; TwoFactorRecoveryCodeSignInAsync (string recoveryCode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.SignInResult&gt; TwoFactorRecoveryCodeSignInAsync(string recoveryCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.TwoFactorRecoveryCodeSignInAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TwoFactorRecoveryCodeSignInAsync (recoveryCode As String) As Task(Of SignInResult)" />
      <MemberSignature Language="F#" Value="abstract member TwoFactorRecoveryCodeSignInAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;&#xA;override this.TwoFactorRecoveryCodeSignInAsync : string -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;" Usage="signInManager.TwoFactorRecoveryCodeSignInAsync recoveryCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recoveryCode" Type="System.String" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="recoveryCode">The two factor recovery code.</param>
        <summary>
            Signs in the user without two factor authentication using a two factor recovery code.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TwoFactorSignInAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Identity::SignInResult ^&gt; ^ TwoFactorSignInAsync(System::String ^ provider, System::String ^ code, bool isPersistent, bool rememberClient);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt; TwoFactorSignInAsync (string provider, string code, bool isPersistent, bool rememberClient);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.SignInResult&gt; TwoFactorSignInAsync(string provider, string code, bool isPersistent, bool rememberClient) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.TwoFactorSignInAsync(System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TwoFactorSignInAsync (provider As String, code As String, isPersistent As Boolean, rememberClient As Boolean) As Task(Of SignInResult)" />
      <MemberSignature Language="F#" Value="abstract member TwoFactorSignInAsync : string * string * bool * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;&#xA;override this.TwoFactorSignInAsync : string * string * bool * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;" Usage="signInManager.TwoFactorSignInAsync (provider, code, isPersistent, rememberClient)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.SignInResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.String" />
        <Parameter Name="code" Type="System.String" />
        <Parameter Name="isPersistent" Type="System.Boolean" />
        <Parameter Name="rememberClient" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="provider">The two factor authentication provider to validate the code against.</param>
        <param name="code">The two factor authentication code to validate.</param>
        <param name="isPersistent">Flag indicating whether the sign-in cookie should persist after the browser is closed.</param>
        <param name="rememberClient">Flag indicating whether the current browser should be remember, suppressing all further
            two factor authentication prompts.</param>
        <summary>
            Validates the two factor sign in code and creates and signs in the user, as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation containing the <see name="SignInResult" />
            for the sign-in attempt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateExternalAuthenticationTokensAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::Identity::IdentityResult ^&gt; ^ UpdateExternalAuthenticationTokensAsync(Microsoft::AspNetCore::Identity::ExternalLoginInfo ^ externalLogin);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; UpdateExternalAuthenticationTokensAsync (Microsoft.AspNetCore.Identity.ExternalLoginInfo externalLogin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; UpdateExternalAuthenticationTokensAsync(class Microsoft.AspNetCore.Identity.ExternalLoginInfo externalLogin) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.UpdateExternalAuthenticationTokensAsync(Microsoft.AspNetCore.Identity.ExternalLoginInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateExternalAuthenticationTokensAsync (externalLogin As ExternalLoginInfo) As Task(Of IdentityResult)" />
      <MemberSignature Language="F#" Value="abstract member UpdateExternalAuthenticationTokensAsync : Microsoft.AspNetCore.Identity.ExternalLoginInfo -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;&#xA;override this.UpdateExternalAuthenticationTokensAsync : Microsoft.AspNetCore.Identity.ExternalLoginInfo -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;" Usage="signInManager.UpdateExternalAuthenticationTokensAsync externalLogin" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="externalLogin" Type="Microsoft.AspNetCore.Identity.ExternalLoginInfo" />
      </Parameters>
      <Docs>
        <param name="externalLogin">The information from the external login provider.</param>
        <summary>
            Stores any authentication tokens found in the external authentication cookie into the associated user.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserManager">
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property Microsoft::AspNetCore::Identity::UserManager&lt;TUser&gt; ^ UserManager { Microsoft::AspNetCore::Identity::UserManager&lt;TUser&gt; ^ get(); void set(Microsoft::AspNetCore::Identity::UserManager&lt;TUser&gt; ^ value); };" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::AspNetCore::Identity::UserManager&lt;TUser&gt; ^ UserManager { Microsoft::AspNetCore::Identity::UserManager&lt;TUser&gt; ^ get(); void set(Microsoft::AspNetCore::Identity::UserManager&lt;TUser&gt; ^ value); };" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="C#" Value="protected internal Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt; UserManager { get; set; }" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Identity.UserManager`1&lt;!TUser&gt; UserManager" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.SignInManager`1.UserManager" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property UserManager As UserManager(Of TUser)" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="member this.UserManager : Microsoft.AspNetCore.Identity.UserManager&lt;'User (requires 'User : null)&gt; with get, set" Usage="Microsoft.AspNetCore.Identity.SignInManager&lt;'User (requires 'User : null)&gt;.UserManager" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt; UserManager { get; set; }" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Property UserManager As UserManager(Of TUser)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Identity.UserManager&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1" /> used.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateSecurityStampAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;TUser&gt; ^ ValidateSecurityStampAsync(System::Security::Claims::ClaimsPrincipal ^ principal);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser&gt; ValidateSecurityStampAsync (System.Security.Claims.ClaimsPrincipal principal);" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; ValidateSecurityStampAsync(class System.Security.Claims.ClaimsPrincipal principal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.ValidateSecurityStampAsync(System.Security.Claims.ClaimsPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateSecurityStampAsync (principal As ClaimsPrincipal) As Task(Of TUser)" />
      <MemberSignature Language="F#" Value="abstract member ValidateSecurityStampAsync : System.Security.Claims.ClaimsPrincipal -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User : null)&gt;&#xA;override this.ValidateSecurityStampAsync : System.Security.Claims.ClaimsPrincipal -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User : null)&gt;" Usage="signInManager.ValidateSecurityStampAsync principal" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser?&gt; ValidateSecurityStampAsync (System.Security.Claims.ClaimsPrincipal? principal);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="principal">The principal whose stamp should be validated.</param>
        <summary>
            Validates the security stamp for the specified <paramref name="principal" /> against
            the persisted stamp for the current user, as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation. The task will contain the <typeparamref name="TUser" />
            if the stamp matches the persisted value, otherwise it will return null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateSecurityStampAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;bool&gt; ^ ValidateSecurityStampAsync(TUser user, System::String ^ securityStamp);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; ValidateSecurityStampAsync (TUser user, string securityStamp);" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ValidateSecurityStampAsync(!TUser user, string securityStamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.ValidateSecurityStampAsync(`0,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateSecurityStampAsync (user As TUser, securityStamp As String) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ValidateSecurityStampAsync : 'User * string -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.ValidateSecurityStampAsync : 'User * string -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="signInManager.ValidateSecurityStampAsync (user, securityStamp)" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; ValidateSecurityStampAsync (TUser? user, string? securityStamp);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="securityStamp" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="user">The user whose stamp should be validated.</param>
        <param name="securityStamp">The expected security stamp value.</param>
        <summary>
            Validates the security stamp for the specified <paramref name="user" />.  If no user is specified, or if the store
            does not support security stamps, validation is considered successful.
            </summary>
        <returns>The result of the validation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateTwoFactorSecurityStampAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;TUser&gt; ^ ValidateTwoFactorSecurityStampAsync(System::Security::Claims::ClaimsPrincipal ^ principal);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser&gt; ValidateTwoFactorSecurityStampAsync (System.Security.Claims.ClaimsPrincipal principal);" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; ValidateTwoFactorSecurityStampAsync(class System.Security.Claims.ClaimsPrincipal principal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.SignInManager`1.ValidateTwoFactorSecurityStampAsync(System.Security.Claims.ClaimsPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ValidateTwoFactorSecurityStampAsync (principal As ClaimsPrincipal) As Task(Of TUser)" />
      <MemberSignature Language="F#" Value="abstract member ValidateTwoFactorSecurityStampAsync : System.Security.Claims.ClaimsPrincipal -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User : null)&gt;&#xA;override this.ValidateTwoFactorSecurityStampAsync : System.Security.Claims.ClaimsPrincipal -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User : null)&gt;" Usage="signInManager.ValidateTwoFactorSecurityStampAsync principal" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser?&gt; ValidateTwoFactorSecurityStampAsync (System.Security.Claims.ClaimsPrincipal? principal);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Diagnostics.DebuggerStepThrough]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerStepThrough&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" Index="0" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="principal">The principal whose stamp should be validated.</param>
        <summary>
            Validates the security stamp for the specified <paramref name="principal" /> from one of
            the two factor principals (remember client or user id) against
            the persisted stamp for the current user, as an asynchronous operation.
            </summary>
        <returns>The task object representing the asynchronous operation. The task will contain the <typeparamref name="TUser" />
            if the stamp matches the persisted value, otherwise it will return null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
