<Type Name="RequestUtilities" FullName="Yarp.ReverseProxy.Forwarder.RequestUtilities">
  <TypeSignature Language="C#" Value="public static class RequestUtilities" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RequestUtilities extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Yarp.ReverseProxy.Forwarder.RequestUtilities" />
  <TypeSignature Language="VB.NET" Value="Public Class RequestUtilities" />
  <TypeSignature Language="F#" Value="type RequestUtilities = class" />
  <AssemblyInfo>
    <AssemblyName>Yarp.ReverseProxy</AssemblyName>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.2.0</AssemblyVersion>
    <AssemblyVersion>2.0.1.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="yarp-2.1;yarp-2.2">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            APIs that can be used when transforming requests.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="MakeDestinationAddress">
      <MemberSignature Language="C#" Value="public static Uri MakeDestinationAddress (string destinationPrefix, Microsoft.AspNetCore.Http.PathString path, Microsoft.AspNetCore.Http.QueryString query);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri MakeDestinationAddress(string destinationPrefix, valuetype Microsoft.AspNetCore.Http.PathString path, valuetype Microsoft.AspNetCore.Http.QueryString query) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Forwarder.RequestUtilities.MakeDestinationAddress(System.String,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDestinationAddress (destinationPrefix As String, path As PathString, query As QueryString) As Uri" />
      <MemberSignature Language="F#" Value="static member MakeDestinationAddress : string * Microsoft.AspNetCore.Http.PathString * Microsoft.AspNetCore.Http.QueryString -&gt; Uri" Usage="Yarp.ReverseProxy.Forwarder.RequestUtilities.MakeDestinationAddress (destinationPrefix, path, query)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destinationPrefix" Type="System.String" />
        <Parameter Name="path" Type="Microsoft.AspNetCore.Http.PathString" />
        <Parameter Name="query" Type="Microsoft.AspNetCore.Http.QueryString" />
      </Parameters>
      <Docs>
        <param name="destinationPrefix">The scheme, host, port, and optional path base for the destination server.
            e.g. "http://example.com:80/path/prefix"</param>
        <param name="path">The path to append.</param>
        <param name="query">The query to append</param>
        <summary>
            Appends the given path and query to the destination prefix while avoiding duplicate '/'.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
