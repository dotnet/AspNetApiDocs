<Type Name="HttpTransformer" FullName="Yarp.ReverseProxy.Forwarder.HttpTransformer">
  <TypeSignature Language="C#" Value="public class HttpTransformer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HttpTransformer extends System.Object" FrameworkAlternate="yarp-1.0" />
  <TypeSignature Language="DocId" Value="T:Yarp.ReverseProxy.Forwarder.HttpTransformer" />
  <TypeSignature Language="VB.NET" Value="Public Class HttpTransformer" />
  <TypeSignature Language="F#" Value="type HttpTransformer = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpTransformer extends System.Object" FrameworkAlternate="yarp-1.1;yarp-2.0;yarp-2.1;yarp-2.2" />
  <AssemblyInfo>
    <AssemblyName>Yarp.ReverseProxy</AssemblyName>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.2.0</AssemblyVersion>
    <AssemblyVersion>2.0.1.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="yarp-2.1;yarp-2.2">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HttpTransformer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Used to create derived instances.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static readonly Yarp.ReverseProxy.Forwarder.HttpTransformer Default;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Yarp.ReverseProxy.Forwarder.HttpTransformer Default" />
      <MemberSignature Language="DocId" Value="F:Yarp.ReverseProxy.Forwarder.HttpTransformer.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Default As HttpTransformer " />
      <MemberSignature Language="F#" Value=" staticval mutable Default : Yarp.ReverseProxy.Forwarder.HttpTransformer" Usage="Yarp.ReverseProxy.Forwarder.HttpTransformer.Default" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Forwarder.HttpTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A default set of transforms that adds X-Forwarded-* headers, removes the original Host value and
            copies all other request and response fields and headers, except for some protocol specific values.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly Yarp.ReverseProxy.Forwarder.HttpTransformer Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Yarp.ReverseProxy.Forwarder.HttpTransformer Empty" />
      <MemberSignature Language="DocId" Value="F:Yarp.ReverseProxy.Forwarder.HttpTransformer.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Empty As HttpTransformer " />
      <MemberSignature Language="F#" Value=" staticval mutable Empty : Yarp.ReverseProxy.Forwarder.HttpTransformer" Usage="Yarp.ReverseProxy.Forwarder.HttpTransformer.Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Forwarder.HttpTransformer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            An empty transformer that copies all request and response fields and headers, except for some
            protocol specific values.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask TransformRequestAsync (Microsoft.AspNetCore.Http.HttpContext httpContext, System.Net.Http.HttpRequestMessage proxyRequest, string destinationPrefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask TransformRequestAsync(class Microsoft.AspNetCore.Http.HttpContext httpContext, class System.Net.Http.HttpRequestMessage proxyRequest, string destinationPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformRequestAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpRequestMessage,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TransformRequestAsync (httpContext As HttpContext, proxyRequest As HttpRequestMessage, destinationPrefix As String) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member TransformRequestAsync : Microsoft.AspNetCore.Http.HttpContext * System.Net.Http.HttpRequestMessage * string -&gt; System.Threading.Tasks.ValueTask&#xA;override this.TransformRequestAsync : Microsoft.AspNetCore.Http.HttpContext * System.Net.Http.HttpRequestMessage * string -&gt; System.Threading.Tasks.ValueTask" Usage="httpTransformer.TransformRequestAsync (httpContext, proxyRequest, destinationPrefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2">
          <AttributeName Language="C#">[System.Obsolete("This overload of TransformRequestAsync is obsolete. Override and use the overload accepting a CancellationToken instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This overload of TransformRequestAsync is obsolete. Override and use the overload accepting a CancellationToken instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" />
        <Parameter Name="proxyRequest" Type="System.Net.Http.HttpRequestMessage" />
        <Parameter Name="destinationPrefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="httpContext">The incoming request.</param>
        <param name="proxyRequest">The outgoing proxy request.</param>
        <param name="destinationPrefix">The uri prefix for the selected destination server which can be used to create the RequestUri.</param>
        <summary>
            A callback that is invoked prior to sending the proxied request. All HttpRequestMessage fields are
            initialized except RequestUri, which will be initialized after the callback if no value is provided.
            See <see cref="M:Yarp.ReverseProxy.Forwarder.RequestUtilities.MakeDestinationAddress(System.String,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString)" /> for constructing a custom request Uri.
            The string parameter represents the destination URI prefix that should be used when constructing the RequestUri.
            The headers are copied by the base implementation, excluding some protocol headers like HTTP/2 pseudo headers (":authority").
            This method may be overridden to conditionally produce a response, such as for error conditions, and prevent the request from
            being proxied. This is indicated by setting the `HttpResponse.StatusCode` to a value other than 200, or calling `HttpResponse.StartAsync()`,
            or writing to the `HttpResponse.Body` or `BodyWriter`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask TransformRequestAsync (Microsoft.AspNetCore.Http.HttpContext httpContext, System.Net.Http.HttpRequestMessage proxyRequest, string destinationPrefix, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask TransformRequestAsync(class Microsoft.AspNetCore.Http.HttpContext httpContext, class System.Net.Http.HttpRequestMessage proxyRequest, string destinationPrefix, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformRequestAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpRequestMessage,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TransformRequestAsync (httpContext As HttpContext, proxyRequest As HttpRequestMessage, destinationPrefix As String, cancellationToken As CancellationToken) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member TransformRequestAsync : Microsoft.AspNetCore.Http.HttpContext * System.Net.Http.HttpRequestMessage * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&#xA;override this.TransformRequestAsync : Microsoft.AspNetCore.Http.HttpContext * System.Net.Http.HttpRequestMessage * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="httpTransformer.TransformRequestAsync (httpContext, proxyRequest, destinationPrefix, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" Index="0" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
        <Parameter Name="proxyRequest" Type="System.Net.Http.HttpRequestMessage" Index="1" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
        <Parameter Name="destinationPrefix" Type="System.String" Index="2" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
      </Parameters>
      <Docs>
        <param name="httpContext">The incoming request.</param>
        <param name="proxyRequest">The outgoing proxy request.</param>
        <param name="destinationPrefix">The uri prefix for the selected destination server which can be used to create the RequestUri.</param>
        <param name="cancellationToken">Indicates that the request is being canceled.</param>
        <summary>
            A callback that is invoked prior to sending the proxied request. All HttpRequestMessage fields are
            initialized except RequestUri, which will be initialized after the callback if no value is provided.
            See <see cref="M:Yarp.ReverseProxy.Forwarder.RequestUtilities.MakeDestinationAddress(System.String,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.QueryString)" /> for constructing a custom request Uri.
            The string parameter represents the destination URI prefix that should be used when constructing the RequestUri.
            The headers are copied by the base implementation, excluding some protocol headers like HTTP/2 pseudo headers (":authority").
            This method may be overridden to conditionally produce a response, such as for error conditions, and prevent the request from
            being proxied. This is indicated by setting the `HttpResponse.StatusCode` to a value other than 200, or calling `HttpResponse.StartAsync()`,
            or writing to the `HttpResponse.Body` or `BodyWriter`.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformResponseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;bool&gt; TransformResponseAsync (Microsoft.AspNetCore.Http.HttpContext httpContext, System.Net.Http.HttpResponseMessage? proxyResponse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt; TransformResponseAsync(class Microsoft.AspNetCore.Http.HttpContext httpContext, class System.Net.Http.HttpResponseMessage proxyResponse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformResponseAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpResponseMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TransformResponseAsync (httpContext As HttpContext, proxyResponse As HttpResponseMessage) As ValueTask(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member TransformResponseAsync : Microsoft.AspNetCore.Http.HttpContext * System.Net.Http.HttpResponseMessage -&gt; System.Threading.Tasks.ValueTask&lt;bool&gt;&#xA;override this.TransformResponseAsync : Microsoft.AspNetCore.Http.HttpContext * System.Net.Http.HttpResponseMessage -&gt; System.Threading.Tasks.ValueTask&lt;bool&gt;" Usage="httpTransformer.TransformResponseAsync (httpContext, proxyResponse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2">
          <AttributeName Language="C#">[System.Obsolete("This overload of TransformResponseAsync is obsolete. Override and use the overload accepting a CancellationToken instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This overload of TransformResponseAsync is obsolete. Override and use the overload accepting a CancellationToken instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext">
          <Attributes>
            <Attribute FrameworkAlternate="yarp-2.1;yarp-2.2">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="proxyResponse" Type="System.Net.Http.HttpResponseMessage">
          <Attributes>
            <Attribute FrameworkAlternate="yarp-2.1;yarp-2.2">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="httpContext">The incoming request.</param>
        <param name="proxyResponse">The response from the destination. This can be null if the destination did not respond.</param>
        <summary>
            A callback that is invoked when the proxied response is received. The status code and reason phrase will be copied
            to the HttpContext.Response before the callback is invoked, but may still be modified there. The headers will be
            copied to HttpContext.Response.Headers by the base implementation, excludes certain protocol headers like
            `Transfer-Encoding: chunked`.
            </summary>
        <returns>A bool indicating if the response should be proxied to the client or not. A derived implementation
            that returns false may send an alternate response inline or return control to the caller for it to retry, respond,
            etc.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformResponseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;bool&gt; TransformResponseAsync (Microsoft.AspNetCore.Http.HttpContext httpContext, System.Net.Http.HttpResponseMessage? proxyResponse, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;bool&gt; TransformResponseAsync(class Microsoft.AspNetCore.Http.HttpContext httpContext, class System.Net.Http.HttpResponseMessage proxyResponse, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformResponseAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TransformResponseAsync (httpContext As HttpContext, proxyResponse As HttpResponseMessage, cancellationToken As CancellationToken) As ValueTask(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member TransformResponseAsync : Microsoft.AspNetCore.Http.HttpContext * System.Net.Http.HttpResponseMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;bool&gt;&#xA;override this.TransformResponseAsync : Microsoft.AspNetCore.Http.HttpContext * System.Net.Http.HttpResponseMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;bool&gt;" Usage="httpTransformer.TransformResponseAsync (httpContext, proxyResponse, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" Index="0" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2">
          <Attributes>
            <Attribute FrameworkAlternate="yarp-2.1;yarp-2.2">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="proxyResponse" Type="System.Net.Http.HttpResponseMessage" Index="1" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2">
          <Attributes>
            <Attribute FrameworkAlternate="yarp-2.1;yarp-2.2">
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
      </Parameters>
      <Docs>
        <param name="httpContext">The incoming request.</param>
        <param name="proxyResponse">The response from the destination. This can be null if the destination did not respond.</param>
        <param name="cancellationToken">Indicates that the request is being canceled.</param>
        <summary>
            A callback that is invoked when the proxied response is received. The status code and reason phrase will be copied
            to the HttpContext.Response before the callback is invoked, but may still be modified there. The headers will be
            copied to HttpContext.Response.Headers by the base implementation, excludes certain protocol headers like
            `Transfer-Encoding: chunked`.
            </summary>
        <returns>A bool indicating if the response should be proxied to the client or not. A derived implementation 
            that returns false may send an alternate response inline or return control to the caller for it to retry, respond, 
            etc.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformResponseTrailersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask TransformResponseTrailersAsync (Microsoft.AspNetCore.Http.HttpContext httpContext, System.Net.Http.HttpResponseMessage proxyResponse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask TransformResponseTrailersAsync(class Microsoft.AspNetCore.Http.HttpContext httpContext, class System.Net.Http.HttpResponseMessage proxyResponse) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformResponseTrailersAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpResponseMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TransformResponseTrailersAsync (httpContext As HttpContext, proxyResponse As HttpResponseMessage) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member TransformResponseTrailersAsync : Microsoft.AspNetCore.Http.HttpContext * System.Net.Http.HttpResponseMessage -&gt; System.Threading.Tasks.ValueTask&#xA;override this.TransformResponseTrailersAsync : Microsoft.AspNetCore.Http.HttpContext * System.Net.Http.HttpResponseMessage -&gt; System.Threading.Tasks.ValueTask" Usage="httpTransformer.TransformResponseTrailersAsync (httpContext, proxyResponse)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2">
          <AttributeName Language="C#">[System.Obsolete("This overload of TransformResponseTrailersAsync is obsolete. Override and use the overload accepting a CancellationToken instead.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This overload of TransformResponseTrailersAsync is obsolete. Override and use the overload accepting a CancellationToken instead.")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" />
        <Parameter Name="proxyResponse" Type="System.Net.Http.HttpResponseMessage" />
      </Parameters>
      <Docs>
        <param name="httpContext">The incoming request.</param>
        <param name="proxyResponse">The response from the destination.</param>
        <summary>
            A callback that is invoked after the response body to modify trailers, if supported. The trailers will be
            copied to the HttpContext.Response by the base implementation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformResponseTrailersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask TransformResponseTrailersAsync (Microsoft.AspNetCore.Http.HttpContext httpContext, System.Net.Http.HttpResponseMessage proxyResponse, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask TransformResponseTrailersAsync(class Microsoft.AspNetCore.Http.HttpContext httpContext, class System.Net.Http.HttpResponseMessage proxyResponse, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Forwarder.HttpTransformer.TransformResponseTrailersAsync(Microsoft.AspNetCore.Http.HttpContext,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TransformResponseTrailersAsync (httpContext As HttpContext, proxyResponse As HttpResponseMessage, cancellationToken As CancellationToken) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member TransformResponseTrailersAsync : Microsoft.AspNetCore.Http.HttpContext * System.Net.Http.HttpResponseMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&#xA;override this.TransformResponseTrailersAsync : Microsoft.AspNetCore.Http.HttpContext * System.Net.Http.HttpResponseMessage * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="httpTransformer.TransformResponseTrailersAsync (httpContext, proxyResponse, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" Index="0" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
        <Parameter Name="proxyResponse" Type="System.Net.Http.HttpResponseMessage" Index="1" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
      </Parameters>
      <Docs>
        <param name="httpContext">The incoming request.</param>
        <param name="proxyResponse">The response from the destination.</param>
        <param name="cancellationToken">Indicates that the request is being canceled.</param>
        <summary>
            A callback that is invoked after the response body to modify trailers, if supported. The trailers will be
            copied to the HttpContext.Response by the base implementation.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
