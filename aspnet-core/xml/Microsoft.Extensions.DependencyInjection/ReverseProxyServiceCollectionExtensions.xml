<Type Name="ReverseProxyServiceCollectionExtensions" FullName="Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions">
  <TypeSignature Language="C#" Value="public static class ReverseProxyServiceCollectionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ReverseProxyServiceCollectionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ReverseProxyServiceCollectionExtensions" />
  <TypeSignature Language="F#" Value="type ReverseProxyServiceCollectionExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Yarp.ReverseProxy</AssemblyName>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.2.0</AssemblyVersion>
    <AssemblyVersion>2.0.1.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="yarp-2.1;yarp-2.2">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
            used to register the ReverseProxy's components.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddConfigFilter&lt;TService&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder AddConfigFilter&lt;TService&gt; (this Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder) where TService : class, Yarp.ReverseProxy.Configuration.IProxyConfigFilter;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder AddConfigFilter&lt;class (class Yarp.ReverseProxy.Configuration.IProxyConfigFilter) TService&gt;(class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddConfigFilter``1(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddConfigFilter(Of TService As {Class, IProxyConfigFilter}) (builder As IReverseProxyBuilder) As IReverseProxyBuilder" />
      <MemberSignature Language="F#" Value="static member AddConfigFilter : Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder -&gt; Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder (requires 'Service : null and 'Service :&gt; Yarp.ReverseProxy.Configuration.IProxyConfigFilter)" Usage="Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddConfigFilter builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TService">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Yarp.ReverseProxy.Configuration.IProxyConfigFilter</InterfaceName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="yarp-2.1;yarp-2.2">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TService">A class that implements IProxyConfigFilter.</typeparam>
        <param name="builder">To be added.</param>
        <summary>
            Registers a singleton IProxyConfigFilter service. Multiple filters are allowed, and they will be run in registration order.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddDnsDestinationResolver">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder AddDnsDestinationResolver (this Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder, Action&lt;Yarp.ReverseProxy.ServiceDiscovery.DnsDestinationResolverOptions&gt;? configureOptions = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder AddDnsDestinationResolver(class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder, class System.Action`1&lt;class Yarp.ReverseProxy.ServiceDiscovery.DnsDestinationResolverOptions&gt; configureOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddDnsDestinationResolver(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder,System.Action{Yarp.ReverseProxy.ServiceDiscovery.DnsDestinationResolverOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddDnsDestinationResolver (builder As IReverseProxyBuilder, Optional configureOptions As Action(Of DnsDestinationResolverOptions) = Nothing) As IReverseProxyBuilder" />
      <MemberSignature Language="F#" Value="static member AddDnsDestinationResolver : Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder * Action&lt;Yarp.ReverseProxy.ServiceDiscovery.DnsDestinationResolverOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder" Usage="Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddDnsDestinationResolver (builder, configureOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder" RefType="this" Index="0" FrameworkAlternate="yarp-2.1;yarp-2.2" />
        <Parameter Name="configureOptions" Type="System.Action&lt;Yarp.ReverseProxy.ServiceDiscovery.DnsDestinationResolverOptions&gt;" Index="1" FrameworkAlternate="yarp-2.1;yarp-2.2">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <param name="configureOptions">To be added.</param>
        <summary>
            Provides a <see cref="T:Yarp.ReverseProxy.ServiceDiscovery.IDestinationResolver" /> implementation which uses <see cref="T:System.Net.Dns" /> to resolve destinations.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddHttpForwarder">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpForwarder (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddHttpForwarder(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddHttpForwarder(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddHttpForwarder (services As IServiceCollection) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddHttpForwarder : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddHttpForwarder services" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
      </Parameters>
      <Docs>
        <param name="services">To be added.</param>
        <summary>
            Registers the <see cref="T:Yarp.ReverseProxy.Forwarder.IHttpForwarder" /> service for direct forwarding scenarios.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddReverseProxy">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder AddReverseProxy (this Microsoft.Extensions.DependencyInjection.IServiceCollection services);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder AddReverseProxy(class Microsoft.Extensions.DependencyInjection.IServiceCollection services) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddReverseProxy(Microsoft.Extensions.DependencyInjection.IServiceCollection)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddReverseProxy (services As IServiceCollection) As IReverseProxyBuilder" />
      <MemberSignature Language="F#" Value="static member AddReverseProxy : Microsoft.Extensions.DependencyInjection.IServiceCollection -&gt; Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder" Usage="Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddReverseProxy services" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
      </Parameters>
      <Docs>
        <param name="services">To be added.</param>
        <summary>
            Adds ReverseProxy's services to Dependency Injection.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTransformFactory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder AddTransformFactory&lt;T&gt; (this Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder) where T : class, Yarp.ReverseProxy.Transforms.Builder.ITransformFactory;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder AddTransformFactory&lt;class (class Yarp.ReverseProxy.Transforms.Builder.ITransformFactory) T&gt;(class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransformFactory``1(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddTransformFactory(Of T As {Class, ITransformFactory}) (builder As IReverseProxyBuilder) As IReverseProxyBuilder" />
      <MemberSignature Language="F#" Value="static member AddTransformFactory : Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder -&gt; Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder (requires 'T : null and 'T :&gt; Yarp.ReverseProxy.Transforms.Builder.ITransformFactory)" Usage="Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransformFactory builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Yarp.ReverseProxy.Transforms.Builder.ITransformFactory</InterfaceName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="yarp-2.1;yarp-2.2">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="builder">To be added.</param>
        <summary>
            Adds a <see cref="T:Yarp.ReverseProxy.Transforms.Builder.ITransformFactory" /> implementation that will be used to read route transform config and generate
            the associated transform actions. <see cref="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransformFactory``1(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder)" /> can be called multiple
            times to provide multiple distinct types.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTransforms">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder AddTransforms (this Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder, Action&lt;Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder AddTransforms(class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder, class System.Action`1&lt;class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransforms(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder,System.Action{Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddTransforms (builder As IReverseProxyBuilder, action As Action(Of TransformBuilderContext)) As IReverseProxyBuilder" />
      <MemberSignature Language="F#" Value="static member AddTransforms : Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder * Action&lt;Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext&gt; -&gt; Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder" Usage="Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransforms (builder, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder" RefType="this" />
        <Parameter Name="action" Type="System.Action&lt;Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <param name="action">To be added.</param>
        <summary>
            Provides a callback that will be run for each route to conditionally add transforms.
            <see cref="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransforms(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder,System.Action{Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext})" /> can be called multiple times to
            provide multiple callbacks.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTransforms&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder AddTransforms&lt;T&gt; (this Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder) where T : class, Yarp.ReverseProxy.Transforms.Builder.ITransformProvider;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder AddTransforms&lt;class (class Yarp.ReverseProxy.Transforms.Builder.ITransformProvider) T&gt;(class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransforms``1(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddTransforms(Of T As {Class, ITransformProvider}) (builder As IReverseProxyBuilder) As IReverseProxyBuilder" />
      <MemberSignature Language="F#" Value="static member AddTransforms : Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder -&gt; Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder (requires 'T : null and 'T :&gt; Yarp.ReverseProxy.Transforms.Builder.ITransformProvider)" Usage="Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransforms builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Yarp.ReverseProxy.Transforms.Builder.ITransformProvider</InterfaceName>
          </Constraints>
          <Attributes>
            <Attribute FrameworkAlternate="yarp-2.1;yarp-2.2">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="builder">To be added.</param>
        <summary>
            Provides a <see cref="T:Yarp.ReverseProxy.Transforms.Builder.ITransformProvider" /> implementation that will be run for each route to conditionally add transforms.
            <see cref="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.AddTransforms``1(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder)" /> can be called multiple times to provide multiple distinct types.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConfigureHttpClient">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder ConfigureHttpClient (this Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder, Action&lt;Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext,System.Net.Http.SocketsHttpHandler&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder ConfigureHttpClient(class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder, class System.Action`2&lt;class Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext, class System.Net.Http.SocketsHttpHandler&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.ConfigureHttpClient(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder,System.Action{Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext,System.Net.Http.SocketsHttpHandler})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ConfigureHttpClient (builder As IReverseProxyBuilder, configure As Action(Of ForwarderHttpClientContext, SocketsHttpHandler)) As IReverseProxyBuilder" />
      <MemberSignature Language="F#" Value="static member ConfigureHttpClient : Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder * Action&lt;Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext, System.Net.Http.SocketsHttpHandler&gt; -&gt; Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder" Usage="Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.ConfigureHttpClient (builder, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Yarp.ReverseProxy.Forwarder.ForwarderHttpClientContext,System.Net.Http.SocketsHttpHandler&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <param name="configure">To be added.</param>
        <summary>
            Provides a callback to customize <see cref="T:System.Net.Http.SocketsHttpHandler" /> settings used for proxying requests.
            This will be called each time a cluster is added or changed. Cluster settings are applied to the handler before
            the callback. Custom data can be provided in the cluster metadata.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromConfig">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder LoadFromConfig (this Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder, Microsoft.Extensions.Configuration.IConfiguration config);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder LoadFromConfig(class Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder builder, class Microsoft.Extensions.Configuration.IConfiguration config) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.LoadFromConfig(Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder,Microsoft.Extensions.Configuration.IConfiguration)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LoadFromConfig (builder As IReverseProxyBuilder, config As IConfiguration) As IReverseProxyBuilder" />
      <MemberSignature Language="F#" Value="static member LoadFromConfig : Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder * Microsoft.Extensions.Configuration.IConfiguration -&gt; Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder" Usage="Microsoft.Extensions.DependencyInjection.ReverseProxyServiceCollectionExtensions.LoadFromConfig (builder, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.Extensions.DependencyInjection.IReverseProxyBuilder" RefType="this" />
        <Parameter Name="config" Type="Microsoft.Extensions.Configuration.IConfiguration" />
      </Parameters>
      <Docs>
        <param name="builder">To be added.</param>
        <param name="config">To be added.</param>
        <summary>
            Loads routes and endpoints from config.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
