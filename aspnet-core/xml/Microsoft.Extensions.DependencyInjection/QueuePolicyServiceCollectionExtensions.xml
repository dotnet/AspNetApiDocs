<Type Name="QueuePolicyServiceCollectionExtensions" FullName="Microsoft.Extensions.DependencyInjection.QueuePolicyServiceCollectionExtensions">
  <TypeSignature Language="C#" Value="public static class QueuePolicyServiceCollectionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit QueuePolicyServiceCollectionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Extensions.DependencyInjection.QueuePolicyServiceCollectionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module QueuePolicyServiceCollectionExtensions" />
  <TypeSignature Language="F#" Value="type QueuePolicyServiceCollectionExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.ConcurrencyLimiter</AssemblyName>
    <AssemblyVersion>3.0.3.0</AssemblyVersion>
    <AssemblyVersion>3.1.12.0</AssemblyVersion>
    <AssemblyVersion>3.1.18.0</AssemblyVersion>
    <AssemblyVersion>5.0.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.9.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.5.0</AssemblyVersion>
    <AssemblyVersion>6.0.6.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.3.0</AssemblyVersion>
    <AssemblyVersion>7.0.5.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Contains methods for specifying which queue the middleware should use.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddQueuePolicy">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddQueuePolicy (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.ConcurrencyLimiter.QueuePolicyOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddQueuePolicy(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.ConcurrencyLimiter.QueuePolicyOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.QueuePolicyServiceCollectionExtensions.AddQueuePolicy(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.ConcurrencyLimiter.QueuePolicyOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddQueuePolicy (services As IServiceCollection, configure As Action(Of QueuePolicyOptions)) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddQueuePolicy : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.AspNetCore.ConcurrencyLimiter.QueuePolicyOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.DependencyInjection.QueuePolicyServiceCollectionExtensions.AddQueuePolicy (services, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.ConcurrencyLimiter</AssemblyName>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.AspNetCore.ConcurrencyLimiter.QueuePolicyOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="configure">Set the options used by the queue.
            Mandatory, since <see cref="P:Microsoft.AspNetCore.ConcurrencyLimiter.QueuePolicyOptions.MaxConcurrentRequests"></see> must be provided.</param>
        <summary>
            Tells <see cref="T:Microsoft.AspNetCore.ConcurrencyLimiter.ConcurrencyLimiterMiddleware" /> to use a FIFO queue as its queueing strategy.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddStackPolicy">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddStackPolicy (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.AspNetCore.ConcurrencyLimiter.QueuePolicyOptions&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddStackPolicy(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.AspNetCore.ConcurrencyLimiter.QueuePolicyOptions&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Extensions.DependencyInjection.QueuePolicyServiceCollectionExtensions.AddStackPolicy(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.AspNetCore.ConcurrencyLimiter.QueuePolicyOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddStackPolicy (services As IServiceCollection, configure As Action(Of QueuePolicyOptions)) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddStackPolicy : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.AspNetCore.ConcurrencyLimiter.QueuePolicyOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Extensions.DependencyInjection.QueuePolicyServiceCollectionExtensions.AddStackPolicy (services, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.ConcurrencyLimiter</AssemblyName>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.AspNetCore.ConcurrencyLimiter.QueuePolicyOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> to add services to.</param>
        <param name="configure">Set the options used by the queue.
            Mandatory, since <see cref="P:Microsoft.AspNetCore.ConcurrencyLimiter.QueuePolicyOptions.MaxConcurrentRequests"></see> must be provided.</param>
        <summary>
            Tells <see cref="T:Microsoft.AspNetCore.ConcurrencyLimiter.ConcurrencyLimiterMiddleware" /> to use a LIFO stack as its queueing strategy.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
