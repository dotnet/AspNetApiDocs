<Type Name="INetSecurityTelemetryConsumer" FullName="Yarp.Telemetry.Consumption.INetSecurityTelemetryConsumer">
  <TypeSignature Language="C#" Value="public interface INetSecurityTelemetryConsumer" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INetSecurityTelemetryConsumer" FrameworkAlternate="yarp-1.0;yarp-1.1;yarp-2.0" />
  <TypeSignature Language="DocId" Value="T:Yarp.Telemetry.Consumption.INetSecurityTelemetryConsumer" />
  <TypeSignature Language="VB.NET" Value="Public Interface INetSecurityTelemetryConsumer" />
  <TypeSignature Language="F#" Value="type INetSecurityTelemetryConsumer = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit INetSecurityTelemetryConsumer" FrameworkAlternate="yarp-2.1;yarp-2.2" />
  <AssemblyInfo>
    <AssemblyName>Yarp.Telemetry.Consumption</AssemblyName>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.2.0</AssemblyVersion>
    <AssemblyVersion>2.0.1.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            A consumer of System.Net.Security EventSource events.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="OnHandshakeFailed">
      <MemberSignature Language="C#" Value="public virtual void OnHandshakeFailed (DateTime timestamp, bool isServer, TimeSpan elapsed, string exceptionMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnHandshakeFailed(valuetype System.DateTime timestamp, bool isServer, valuetype System.TimeSpan elapsed, string exceptionMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.Telemetry.Consumption.INetSecurityTelemetryConsumer.OnHandshakeFailed(System.DateTime,System.Boolean,System.TimeSpan,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnHandshakeFailed (timestamp As DateTime, isServer As Boolean, elapsed As TimeSpan, exceptionMessage As String)" />
      <MemberSignature Language="F#" Value="abstract member OnHandshakeFailed : DateTime * bool * TimeSpan * string -&gt; unit&#xA;override this.OnHandshakeFailed : DateTime * bool * TimeSpan * string -&gt; unit" Usage="iNetSecurityTelemetryConsumer.OnHandshakeFailed (timestamp, isServer, elapsed, exceptionMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.Telemetry.Consumption</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.DateTime" />
        <Parameter Name="isServer" Type="System.Boolean" />
        <Parameter Name="elapsed" Type="System.TimeSpan" />
        <Parameter Name="exceptionMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="timestamp">Timestamp when the event was fired.</param>
        <param name="isServer">Indicates whether we were authenticating as the server.</param>
        <param name="elapsed">Time elapsed since the start of the handshake.</param>
        <param name="exceptionMessage">Exception information for the handshake failure.</param>
        <summary>
            Called before <see cref="M:Yarp.Telemetry.Consumption.INetSecurityTelemetryConsumer.OnHandshakeStop(System.DateTime,System.Security.Authentication.SslProtocols)" /> if the handshake failed.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandshakeStart">
      <MemberSignature Language="C#" Value="public virtual void OnHandshakeStart (DateTime timestamp, bool isServer, string targetHost);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnHandshakeStart(valuetype System.DateTime timestamp, bool isServer, string targetHost) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.Telemetry.Consumption.INetSecurityTelemetryConsumer.OnHandshakeStart(System.DateTime,System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnHandshakeStart (timestamp As DateTime, isServer As Boolean, targetHost As String)" />
      <MemberSignature Language="F#" Value="abstract member OnHandshakeStart : DateTime * bool * string -&gt; unit&#xA;override this.OnHandshakeStart : DateTime * bool * string -&gt; unit" Usage="iNetSecurityTelemetryConsumer.OnHandshakeStart (timestamp, isServer, targetHost)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.Telemetry.Consumption</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.DateTime" />
        <Parameter Name="isServer" Type="System.Boolean" />
        <Parameter Name="targetHost" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="timestamp">Timestamp when the event was fired.</param>
        <param name="isServer">Indicates whether we are authenticating as the server.</param>
        <param name="targetHost">Name of the host we are authenticating with.</param>
        <summary>
            Called before a handshake.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandshakeStop">
      <MemberSignature Language="C#" Value="public virtual void OnHandshakeStop (DateTime timestamp, System.Security.Authentication.SslProtocols protocol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnHandshakeStop(valuetype System.DateTime timestamp, valuetype System.Security.Authentication.SslProtocols protocol) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.Telemetry.Consumption.INetSecurityTelemetryConsumer.OnHandshakeStop(System.DateTime,System.Security.Authentication.SslProtocols)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnHandshakeStop (timestamp As DateTime, protocol As SslProtocols)" />
      <MemberSignature Language="F#" Value="abstract member OnHandshakeStop : DateTime * System.Security.Authentication.SslProtocols -&gt; unit&#xA;override this.OnHandshakeStop : DateTime * System.Security.Authentication.SslProtocols -&gt; unit" Usage="iNetSecurityTelemetryConsumer.OnHandshakeStop (timestamp, protocol)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.Telemetry.Consumption</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.DateTime" />
        <Parameter Name="protocol" Type="System.Security.Authentication.SslProtocols" />
      </Parameters>
      <Docs>
        <param name="timestamp">Timestamp when the event was fired.</param>
        <param name="protocol">The protocol established by the handshake.</param>
        <summary>
            Called after a handshake.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
