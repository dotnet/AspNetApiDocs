<Type Name="MatcherPolicy" FullName="Microsoft.AspNetCore.Routing.MatcherPolicy">
  <TypeSignature Language="C++ CLI" Value="public ref class MatcherPolicy abstract" />
  <TypeSignature Language="C#" Value="public abstract class MatcherPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MatcherPolicy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Routing.MatcherPolicy" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MatcherPolicy" />
  <TypeSignature Language="F#" Value="type MatcherPolicy = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Defines a policy that applies behaviors to the URL matcher. Implementations
            of <see cref="T:Microsoft.AspNetCore.Routing.MatcherPolicy" /> and related interfaces must be registered
            in the dependency injection container as singleton services of type
            <see cref="T:Microsoft.AspNetCore.Routing.MatcherPolicy" />.
            </summary>
    <remarks>
      <see cref="T:Microsoft.AspNetCore.Routing.MatcherPolicy" /> implementations can implement the following
            interfaces <see cref="T:Microsoft.AspNetCore.Routing.Matching.IEndpointComparerPolicy" />, <see cref="T:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy" />,
            and <see cref="T:Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MatcherPolicy();" />
      <MemberSignature Language="C#" Value="protected MatcherPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.MatcherPolicy.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsDynamicEndpoints">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool ContainsDynamicEndpoints(System::Collections::Generic::IReadOnlyList&lt;Microsoft::AspNetCore::Http::Endpoint ^&gt; ^ endpoints);" />
      <MemberSignature Language="C#" Value="protected static bool ContainsDynamicEndpoints (System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; endpoints);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool ContainsDynamicEndpoints(class System.Collections.Generic.IReadOnlyList`1&lt;class Microsoft.AspNetCore.Http.Endpoint&gt; endpoints) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.MatcherPolicy.ContainsDynamicEndpoints(System.Collections.Generic.IReadOnlyList{Microsoft.AspNetCore.Http.Endpoint})" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ContainsDynamicEndpoints (endpoints As IReadOnlyList(Of Endpoint)) As Boolean" />
      <MemberSignature Language="F#" Value="static member ContainsDynamicEndpoints : System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt; -&gt; bool" Usage="Microsoft.AspNetCore.Routing.MatcherPolicy.ContainsDynamicEndpoints endpoints" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoints" Type="System.Collections.Generic.IReadOnlyList&lt;Microsoft.AspNetCore.Http.Endpoint&gt;" Index="0" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="endpoints">The set of endpoints.</param>
        <summary>
            Returns a value that indicates whether the provided <paramref name="endpoints" /> contains
            one or more dynamic endpoints.
            </summary>
        <returns>
          <c>true</c> if a dynamic endpoint is found; otherwise returns <c>false</c>.</returns>
        <remarks>
          <para>
            The presence of <see cref="T:Microsoft.AspNetCore.Routing.IDynamicEndpointMetadata" /> signifies that an endpoint that may be replaced
            during processing by an <see cref="T:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy" />.
            </para>
          <para>
            An implementation of <see cref="T:Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy" /> should also implement <see cref="T:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy" />
            and use its <see cref="T:Microsoft.AspNetCore.Routing.Matching.IEndpointSelectorPolicy" /> implementation when a node contains a dynamic endpoint.
            <see cref="T:Microsoft.AspNetCore.Routing.Matching.INodeBuilderPolicy" /> implementations rely on caching of data based on a static set of endpoints. This
            is not possible when endpoints are replaced dynamically.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property int Order { int get(); };" />
      <MemberSignature Language="C#" Value="public abstract int Order { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Order" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Routing.MatcherPolicy.Order" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Order As Integer" />
      <MemberSignature Language="F#" Value="member this.Order : int" Usage="Microsoft.AspNetCore.Routing.MatcherPolicy.Order" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets a value that determines the order the <see cref="T:Microsoft.AspNetCore.Routing.MatcherPolicy" /> should
            be applied. Policies are applied in ascending numeric value of the <see cref="P:Microsoft.AspNetCore.Routing.MatcherPolicy.Order" />
            property.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
