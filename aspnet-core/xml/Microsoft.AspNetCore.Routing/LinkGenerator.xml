<Type Name="LinkGenerator" FullName="Microsoft.AspNetCore.Routing.LinkGenerator">
  <TypeSignature Language="C++ CLI" Value="public ref class LinkGenerator abstract" />
  <TypeSignature Language="C#" Value="public abstract class LinkGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit LinkGenerator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Routing.LinkGenerator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class LinkGenerator" />
  <TypeSignature Language="F#" Value="type LinkGenerator = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Routing.Abstractions</AssemblyName>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Defines a contract to generate absolute and related URIs based on endpoint routing.
            </summary>
    <remarks>
      <para>
            Generating URIs in endpoint routing occurs in two phases. First, an address is bound to a list of
            endpoints that match the address. Secondly, each endpoint's <c>RoutePattern</c> is evaluated, until
            a route pattern that matches the supplied values is found. The resulting output is combined with
            the other URI parts supplied to the link generator and returned.
            </para>
      <para>
            The methods provided by the <see cref="T:Microsoft.AspNetCore.Routing.LinkGenerator" /> type are general infrastructure, and support
            the standard link generator functionality for any type of address. The most convenient way to use
            <see cref="T:Microsoft.AspNetCore.Routing.LinkGenerator" /> is through extension methods that perform operations for a specific
            address type.
            </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; LinkGenerator();" />
      <MemberSignature Language="C#" Value="protected LinkGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.LinkGenerator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing.Abstractions</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathByAddress&lt;TAddress&gt;">
      <MemberSignature Language="C#" Value="public abstract string GetPathByAddress&lt;TAddress&gt; (TAddress address, Microsoft.AspNetCore.Routing.RouteValueDictionary values, Microsoft.AspNetCore.Http.PathString pathBase = default, Microsoft.AspNetCore.Http.FragmentString fragment = default, Microsoft.AspNetCore.Routing.LinkOptions options = default);" FrameworkAlternate="aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetPathByAddress&lt;TAddress&gt;(!!TAddress address, class Microsoft.AspNetCore.Routing.RouteValueDictionary values, valuetype Microsoft.AspNetCore.Http.PathString pathBase, valuetype Microsoft.AspNetCore.Http.FragmentString fragment, class Microsoft.AspNetCore.Routing.LinkOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.LinkGenerator.GetPathByAddress``1(``0,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetPathByAddress(Of TAddress) (address As TAddress, values As RouteValueDictionary, Optional pathBase As PathString = Nothing, Optional fragment As FragmentString = Nothing, Optional options As LinkOptions = Nothing) As String" />
      <MemberSignature Language="F#" Value="abstract member GetPathByAddress : 'Address * Microsoft.AspNetCore.Routing.RouteValueDictionary * Microsoft.AspNetCore.Http.PathString * Microsoft.AspNetCore.Http.FragmentString * Microsoft.AspNetCore.Routing.LinkOptions -&gt; string" Usage="linkGenerator.GetPathByAddress (address, values, pathBase, fragment, options)" />
      <MemberSignature Language="C#" Value="public abstract string? GetPathByAddress&lt;TAddress&gt; (TAddress address, Microsoft.AspNetCore.Routing.RouteValueDictionary values, Microsoft.AspNetCore.Http.PathString pathBase = default, Microsoft.AspNetCore.Http.FragmentString fragment = default, Microsoft.AspNetCore.Routing.LinkOptions? options = default);" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing.Abstractions</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAddress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="address" Type="TAddress" />
        <Parameter Name="values" Type="Microsoft.AspNetCore.Routing.RouteValueDictionary" />
        <Parameter Name="pathBase" Type="Microsoft.AspNetCore.Http.PathString" />
        <Parameter Name="fragment" Type="Microsoft.AspNetCore.Http.FragmentString" />
        <Parameter Name="options" Type="Microsoft.AspNetCore.Routing.LinkOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAddress">The address type.</typeparam>
        <param name="address">The address value. Used to resolve endpoints.</param>
        <param name="values">The route values. Used to expand parameters in the route template.</param>
        <param name="pathBase">An optional URI path base. Prepended to the path in the resulting URI.</param>
        <param name="fragment">An optional URI fragment. Appended to the resulting URI.</param>
        <param name="options">
            An optional <see cref="T:Microsoft.AspNetCore.Routing.LinkOptions" />. Settings on provided object override the settings with matching
            names from <c>RouteOptions</c>.
            </param>
        <summary>
            Generates a URI with an absolute path based on the provided values.
            </summary>
        <returns>A URI with an absolute path, or <c>null</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPathByAddress&lt;TAddress&gt;">
      <MemberSignature Language="C#" Value="public abstract string GetPathByAddress&lt;TAddress&gt; (Microsoft.AspNetCore.Http.HttpContext httpContext, TAddress address, Microsoft.AspNetCore.Routing.RouteValueDictionary values, Microsoft.AspNetCore.Routing.RouteValueDictionary ambientValues = default, Microsoft.AspNetCore.Http.PathString? pathBase = default, Microsoft.AspNetCore.Http.FragmentString fragment = default, Microsoft.AspNetCore.Routing.LinkOptions options = default);" FrameworkAlternate="aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetPathByAddress&lt;TAddress&gt;(class Microsoft.AspNetCore.Http.HttpContext httpContext, !!TAddress address, class Microsoft.AspNetCore.Routing.RouteValueDictionary values, class Microsoft.AspNetCore.Routing.RouteValueDictionary ambientValues, valuetype System.Nullable`1&lt;valuetype Microsoft.AspNetCore.Http.PathString&gt; pathBase, valuetype Microsoft.AspNetCore.Http.FragmentString fragment, class Microsoft.AspNetCore.Routing.LinkOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.LinkGenerator.GetPathByAddress``1(Microsoft.AspNetCore.Http.HttpContext,``0,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.Nullable{Microsoft.AspNetCore.Http.PathString},Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetPathByAddress(Of TAddress) (httpContext As HttpContext, address As TAddress, values As RouteValueDictionary, Optional ambientValues As RouteValueDictionary = Nothing, Optional pathBase As Nullable(Of PathString) = Nothing, Optional fragment As FragmentString = Nothing, Optional options As LinkOptions = Nothing) As String" />
      <MemberSignature Language="F#" Value="abstract member GetPathByAddress : Microsoft.AspNetCore.Http.HttpContext * 'Address * Microsoft.AspNetCore.Routing.RouteValueDictionary * Microsoft.AspNetCore.Routing.RouteValueDictionary * Nullable&lt;Microsoft.AspNetCore.Http.PathString&gt; * Microsoft.AspNetCore.Http.FragmentString * Microsoft.AspNetCore.Routing.LinkOptions -&gt; string" Usage="linkGenerator.GetPathByAddress (httpContext, address, values, ambientValues, pathBase, fragment, options)" />
      <MemberSignature Language="C#" Value="public abstract string? GetPathByAddress&lt;TAddress&gt; (Microsoft.AspNetCore.Http.HttpContext httpContext, TAddress address, Microsoft.AspNetCore.Routing.RouteValueDictionary values, Microsoft.AspNetCore.Routing.RouteValueDictionary? ambientValues = default, Microsoft.AspNetCore.Http.PathString? pathBase = default, Microsoft.AspNetCore.Http.FragmentString fragment = default, Microsoft.AspNetCore.Routing.LinkOptions? options = default);" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing.Abstractions</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAddress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" />
        <Parameter Name="address" Type="TAddress" />
        <Parameter Name="values" Type="Microsoft.AspNetCore.Routing.RouteValueDictionary" />
        <Parameter Name="ambientValues" Type="Microsoft.AspNetCore.Routing.RouteValueDictionary" />
        <Parameter Name="pathBase" Type="System.Nullable&lt;Microsoft.AspNetCore.Http.PathString&gt;" />
        <Parameter Name="fragment" Type="Microsoft.AspNetCore.Http.FragmentString" />
        <Parameter Name="options" Type="Microsoft.AspNetCore.Routing.LinkOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAddress">The address type.</typeparam>
        <param name="httpContext">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> associated with the current request.</param>
        <param name="address">The address value. Used to resolve endpoints.</param>
        <param name="values">The route values. Used to expand parameters in the route template.</param>
        <param name="ambientValues">The values associated with the current request. Optional.</param>
        <param name="pathBase">
            An optional URI path base. Prepended to the path in the resulting URI. If not provided, the value of <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.PathBase" /> will be used.
            </param>
        <param name="fragment">An optional URI fragment. Appended to the resulting URI.</param>
        <param name="options">
            An optional <see cref="T:Microsoft.AspNetCore.Routing.LinkOptions" />. Settings on provided object override the settings with matching
            names from <c>RouteOptions</c>.
            </param>
        <summary>
            Generates a URI with an absolute path based on the provided values and <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />.
            </summary>
        <returns>A URI with an absolute path, or <c>null</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUriByAddress&lt;TAddress&gt;">
      <MemberSignature Language="C#" Value="public abstract string GetUriByAddress&lt;TAddress&gt; (TAddress address, Microsoft.AspNetCore.Routing.RouteValueDictionary values, string scheme, Microsoft.AspNetCore.Http.HostString host, Microsoft.AspNetCore.Http.PathString pathBase = default, Microsoft.AspNetCore.Http.FragmentString fragment = default, Microsoft.AspNetCore.Routing.LinkOptions options = default);" FrameworkAlternate="aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUriByAddress&lt;TAddress&gt;(!!TAddress address, class Microsoft.AspNetCore.Routing.RouteValueDictionary values, string scheme, valuetype Microsoft.AspNetCore.Http.HostString host, valuetype Microsoft.AspNetCore.Http.PathString pathBase, valuetype Microsoft.AspNetCore.Http.FragmentString fragment, class Microsoft.AspNetCore.Routing.LinkOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.LinkGenerator.GetUriByAddress``1(``0,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.String,Microsoft.AspNetCore.Http.HostString,Microsoft.AspNetCore.Http.PathString,Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUriByAddress(Of TAddress) (address As TAddress, values As RouteValueDictionary, scheme As String, host As HostString, Optional pathBase As PathString = Nothing, Optional fragment As FragmentString = Nothing, Optional options As LinkOptions = Nothing) As String" />
      <MemberSignature Language="F#" Value="abstract member GetUriByAddress : 'Address * Microsoft.AspNetCore.Routing.RouteValueDictionary * string * Microsoft.AspNetCore.Http.HostString * Microsoft.AspNetCore.Http.PathString * Microsoft.AspNetCore.Http.FragmentString * Microsoft.AspNetCore.Routing.LinkOptions -&gt; string" Usage="linkGenerator.GetUriByAddress (address, values, scheme, host, pathBase, fragment, options)" />
      <MemberSignature Language="C#" Value="public abstract string? GetUriByAddress&lt;TAddress&gt; (TAddress address, Microsoft.AspNetCore.Routing.RouteValueDictionary values, string scheme, Microsoft.AspNetCore.Http.HostString host, Microsoft.AspNetCore.Http.PathString pathBase = default, Microsoft.AspNetCore.Http.FragmentString fragment = default, Microsoft.AspNetCore.Routing.LinkOptions? options = default);" FrameworkAlternate="aspnetcore-5.0;aspnetcore-8.0" />
      <MemberSignature Language="C#" Value="public abstract string? GetUriByAddress&lt;TAddress&gt; (TAddress address, Microsoft.AspNetCore.Routing.RouteValueDictionary values, string? scheme, Microsoft.AspNetCore.Http.HostString host, Microsoft.AspNetCore.Http.PathString pathBase = default, Microsoft.AspNetCore.Http.FragmentString fragment = default, Microsoft.AspNetCore.Routing.LinkOptions? options = default);" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing.Abstractions</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAddress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="address" Type="TAddress" />
        <Parameter Name="values" Type="Microsoft.AspNetCore.Routing.RouteValueDictionary" />
        <Parameter Name="scheme" Type="System.String" />
        <Parameter Name="host" Type="Microsoft.AspNetCore.Http.HostString" />
        <Parameter Name="pathBase" Type="Microsoft.AspNetCore.Http.PathString" />
        <Parameter Name="fragment" Type="Microsoft.AspNetCore.Http.FragmentString" />
        <Parameter Name="options" Type="Microsoft.AspNetCore.Routing.LinkOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAddress">The address type.</typeparam>
        <param name="address">The address value. Used to resolve endpoints.</param>
        <param name="values">The route values. Used to expand parameters in the route template.</param>
        <param name="scheme">The URI scheme, applied to the resulting URI.</param>
        <param name="host">
            The URI host/authority, applied to the resulting URI.
            See the remarks section for details about the security implications of the <paramref name="host" />.
            </param>
        <param name="pathBase">An optional URI path base. Prepended to the path in the resulting URI.</param>
        <param name="fragment">An optional URI fragment. Appended to the resulting URI.</param>
        <param name="options">
            An optional <see cref="T:Microsoft.AspNetCore.Routing.LinkOptions" />. Settings on provided object override the settings with matching
            names from <c>RouteOptions</c>.
            </param>
        <summary>
            Generates an absolute URI based on the provided values.
            </summary>
        <returns>An absolute URI, or <c>null</c>.</returns>
        <remarks>
          <para>
            The value of <paramref name="host" /> should be a trusted value. Relying on the value of the current request
            can allow untrusted input to influence the resulting URI unless the <c>Host</c> header has been validated.
            See the deployment documentation for instructions on how to properly validate the <c>Host</c> header in
            your deployment environment.
            </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUriByAddress&lt;TAddress&gt;">
      <MemberSignature Language="C#" Value="public abstract string GetUriByAddress&lt;TAddress&gt; (Microsoft.AspNetCore.Http.HttpContext httpContext, TAddress address, Microsoft.AspNetCore.Routing.RouteValueDictionary values, Microsoft.AspNetCore.Routing.RouteValueDictionary ambientValues = default, string scheme = default, Microsoft.AspNetCore.Http.HostString? host = default, Microsoft.AspNetCore.Http.PathString? pathBase = default, Microsoft.AspNetCore.Http.FragmentString fragment = default, Microsoft.AspNetCore.Routing.LinkOptions options = default);" FrameworkAlternate="aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetUriByAddress&lt;TAddress&gt;(class Microsoft.AspNetCore.Http.HttpContext httpContext, !!TAddress address, class Microsoft.AspNetCore.Routing.RouteValueDictionary values, class Microsoft.AspNetCore.Routing.RouteValueDictionary ambientValues, string scheme, valuetype System.Nullable`1&lt;valuetype Microsoft.AspNetCore.Http.HostString&gt; host, valuetype System.Nullable`1&lt;valuetype Microsoft.AspNetCore.Http.PathString&gt; pathBase, valuetype Microsoft.AspNetCore.Http.FragmentString fragment, class Microsoft.AspNetCore.Routing.LinkOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Routing.LinkGenerator.GetUriByAddress``1(Microsoft.AspNetCore.Http.HttpContext,``0,Microsoft.AspNetCore.Routing.RouteValueDictionary,Microsoft.AspNetCore.Routing.RouteValueDictionary,System.String,System.Nullable{Microsoft.AspNetCore.Http.HostString},System.Nullable{Microsoft.AspNetCore.Http.PathString},Microsoft.AspNetCore.Http.FragmentString,Microsoft.AspNetCore.Routing.LinkOptions)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUriByAddress(Of TAddress) (httpContext As HttpContext, address As TAddress, values As RouteValueDictionary, Optional ambientValues As RouteValueDictionary = Nothing, Optional scheme As String = Nothing, Optional host As Nullable(Of HostString) = Nothing, Optional pathBase As Nullable(Of PathString) = Nothing, Optional fragment As FragmentString = Nothing, Optional options As LinkOptions = Nothing) As String" />
      <MemberSignature Language="F#" Value="abstract member GetUriByAddress : Microsoft.AspNetCore.Http.HttpContext * 'Address * Microsoft.AspNetCore.Routing.RouteValueDictionary * Microsoft.AspNetCore.Routing.RouteValueDictionary * string * Nullable&lt;Microsoft.AspNetCore.Http.HostString&gt; * Nullable&lt;Microsoft.AspNetCore.Http.PathString&gt; * Microsoft.AspNetCore.Http.FragmentString * Microsoft.AspNetCore.Routing.LinkOptions -&gt; string" Usage="linkGenerator.GetUriByAddress (httpContext, address, values, ambientValues, scheme, host, pathBase, fragment, options)" />
      <MemberSignature Language="C#" Value="public abstract string? GetUriByAddress&lt;TAddress&gt; (Microsoft.AspNetCore.Http.HttpContext httpContext, TAddress address, Microsoft.AspNetCore.Routing.RouteValueDictionary values, Microsoft.AspNetCore.Routing.RouteValueDictionary? ambientValues = default, string? scheme = default, Microsoft.AspNetCore.Http.HostString? host = default, Microsoft.AspNetCore.Http.PathString? pathBase = default, Microsoft.AspNetCore.Http.FragmentString fragment = default, Microsoft.AspNetCore.Routing.LinkOptions? options = default);" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing.Abstractions</AssemblyName>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TAddress" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="httpContext" Type="Microsoft.AspNetCore.Http.HttpContext" />
        <Parameter Name="address" Type="TAddress" />
        <Parameter Name="values" Type="Microsoft.AspNetCore.Routing.RouteValueDictionary" />
        <Parameter Name="ambientValues" Type="Microsoft.AspNetCore.Routing.RouteValueDictionary" />
        <Parameter Name="scheme" Type="System.String" />
        <Parameter Name="host" Type="System.Nullable&lt;Microsoft.AspNetCore.Http.HostString&gt;" />
        <Parameter Name="pathBase" Type="System.Nullable&lt;Microsoft.AspNetCore.Http.PathString&gt;" />
        <Parameter Name="fragment" Type="Microsoft.AspNetCore.Http.FragmentString" />
        <Parameter Name="options" Type="Microsoft.AspNetCore.Routing.LinkOptions" />
      </Parameters>
      <Docs>
        <typeparam name="TAddress">The address type.</typeparam>
        <param name="httpContext">The <see cref="T:Microsoft.AspNetCore.Http.HttpContext" /> associated with the current request.</param>
        <param name="address">The address value. Used to resolve endpoints.</param>
        <param name="values">The route values. Used to expand parameters in the route template.</param>
        <param name="ambientValues">The values associated with the current request. Optional.</param>
        <param name="scheme">
            The URI scheme, applied to the resulting URI. Optional. If not provided, the value of <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.Scheme" /> will be used.
            </param>
        <param name="host">
            The URI host/authority, applied to the resulting URI. Optional. If not provided, the value <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.Host" /> will be used.
            See the remarks section for details about the security implications of the <paramref name="host" />.
            </param>
        <param name="pathBase">
            An optional URI path base. Prepended to the path in the resulting URI. If not provided, the value of <see cref="P:Microsoft.AspNetCore.Http.HttpRequest.PathBase" /> will be used.
            </param>
        <param name="fragment">An optional URI fragment. Appended to the resulting URI.</param>
        <param name="options">
            An optional <see cref="T:Microsoft.AspNetCore.Routing.LinkOptions" />. Settings on provided object override the settings with matching
            names from <c>RouteOptions</c>.
            </param>
        <summary>
            Generates an absolute URI based on the provided values and <see cref="T:Microsoft.AspNetCore.Http.HttpContext" />.
            </summary>
        <returns>A URI with an absolute path, or <c>null</c>.</returns>
        <remarks>
          <para>
            The value of <paramref name="host" /> should be a trusted value. Relying on the value of the current request
            can allow untrusted input to influence the resulting URI unless the <c>Host</c> header has been validated.
            See the deployment documentation for instructions on how to properly validate the <c>Host</c> header in
            your deployment environment.
            </para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
