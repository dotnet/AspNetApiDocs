<Type Name="Prerenderer" FullName="Microsoft.AspNetCore.SpaServices.Prerendering.Prerenderer">
  <TypeSignature Language="C++ CLI" Value="public ref class Prerenderer abstract sealed" />
  <TypeSignature Language="C#" Value="public static class Prerenderer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Prerenderer extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.SpaServices.Prerendering.Prerenderer" />
  <TypeSignature Language="VB.NET" Value="Public Class Prerenderer" />
  <TypeSignature Language="F#" Value="type Prerenderer = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.SpaServices</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.3.0</AssemblyVersion>
    <AssemblyVersion>3.1.12.0</AssemblyVersion>
    <AssemblyVersion>3.1.18.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
      <AttributeName Language="C#">[System.Obsolete("Use Microsoft.AspNetCore.SpaServices.Extensions")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("Use Microsoft.AspNetCore.SpaServices.Extensions")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Performs server-side prerendering by invoking code in Node.js.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="RenderToString">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::Tasks::Task&lt;Microsoft::AspNetCore::SpaServices::Prerendering::RenderToStringResult ^&gt; ^ RenderToString(System::String ^ applicationBasePath, Microsoft::AspNetCore::NodeServices::INodeServices ^ nodeServices, System::Threading::CancellationToken applicationStoppingToken, Microsoft::AspNetCore::SpaServices::Prerendering::JavaScriptModuleExport ^ bootModule, System::String ^ requestAbsoluteUrl, System::String ^ requestPathAndQuery, System::Object ^ customDataParameter, int timeoutMilliseconds, System::String ^ requestPathBase);" />
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.SpaServices.Prerendering.RenderToStringResult&gt; RenderToString (string applicationBasePath, Microsoft.AspNetCore.NodeServices.INodeServices nodeServices, System.Threading.CancellationToken applicationStoppingToken, Microsoft.AspNetCore.SpaServices.Prerendering.JavaScriptModuleExport bootModule, string requestAbsoluteUrl, string requestPathAndQuery, object customDataParameter, int timeoutMilliseconds, string requestPathBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.SpaServices.Prerendering.RenderToStringResult&gt; RenderToString(string applicationBasePath, class Microsoft.AspNetCore.NodeServices.INodeServices nodeServices, valuetype System.Threading.CancellationToken applicationStoppingToken, class Microsoft.AspNetCore.SpaServices.Prerendering.JavaScriptModuleExport bootModule, string requestAbsoluteUrl, string requestPathAndQuery, object customDataParameter, int32 timeoutMilliseconds, string requestPathBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SpaServices.Prerendering.Prerenderer.RenderToString(System.String,Microsoft.AspNetCore.NodeServices.INodeServices,System.Threading.CancellationToken,Microsoft.AspNetCore.SpaServices.Prerendering.JavaScriptModuleExport,System.String,System.String,System.Object,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RenderToString (applicationBasePath As String, nodeServices As INodeServices, applicationStoppingToken As CancellationToken, bootModule As JavaScriptModuleExport, requestAbsoluteUrl As String, requestPathAndQuery As String, customDataParameter As Object, timeoutMilliseconds As Integer, requestPathBase As String) As Task(Of RenderToStringResult)" />
      <MemberSignature Language="F#" Value="static member RenderToString : string * Microsoft.AspNetCore.NodeServices.INodeServices * System.Threading.CancellationToken * Microsoft.AspNetCore.SpaServices.Prerendering.JavaScriptModuleExport * string * string * obj * int * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.SpaServices.Prerendering.RenderToStringResult&gt;" Usage="Microsoft.AspNetCore.SpaServices.Prerendering.Prerenderer.RenderToString (applicationBasePath, nodeServices, applicationStoppingToken, bootModule, requestAbsoluteUrl, requestPathAndQuery, customDataParameter, timeoutMilliseconds, requestPathBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SpaServices</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1">
          <AttributeName Language="C#">[System.Obsolete("Use Microsoft.AspNetCore.SpaServices.Extensions")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("Use Microsoft.AspNetCore.SpaServices.Extensions")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.SpaServices.Prerendering.RenderToStringResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="applicationBasePath" Type="System.String" />
        <Parameter Name="nodeServices" Type="Microsoft.AspNetCore.NodeServices.INodeServices" />
        <Parameter Name="applicationStoppingToken" Type="System.Threading.CancellationToken" />
        <Parameter Name="bootModule" Type="Microsoft.AspNetCore.SpaServices.Prerendering.JavaScriptModuleExport" />
        <Parameter Name="requestAbsoluteUrl" Type="System.String" />
        <Parameter Name="requestPathAndQuery" Type="System.String" />
        <Parameter Name="customDataParameter" Type="System.Object" />
        <Parameter Name="timeoutMilliseconds" Type="System.Int32" />
        <Parameter Name="requestPathBase" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="applicationBasePath">The root path to your application. This is used when resolving project-relative paths.</param>
        <param name="nodeServices">The instance of <see cref="T:Microsoft.AspNetCore.NodeServices.INodeServices" /> that will be used to invoke JavaScript code.</param>
        <param name="applicationStoppingToken">A token that indicates when the host application is stopping.</param>
        <param name="bootModule">The path to the JavaScript file containing the prerendering logic.</param>
        <param name="requestAbsoluteUrl">The URL of the currently-executing HTTP request. This is supplied to the prerendering code.</param>
        <param name="requestPathAndQuery">The path and query part of the URL of the currently-executing HTTP request. This is supplied to the prerendering code.</param>
        <param name="customDataParameter">An optional JSON-serializable parameter to be supplied to the prerendering code.</param>
        <param name="timeoutMilliseconds">The maximum duration to wait for prerendering to complete.</param>
        <param name="requestPathBase">The PathBase for the currently-executing HTTP request.</param>
        <summary>
            Performs server-side prerendering by invoking code in Node.js.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
