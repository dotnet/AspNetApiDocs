<Type Name="AppBuilder" FullName="Microsoft.Owin.Builder.AppBuilder">
  <TypeSignature Language="C#" Value="public class AppBuilder : Owin.IAppBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AppBuilder extends System.Object implements class Owin.IAppBuilder" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Owin.Builder.AppBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class AppBuilder&#xA;Implements IAppBuilder" />
  <TypeSignature Language="F#" Value="type AppBuilder = class&#xA;    interface IAppBuilder" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Owin</AssemblyName>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Owin.IAppBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A standard implementation of IAppBuilder 
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AppBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Owin.Builder.AppBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Owin</AssemblyName>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Initializes a new instance of the the type.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public object Build (Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Build(class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Owin.Builder.AppBuilder.Build(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function Build (returnType As Type) As Object" />
      <MemberSignature Language="F#" Value="abstract member Build : Type -&gt; obj&#xA;override this.Build : Type -&gt; obj" Usage="appBuilder.Build returnType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Owin.IAppBuilder.Build(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Owin</AssemblyName>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="returnType">
            The Type argument indicates which calling convention should be returned, and
            is typically typeof(<typeref name="Func&lt;IDictionary&lt;string,object&gt;, Task&gt;" />) for the OWIN
            calling convention.
            </param>
        <summary>
            The Build is called at the point when all of the middleware should be chained
            together. This is typically done by the hosting component which created the app builder,
            and does not need to be called by the startup method if the IAppBuilder is passed in.
            </summary>
        <returns>
            Returns an instance of the pipeline's entry point. This object may be safely cast to the
            type which was provided
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public Owin.IAppBuilder New ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Owin.IAppBuilder New() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Owin.Builder.AppBuilder.New" />
      <MemberSignature Language="VB.NET" Value="Public Function New () As IAppBuilder" />
      <MemberSignature Language="F#" Value="abstract member New : unit -&gt; Owin.IAppBuilder&#xA;override this.New : unit -&gt; Owin.IAppBuilder" Usage="appBuilder.New " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Owin.IAppBuilder.New</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Owin</AssemblyName>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Owin.IAppBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            The New method creates a new instance of an IAppBuilder. This is needed to create
            a tree structure in your processing, rather than a linear pipeline. The new instance share the
            same Properties, but will be created with a new, empty middleware list.
            
            To create a tangent pipeline you would first call New, followed by several calls to Use on 
            the new builder, ending with a call to Build on the new builder. The return value from Build
            will be the entry-point to your tangent pipeline. This entry-point may now be added to the
            main pipeline as an argument to a switching middleware, which will either call the tangent
            pipeline or the "next app", based on something in the request.
            
            That said - all of that work is typically hidden by a middleware like Map, which will do that
            for you.
            </summary>
        <returns>The new instance of the IAppBuilder implementation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Properties" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Owin.Builder.AppBuilder.Properties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Properties As IDictionary(Of String, Object)" />
      <MemberSignature Language="F#" Value="member this.Properties : System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="Microsoft.Owin.Builder.AppBuilder.Properties" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Owin.IAppBuilder.Properties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Owin</AssemblyName>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Contains arbitrary properties which may added, examined, and modified by
            components during the startup sequence. 
            </summary>
        <value>Returns <see cref="T:System.Collections.Generic.IDictionary`2" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Use">
      <MemberSignature Language="C#" Value="public Owin.IAppBuilder Use (object middleware, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Owin.IAppBuilder Use(object middleware, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Owin.Builder.AppBuilder.Use(System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Use (middleware As Object, ParamArray args As Object()) As IAppBuilder" />
      <MemberSignature Language="F#" Value="abstract member Use : obj * obj[] -&gt; Owin.IAppBuilder&#xA;override this.Use : obj * obj[] -&gt; Owin.IAppBuilder" Usage="appBuilder.Use (middleware, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Owin.IAppBuilder.Use(System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Owin</AssemblyName>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Owin.IAppBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="middleware" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="middleware">
            The middleware parameter determines which behavior is being chained into the
            pipeline. 
            
            If the middleware given to Use is a Delegate, then it will be invoked with the "next app" in 
            the chain as the first parameter. If the delegate takes more than the single argument, 
            then the additional values must be provided to Use in the args array.
            
            If the middleware given to Use is a Type, then the public constructor will be 
            invoked with the "next app" in the chain as the first parameter. The resulting object
            must have a public Invoke method. If the object has constructors which take more than
            the single "next app" argument, then additional values may be provided in the args array.
            </param>
        <param name="args">
            Any additional args passed to Use will be passed as additional values, following the "next app"
            parameter, when the OWIN call pipeline is build.
            
            They are passed as additional parameters if the middleware parameter is a Delegate, or as additional
            constructor arguments if the middle parameter is a Type.
            </param>
        <summary>
            Adds a middleware node to the OWIN function pipeline. The middleware are
            invoked in the order they are added: the first middleware passed to Use will
            be the outermost function, and the last middleware passed to Use will be the
            innermost.
            </summary>
        <returns>
            The IAppBuilder itself is returned. This enables you to chain your use statements together.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
