<Type Name="HubConnection" FullName="Microsoft.AspNetCore.SignalR.Client.HubConnection">
  <TypeSignature Language="C++ CLI" Value="public ref class HubConnection" />
  <TypeSignature Language="C#" Value="public class HubConnection" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HubConnection extends System.Object" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" />
  <TypeSignature Language="VB.NET" Value="Public Class HubConnection" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1" />
  <TypeSignature Language="F#" Value="type HubConnection = class" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1" />
  <TypeSignature Language="C#" Value="public class HubConnection : IAsyncDisposable" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HubConnection extends System.Object implements class System.IAsyncDisposable" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class HubConnection&#xA;Implements IAsyncDisposable" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
  <TypeSignature Language="F#" Value="type HubConnection = class&#xA;    interface IAsyncDisposable" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.3.0</AssemblyVersion>
    <AssemblyVersion>3.1.12.0</AssemblyVersion>
    <AssemblyVersion>3.1.18.0</AssemblyVersion>
    <AssemblyVersion>5.0.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.9.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.5.0</AssemblyVersion>
    <AssemblyVersion>6.0.6.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.3.0</AssemblyVersion>
    <AssemblyVersion>7.0.5.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A connection used to invoke hub methods on a SignalR Server.
            </summary>
    <remarks>
            A <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> should be created using <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnectionBuilder" />.
            Before hub methods can be invoked the connection must be started using <see cref="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsync(System.Threading.CancellationToken)" />.
            Clean up a connection using <see cref="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StopAsync(System.Threading.CancellationToken)" /> or <see cref="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.DisposeAsync" />.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HubConnection(Microsoft::AspNetCore::SignalR::Client::IConnectionFactory ^ connectionFactory, Microsoft::AspNetCore::SignalR::Protocol::IHubProtocol ^ protocol, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberSignature Language="C#" Value="public HubConnection (Microsoft.AspNetCore.SignalR.Client.IConnectionFactory connectionFactory, Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol protocol, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.SignalR.Client.IConnectionFactory connectionFactory, class Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol protocol, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.#ctor(Microsoft.AspNetCore.SignalR.Client.IConnectionFactory,Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionFactory As IConnectionFactory, protocol As IHubProtocol, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.SignalR.Client.HubConnection : Microsoft.AspNetCore.SignalR.Client.IConnectionFactory * Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.SignalR.Client.HubConnection" Usage="new Microsoft.AspNetCore.SignalR.Client.HubConnection (connectionFactory, protocol, loggerFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionFactory" Type="Microsoft.AspNetCore.SignalR.Client.IConnectionFactory" Index="0" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2" />
        <Parameter Name="protocol" Type="Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol" Index="1" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" Index="2" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2" />
      </Parameters>
      <Docs>
        <param name="connectionFactory">The <see cref="T:Microsoft.AspNetCore.SignalR.Client.IConnectionFactory" /> used to create a connection each time <see cref="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsync(System.Threading.CancellationToken)" /> is called.</param>
        <param name="protocol">The <see cref="T:Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol" /> used by the connection.</param>
        <param name="loggerFactory">The logger factory.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HubConnection(Microsoft::AspNetCore::SignalR::Client::IConnectionFactory ^ connectionFactory, Microsoft::AspNetCore::SignalR::Protocol::IHubProtocol ^ protocol, IServiceProvider ^ serviceProvider, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberSignature Language="C#" Value="public HubConnection (Microsoft.AspNetCore.SignalR.Client.IConnectionFactory connectionFactory, Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol protocol, IServiceProvider serviceProvider, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.SignalR.Client.IConnectionFactory connectionFactory, class Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol protocol, class System.IServiceProvider serviceProvider, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.#ctor(Microsoft.AspNetCore.SignalR.Client.IConnectionFactory,Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol,System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionFactory As IConnectionFactory, protocol As IHubProtocol, serviceProvider As IServiceProvider, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.SignalR.Client.HubConnection : Microsoft.AspNetCore.SignalR.Client.IConnectionFactory * Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol * IServiceProvider * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.SignalR.Client.HubConnection" Usage="new Microsoft.AspNetCore.SignalR.Client.HubConnection (connectionFactory, protocol, serviceProvider, loggerFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionFactory" Type="Microsoft.AspNetCore.SignalR.Client.IConnectionFactory" Index="0" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2" />
        <Parameter Name="protocol" Type="Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol" Index="1" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" Index="2" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" Index="3" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2" />
      </Parameters>
      <Docs>
        <param name="connectionFactory">The <see cref="T:Microsoft.AspNetCore.SignalR.Client.IConnectionFactory" /> used to create a connection each time <see cref="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsync(System.Threading.CancellationToken)" /> is called.</param>
        <param name="protocol">The <see cref="T:Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol" /> used by the connection.</param>
        <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> containing the services provided to this <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> instance.</param>
        <param name="loggerFactory">The logger factory.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> class.
            </summary>
        <remarks>
            The <see cref="T:System.IServiceProvider" /> used to initialize the connection will be disposed when the connection is disposed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HubConnection(Microsoft::AspNetCore::Connections::IConnectionFactory ^ connectionFactory, Microsoft::AspNetCore::SignalR::Protocol::IHubProtocol ^ protocol, System::Net::EndPoint ^ endPoint, IServiceProvider ^ serviceProvider, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory);" />
      <MemberSignature Language="C#" Value="public HubConnection (Microsoft.AspNetCore.Connections.IConnectionFactory connectionFactory, Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol protocol, System.Net.EndPoint endPoint, IServiceProvider serviceProvider, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Connections.IConnectionFactory connectionFactory, class Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol protocol, class System.Net.EndPoint endPoint, class System.IServiceProvider serviceProvider, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.#ctor(Microsoft.AspNetCore.Connections.IConnectionFactory,Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol,System.Net.EndPoint,System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionFactory As IConnectionFactory, protocol As IHubProtocol, endPoint As EndPoint, serviceProvider As IServiceProvider, loggerFactory As ILoggerFactory)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.SignalR.Client.HubConnection : Microsoft.AspNetCore.Connections.IConnectionFactory * Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol * System.Net.EndPoint * IServiceProvider * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.AspNetCore.SignalR.Client.HubConnection" Usage="new Microsoft.AspNetCore.SignalR.Client.HubConnection (connectionFactory, protocol, endPoint, serviceProvider, loggerFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionFactory" Type="Microsoft.AspNetCore.Connections.IConnectionFactory" Index="0" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="protocol" Type="Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol" Index="1" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="endPoint" Type="System.Net.EndPoint" Index="2" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" Index="3" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" Index="4" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="connectionFactory">The <see cref="T:Microsoft.AspNetCore.Connections.IConnectionFactory" /> used to create a connection each time <see cref="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsync(System.Threading.CancellationToken)" /> is called.</param>
        <param name="protocol">The <see cref="T:Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol" /> used by the connection.</param>
        <param name="endPoint">The <see cref="T:System.Net.EndPoint" /> to connect to.</param>
        <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> containing the services provided to this <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> instance.</param>
        <param name="loggerFactory">The logger factory.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> class.
            </summary>
        <remarks>
            The <see cref="T:System.IServiceProvider" /> used to initialize the connection will be disposed when the connection is disposed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HubConnection(Microsoft::AspNetCore::Connections::IConnectionFactory ^ connectionFactory, Microsoft::AspNetCore::SignalR::Protocol::IHubProtocol ^ protocol, System::Net::EndPoint ^ endPoint, IServiceProvider ^ serviceProvider, Microsoft::Extensions::Logging::ILoggerFactory ^ loggerFactory, Microsoft::AspNetCore::SignalR::Client::IRetryPolicy ^ reconnectPolicy);" />
      <MemberSignature Language="C#" Value="public HubConnection (Microsoft.AspNetCore.Connections.IConnectionFactory connectionFactory, Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol protocol, System.Net.EndPoint endPoint, IServiceProvider serviceProvider, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, Microsoft.AspNetCore.SignalR.Client.IRetryPolicy reconnectPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.AspNetCore.Connections.IConnectionFactory connectionFactory, class Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol protocol, class System.Net.EndPoint endPoint, class System.IServiceProvider serviceProvider, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, class Microsoft.AspNetCore.SignalR.Client.IRetryPolicy reconnectPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.#ctor(Microsoft.AspNetCore.Connections.IConnectionFactory,Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol,System.Net.EndPoint,System.IServiceProvider,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.AspNetCore.SignalR.Client.IRetryPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionFactory As IConnectionFactory, protocol As IHubProtocol, endPoint As EndPoint, serviceProvider As IServiceProvider, loggerFactory As ILoggerFactory, reconnectPolicy As IRetryPolicy)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.SignalR.Client.HubConnection : Microsoft.AspNetCore.Connections.IConnectionFactory * Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol * System.Net.EndPoint * IServiceProvider * Microsoft.Extensions.Logging.ILoggerFactory * Microsoft.AspNetCore.SignalR.Client.IRetryPolicy -&gt; Microsoft.AspNetCore.SignalR.Client.HubConnection" Usage="new Microsoft.AspNetCore.SignalR.Client.HubConnection (connectionFactory, protocol, endPoint, serviceProvider, loggerFactory, reconnectPolicy)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionFactory" Type="Microsoft.AspNetCore.Connections.IConnectionFactory" Index="0" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="protocol" Type="Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol" Index="1" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="endPoint" Type="System.Net.EndPoint" Index="2" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" Index="3" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" Index="4" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="reconnectPolicy" Type="Microsoft.AspNetCore.SignalR.Client.IRetryPolicy" Index="5" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="connectionFactory">The <see cref="T:Microsoft.AspNetCore.Connections.IConnectionFactory" /> used to create a connection each time <see cref="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsync(System.Threading.CancellationToken)" /> is called.</param>
        <param name="protocol">The <see cref="T:Microsoft.AspNetCore.SignalR.Protocol.IHubProtocol" /> used by the connection.</param>
        <param name="endPoint">The <see cref="T:System.Net.EndPoint" /> to connect to.</param>
        <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> containing the services provided to this <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> instance.</param>
        <param name="loggerFactory">The logger factory.</param>
        <param name="reconnectPolicy">
            The <see cref="T:Microsoft.AspNetCore.SignalR.Client.IRetryPolicy" /> that controls the timing and number of reconnect attempts.
            The <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> will not reconnect if the <paramref name="reconnectPolicy" /> is null.
            </param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> class.
            </summary>
        <remarks>
            The <see cref="T:System.IServiceProvider" /> used to initialize the connection will be disposed when the connection is disposed.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Closed">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Func&lt;Exception ^, System::Threading::Tasks::Task ^&gt; ^ Closed;" />
      <MemberSignature Language="C#" Value="public event Func&lt;Exception,System.Threading.Tasks.Task&gt; Closed;" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".event class System.Func`2&lt;class System.Exception, class System.Threading.Tasks.Task&gt; Closed" />
      <MemberSignature Language="DocId" Value="E:Microsoft.AspNetCore.SignalR.Client.HubConnection.Closed" />
      <MemberSignature Language="VB.NET" Value="Public Event Closed As Func(Of Exception, Task) " />
      <MemberSignature Language="F#" Value="member this.Closed : Func&lt;Exception, System.Threading.Tasks.Task&gt; " Usage="member this.Closed : System.Func&lt;System.Exception, System.Threading.Tasks.Task&gt; " />
      <MemberSignature Language="C#" Value="public event Func&lt;Exception?,System.Threading.Tasks.Task&gt;? Closed;" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Exception,System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Occurs when the connection is closed. The connection could be closed due to an error or due to either the server or client intentionally
             closing the connection without error.
             </summary>
        <remarks>
             If this event was triggered from a connection error, the <see cref="T:System.Exception" /> that occurred will be passed in as the
             sole argument to this handler. If this event was triggered intentionally by either the client or server, then
             the argument will be <see langword="null" />.
             </remarks>
        <example>
             The following example attaches a handler to the <see cref="E:Microsoft.AspNetCore.SignalR.Client.HubConnection.Closed" /> event, and checks the provided argument to determine
             if there was an error:
            
             <code>
             connection.Closed += (exception) =&gt;
             {
                 if (exception == null)
                 {
                     Console.WriteLine("Connection closed without error.");
                 }
                 else
                 {
                     Console.WriteLine($"Connection closed due to an error: {exception}");
                 }
             };
             </code></example>
      </Docs>
    </Member>
    <Member MemberName="ConnectionId">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ConnectionId { System::String ^ get(); };" />
      <MemberSignature Language="C#" Value="public string ConnectionId { get; }" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionId" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.SignalR.Client.HubConnection.ConnectionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConnectionId As String" />
      <MemberSignature Language="F#" Value="member this.ConnectionId : string" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.ConnectionId" />
      <MemberSignature Language="C#" Value="public string? ConnectionId { get; }" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the connection's current Id. This value will be cleared when the connection is stopped and will have a new value every time the connection is (re)established.
            This value will be null if the negotiation step is skipped via HttpConnectionOptions or if the WebSockets transport is explicitly specified because the
            client skips negotiation in that case as well.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultHandshakeTimeout">
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan DefaultHandshakeTimeout;" />
      <MemberSignature Language="C#" Value="public static readonly TimeSpan DefaultHandshakeTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan DefaultHandshakeTimeout" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.SignalR.Client.HubConnection.DefaultHandshakeTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultHandshakeTimeout As TimeSpan " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultHandshakeTimeout : TimeSpan" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.DefaultHandshakeTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The default timeout which specifies how long to wait for the handshake to respond before closing the connection. Default is 15 seconds.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultKeepAliveInterval">
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan DefaultKeepAliveInterval;" />
      <MemberSignature Language="C#" Value="public static readonly TimeSpan DefaultKeepAliveInterval;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan DefaultKeepAliveInterval" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.SignalR.Client.HubConnection.DefaultKeepAliveInterval" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultKeepAliveInterval As TimeSpan " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultKeepAliveInterval : TimeSpan" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.DefaultKeepAliveInterval" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The default interval that the client will send keep alive messages to let the server know to not close the connection. Default is 15 second interval.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultServerTimeout">
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan DefaultServerTimeout;" />
      <MemberSignature Language="C#" Value="public static readonly TimeSpan DefaultServerTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan DefaultServerTimeout" />
      <MemberSignature Language="DocId" Value="F:Microsoft.AspNetCore.SignalR.Client.HubConnection.DefaultServerTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultServerTimeout As TimeSpan " />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultServerTimeout : TimeSpan" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.DefaultServerTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            The default timeout which specifies how long to wait for a message before closing the connection. Default is 30 seconds.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task ^ DisposeAsync();" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DisposeAsync ();" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DisposeAsync() cil managed" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As Task" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1" />
      <MemberSignature Language="F#" Value="member this.DisposeAsync : unit -&gt; System.Threading.Tasks.Task" Usage="hubConnection.DisposeAsync " FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" FrameworkAlternate="aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" FrameworkAlternate="aspnetcore-5.0" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="hubConnection.DisposeAsync " FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask DisposeAsync ();" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DisposeAsync () As ValueTask" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1">System.Threading.Tasks.Task</ReturnType>
        <ReturnType FrameworkAlternate="aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Disposes the <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> that represents the asynchronous dispose.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandshakeTimeout">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan HandshakeTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="C#" Value="public TimeSpan HandshakeTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan HandshakeTimeout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.SignalR.Client.HubConnection.HandshakeTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property HandshakeTimeout As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.HandshakeTimeout : TimeSpan with get, set" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.HandshakeTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the timeout for the initial handshake.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCoreAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;object&gt; InvokeCoreAsync (string methodName, Type returnType, object[] args, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;object&gt; InvokeCoreAsync(string methodName, class System.Type returnType, object[] args, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.InvokeCoreAsync(System.String,System.Type,System.Object[],System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeCoreAsync (methodName As String, returnType As Type, args As Object(), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Object)" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="F#" Value="member this.InvokeCoreAsync : string * Type * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="hubConnection.InvokeCoreAsync (methodName, returnType, args, cancellationToken)" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object?&gt; InvokeCoreAsync (string methodName, Type returnType, object?[] args, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; InvokeCoreAsync(string methodName, class System.Type returnType, object[] args, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function InvokeCoreAsync (methodName As String, returnType As Type, args As Object(), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Object)" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member InvokeCoreAsync : string * Type * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.InvokeCoreAsync : string * Type * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="hubConnection.InvokeCoreAsync (methodName, returnType, args, cancellationToken)" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the server method to invoke.</param>
        <param name="returnType">The return type of the server method.</param>
        <param name="args">The arguments used to invoke the server method.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Invokes a hub method on the server using the specified method name, return type and arguments.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous invoke.
            The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property returns an <see cref="T:System.Object" /> for the hub method return value.
            </returns>
        <remarks>
            This is a low level method for invoking a hub method on the server. Using an <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions" /><c>InvokeAsync</c> extension method is recommended.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAliveInterval">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan KeepAliveInterval { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="C#" Value="public TimeSpan KeepAliveInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan KeepAliveInterval" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.SignalR.Client.HubConnection.KeepAliveInterval" />
      <MemberSignature Language="VB.NET" Value="Public Property KeepAliveInterval As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.KeepAliveInterval : TimeSpan with get, set" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.KeepAliveInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the interval at which the client sends ping messages.
            </summary>
        <value>To be added.</value>
        <remarks>
            Sending any message resets the timer to the start of the interval.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="On">
      <MemberSignature Language="C#" Value="public virtual IDisposable On (string methodName, Type[] parameterTypes, Func&lt;object?[],object,System.Threading.Tasks.Task&lt;object?&gt;&gt; handler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable On(string methodName, class System.Type[] parameterTypes, class System.Func`3&lt;object[], object, class System.Threading.Tasks.Task`1&lt;object&gt;&gt; handler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.On(System.String,System.Type[],System.Func{System.Object[],System.Object,System.Threading.Tasks.Task{System.Object}},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function On (methodName As String, parameterTypes As Type(), handler As Func(Of Object(), Object, Task(Of Object)), state As Object) As IDisposable" />
      <MemberSignature Language="F#" Value="abstract member On : string * Type[] * Func&lt;obj[], obj, System.Threading.Tasks.Task&lt;obj&gt;&gt; * obj -&gt; IDisposable&#xA;override this.On : string * Type[] * Func&lt;obj[], obj, System.Threading.Tasks.Task&lt;obj&gt;&gt; * obj -&gt; IDisposable" Usage="hubConnection.On (methodName, parameterTypes, handler, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="parameterTypes" Type="System.Type[]" Index="1" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="handler" Type="System.Func&lt;System.Object[],System.Object,System.Threading.Tasks.Task&lt;System.Object&gt;&gt;" Index="2" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="state" Type="System.Object" Index="3" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the hub method to define.</param>
        <param name="parameterTypes">The parameters types expected by the hub method.</param>
        <param name="handler">The handler that will be raised when the hub method is invoked.</param>
        <param name="state">A state object that will be passed to the handler.</param>
        <summary>
            Registers a handler that will be invoked when the hub method with the specified method name is invoked.
            Returns value returned by handler to server if the server requests a result.
            </summary>
        <returns>A subscription that can be disposed to unsubscribe from the hub method.</returns>
        <remarks>
            This is a low level method for registering a handler. Using an <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions" /><c>On</c> extension method is recommended.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="On">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IDisposable ^ On(System::String ^ methodName, cli::array &lt;Type ^&gt; ^ parameterTypes, Func&lt;cli::array &lt;System::Object ^&gt; ^, System::Object ^, System::Threading::Tasks::Task ^&gt; ^ handler, System::Object ^ state);" />
      <MemberSignature Language="C#" Value="public IDisposable On (string methodName, Type[] parameterTypes, Func&lt;object[],object,System.Threading.Tasks.Task&gt; handler, object state);" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable On(string methodName, class System.Type[] parameterTypes, class System.Func`3&lt;object[], object, class System.Threading.Tasks.Task&gt; handler, object state) cil managed" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.On(System.String,System.Type[],System.Func{System.Object[],System.Object,System.Threading.Tasks.Task},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function On (methodName As String, parameterTypes As Type(), handler As Func(Of Object(), Object, Task), state As Object) As IDisposable" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="F#" Value="member this.On : string * Type[] * Func&lt;obj[], obj, System.Threading.Tasks.Task&gt; * obj -&gt; IDisposable" Usage="hubConnection.On (methodName, parameterTypes, handler, state)" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="C#" Value="public virtual IDisposable On (string methodName, Type[] parameterTypes, Func&lt;object?[],object,System.Threading.Tasks.Task&gt; handler, object state);" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable On(string methodName, class System.Type[] parameterTypes, class System.Func`3&lt;object[], object, class System.Threading.Tasks.Task&gt; handler, object state) cil managed" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function On (methodName As String, parameterTypes As Type(), handler As Func(Of Object(), Object, Task), state As Object) As IDisposable" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member On : string * Type[] * Func&lt;obj[], obj, System.Threading.Tasks.Task&gt; * obj -&gt; IDisposable&#xA;override this.On : string * Type[] * Func&lt;obj[], obj, System.Threading.Tasks.Task&gt; * obj -&gt; IDisposable" Usage="hubConnection.On (methodName, parameterTypes, handler, state)" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="parameterTypes" Type="System.Type[]" />
        <Parameter Name="handler" Type="System.Func&lt;System.Object[],System.Object,System.Threading.Tasks.Task&gt;" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the hub method to define.</param>
        <param name="parameterTypes">The parameters types expected by the hub method.</param>
        <param name="handler">The handler that will be raised when the hub method is invoked.</param>
        <param name="state">A state object that will be passed to the handler.</param>
        <summary>
            Registers a handler that will be invoked when the hub method with the specified method name is invoked.
            </summary>
        <returns>A subscription that can be disposed to unsubscribe from the hub method.</returns>
        <remarks>
            This is a low level method for registering a handler. Using an <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions" /><c>On</c> extension method is recommended.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reconnected">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Func&lt;System::String ^, System::Threading::Tasks::Task ^&gt; ^ Reconnected;" />
      <MemberSignature Language="C#" Value="public event Func&lt;string,System.Threading.Tasks.Task&gt; Reconnected;" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".event class System.Func`2&lt;string, class System.Threading.Tasks.Task&gt; Reconnected" />
      <MemberSignature Language="DocId" Value="E:Microsoft.AspNetCore.SignalR.Client.HubConnection.Reconnected" />
      <MemberSignature Language="VB.NET" Value="Public Event Reconnected As Func(Of String, Task) " />
      <MemberSignature Language="F#" Value="member this.Reconnected : Func&lt;string, System.Threading.Tasks.Task&gt; " Usage="member this.Reconnected : System.Func&lt;System.string, System.Threading.Tasks.Task&gt; " />
      <MemberSignature Language="C#" Value="public event Func&lt;string?,System.Threading.Tasks.Task&gt;? Reconnected;" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.String,System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Occurs when the <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> successfully reconnects after losing its underlying connection.
             </summary>
        <remarks>
             The <see cref="T:System.String" /> parameter will be the <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" />'s new ConnectionId or null if negotiation was skipped.
             </remarks>
        <example>
             The following example attaches a handler to the <see cref="E:Microsoft.AspNetCore.SignalR.Client.HubConnection.Reconnected" /> event, and checks the provided argument to log the ConnectionId.
            
             <code>
             connection.Reconnected += (connectionId) =&gt;
             {
                 Console.WriteLine($"Connection successfully reconnected. The ConnectionId is now: {connectionId}");
             };
             </code></example>
      </Docs>
    </Member>
    <Member MemberName="Reconnecting">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Func&lt;Exception ^, System::Threading::Tasks::Task ^&gt; ^ Reconnecting;" />
      <MemberSignature Language="C#" Value="public event Func&lt;Exception,System.Threading.Tasks.Task&gt; Reconnecting;" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".event class System.Func`2&lt;class System.Exception, class System.Threading.Tasks.Task&gt; Reconnecting" />
      <MemberSignature Language="DocId" Value="E:Microsoft.AspNetCore.SignalR.Client.HubConnection.Reconnecting" />
      <MemberSignature Language="VB.NET" Value="Public Event Reconnecting As Func(Of Exception, Task) " />
      <MemberSignature Language="F#" Value="member this.Reconnecting : Func&lt;Exception, System.Threading.Tasks.Task&gt; " Usage="member this.Reconnecting : System.Func&lt;System.Exception, System.Threading.Tasks.Task&gt; " />
      <MemberSignature Language="C#" Value="public event Func&lt;Exception?,System.Threading.Tasks.Task&gt;? Reconnecting;" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Exception,System.Threading.Tasks.Task&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             Occurs when the <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> starts reconnecting after losing its underlying connection.
             </summary>
        <remarks>
             The <see cref="T:System.Exception" /> that occurred will be passed in as the sole argument to this handler.
             </remarks>
        <example>
             The following example attaches a handler to the <see cref="E:Microsoft.AspNetCore.SignalR.Client.HubConnection.Reconnecting" /> event, and checks the provided argument to log the error.
            
             <code>
             connection.Reconnecting += (exception) =&gt;
             {
                 Console.WriteLine($"Connection started reconnecting due to an error: {exception}");
             };
             </code></example>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ methodName);" />
      <MemberSignature Language="C#" Value="public void Remove (string methodName);" FrameworkAlternate="aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string methodName) cil managed" FrameworkAlternate="aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (methodName As String)" FrameworkAlternate="aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="hubConnection.Remove methodName" FrameworkAlternate="aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="C#" Value="public virtual void Remove (string methodName);" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(string methodName) cil managed" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (methodName As String)" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member Remove : string -&gt; unit&#xA;override this.Remove : string -&gt; unit" Usage="hubConnection.Remove methodName" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the hub method from which handlers are being removed</param>
        <summary>
            Removes all handlers associated with the method with the specified method name.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetSendPing">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetSendPing();" />
      <MemberSignature Language="C#" Value="public void ResetSendPing ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetSendPing() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.ResetSendPing" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetSendPing ()" />
      <MemberSignature Language="F#" Value="member this.ResetSendPing : unit -&gt; unit" Usage="hubConnection.ResetSendPing " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTimeout">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTimeout();" />
      <MemberSignature Language="C#" Value="public void ResetTimeout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTimeout() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.ResetTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTimeout ()" />
      <MemberSignature Language="F#" Value="member this.ResetTimeout : unit -&gt; unit" Usage="hubConnection.ResetTimeout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendCoreAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendCoreAsync (string methodName, object[] args, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SendCoreAsync(string methodName, object[] args, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.SendCoreAsync(System.String,System.Object[],System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendCoreAsync (methodName As String, args As Object(), Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="F#" Value="member this.SendCoreAsync : string * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="hubConnection.SendCoreAsync (methodName, args, cancellationToken)" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SendCoreAsync (string methodName, object?[] args, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SendCoreAsync(string methodName, object[] args, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SendCoreAsync (methodName As String, args As Object(), Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member SendCoreAsync : string * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SendCoreAsync : string * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="hubConnection.SendCoreAsync (methodName, args, cancellationToken)" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the server method to invoke.</param>
        <param name="args">The arguments used to invoke the server method.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Invokes a hub method on the server using the specified method name and arguments.
            Does not wait for a response from the receiver.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous invoke.</returns>
        <remarks>
            This is a low level method for invoking a hub method on the server. Using an <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions" /><c>SendAsync</c> extension method is recommended.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerTimeout">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan ServerTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="C#" Value="public TimeSpan ServerTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan ServerTimeout" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.SignalR.Client.HubConnection.ServerTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property ServerTimeout As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.ServerTimeout : TimeSpan with get, set" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.ServerTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the server timeout interval for the connection.
            </summary>
        <value>To be added.</value>
        <remarks>
            The client times out if it hasn't heard from the server for `this` long.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StartAsync (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StartAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StartAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function StartAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="F#" Value="member this.StartAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="hubConnection.StartAsync cancellationToken" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task StartAsync (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task StartAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member StartAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.StartAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="hubConnection.StartAsync cancellationToken" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Starts a connection to the server.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous start.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::AspNetCore::SignalR::Client::HubConnectionState State { Microsoft::AspNetCore::SignalR::Client::HubConnectionState get(); };" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.SignalR.Client.HubConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.AspNetCore.SignalR.Client.HubConnectionState State" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.SignalR.Client.HubConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As HubConnectionState" />
      <MemberSignature Language="F#" Value="member this.State : Microsoft.AspNetCore.SignalR.Client.HubConnectionState" Usage="Microsoft.AspNetCore.SignalR.Client.HubConnection.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.SignalR.Client.HubConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates the state of the <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnection" /> to the server.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task StopAsync (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task StopAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StopAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function StopAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="F#" Value="member this.StopAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="hubConnection.StopAsync cancellationToken" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task StopAsync (System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task StopAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StopAsync (Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member StopAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.StopAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="hubConnection.StopAsync cancellationToken" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Stops a connection to the server.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous stop.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StreamAsChannelCoreAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Threading.Channels.ChannelReader&lt;object&gt;&gt; StreamAsChannelCoreAsync (string methodName, Type returnType, object[] args, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Threading.Channels.ChannelReader`1&lt;object&gt;&gt; StreamAsChannelCoreAsync(string methodName, class System.Type returnType, object[] args, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StreamAsChannelCoreAsync(System.String,System.Type,System.Object[],System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function StreamAsChannelCoreAsync (methodName As String, returnType As Type, args As Object(), Optional cancellationToken As CancellationToken = Nothing) As Task(Of ChannelReader(Of Object))" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="F#" Value="member this.StreamAsChannelCoreAsync : string * Type * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Threading.Channels.ChannelReader&lt;obj&gt;&gt;" Usage="hubConnection.StreamAsChannelCoreAsync (methodName, returnType, args, cancellationToken)" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Threading.Channels.ChannelReader&lt;object?&gt;&gt; StreamAsChannelCoreAsync (string methodName, Type returnType, object?[] args, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Threading.Channels.ChannelReader`1&lt;object&gt;&gt; StreamAsChannelCoreAsync(string methodName, class System.Type returnType, object[] args, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StreamAsChannelCoreAsync (methodName As String, returnType As Type, args As Object(), Optional cancellationToken As CancellationToken = Nothing) As Task(Of ChannelReader(Of Object))" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member StreamAsChannelCoreAsync : string * Type * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Threading.Channels.ChannelReader&lt;obj&gt;&gt;&#xA;override this.StreamAsChannelCoreAsync : string * Type * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Threading.Channels.ChannelReader&lt;obj&gt;&gt;" Usage="hubConnection.StreamAsChannelCoreAsync (methodName, returnType, args, cancellationToken)" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Threading.Channels.ChannelReader&lt;System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="methodName">The name of the server method to invoke.</param>
        <param name="returnType">The return type of the server method.</param>
        <param name="args">The arguments used to invoke the server method.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Invokes a streaming hub method on the server using the specified method name, return type and arguments.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous invoke.
            The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property returns a <see cref="T:System.Threading.Channels.ChannelReader`1" /> for the streamed hub method values.
            </returns>
        <remarks>
            This is a low level method for invoking a streaming hub method on the server. Using an <see cref="T:Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions" /><c>StreamAsChannelAsync</c> extension method is recommended.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="StreamAsyncCore&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; StreamAsyncCore&lt;TResult&gt; (string methodName, object[] args, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; StreamAsyncCore&lt;TResult&gt;(string methodName, object[] args, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.Client.HubConnection.StreamAsyncCore``1(System.String,System.Object[],System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function StreamAsyncCore(Of TResult) (methodName As String, args As Object(), Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of TResult)" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="F#" Value="member this.StreamAsyncCore : string * obj[] * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="hubConnection.StreamAsyncCore (methodName, args, cancellationToken)" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0" />
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt; StreamAsyncCore&lt;TResult&gt; (string methodName, object?[] args, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IAsyncEnumerable`1&lt;!!TResult&gt; StreamAsyncCore&lt;TResult&gt;(string methodName, object[] args, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StreamAsyncCore(Of TResult) (methodName As String, args As Object(), Optional cancellationToken As CancellationToken = Nothing) As IAsyncEnumerable(Of TResult)" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="abstract member StreamAsyncCore : string * obj[] * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;&#xA;override this.StreamAsyncCore : string * obj[] * System.Threading.CancellationToken -&gt; System.Collections.Generic.IAsyncEnumerable&lt;'Result&gt;" Usage="hubConnection.StreamAsyncCore (methodName, args, cancellationToken)" FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Client.Core</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.12.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.5.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.3.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IAsyncEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="methodName" Type="System.String" Index="0" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="args" Type="System.Object[]" Index="1" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">The return type of the streaming server method.</typeparam>
        <param name="methodName">The name of the server method to invoke.</param>
        <param name="args">The arguments used to invoke the server method.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
        <summary>
            Invokes a streaming hub method on the server using the specified method name, return type and arguments.
            </summary>
        <returns>
            A <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> that represents the stream.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
