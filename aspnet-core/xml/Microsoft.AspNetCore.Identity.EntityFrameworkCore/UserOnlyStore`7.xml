<Type Name="UserOnlyStore&lt;TUser,TContext,TKey,TUserClaim,TUserLogin,TUserToken,TUserPasskey&gt;" FullName="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore&lt;TUser,TContext,TKey,TUserClaim,TUserLogin,TUserToken,TUserPasskey&gt;">
  <TypeSignature Language="C#" Value="public class UserOnlyStore&lt;TUser,TContext,TKey,TUserClaim,TUserLogin,TUserToken,TUserPasskey&gt; : Microsoft.AspNetCore.Identity.UserStoreBase&lt;TUser,TKey,TUserClaim,TUserLogin,TUserToken&gt;, IDisposable, Microsoft.AspNetCore.Identity.IProtectedUserStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IQueryableUserStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserClaimStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserEmailStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserLockoutStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserLoginStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserPasskeyStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserPasswordStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserPhoneNumberStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserSecurityStampStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserTwoFactorStore&lt;TUser&gt; where TUser : IdentityUser&lt;TKey&gt; where TContext : DbContext where TKey : IEquatable&lt;TKey&gt; where TUserClaim : IdentityUserClaim&lt;TKey&gt;, new() where TUserLogin : IdentityUserLogin&lt;TKey&gt;, new() where TUserToken : IdentityUserToken&lt;TKey&gt;, new() where TUserPasskey : IdentityUserPasskey&lt;TKey&gt;, new()" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UserOnlyStore`7&lt;(class Microsoft.AspNetCore.Identity.IdentityUser`1&lt;!TKey&gt;) TUser, (class Microsoft.EntityFrameworkCore.DbContext) TContext, (class System.IEquatable`1&lt;!TKey&gt;) TKey, .ctor (class Microsoft.AspNetCore.Identity.IdentityUserClaim`1&lt;!TKey&gt;) TUserClaim, .ctor (class Microsoft.AspNetCore.Identity.IdentityUserLogin`1&lt;!TKey&gt;) TUserLogin, .ctor (class Microsoft.AspNetCore.Identity.IdentityUserToken`1&lt;!TKey&gt;) TUserToken, .ctor (class Microsoft.AspNetCore.Identity.IdentityUserPasskey`1&lt;!TKey&gt;) TUserPasskey&gt; extends Microsoft.AspNetCore.Identity.UserStoreBase`5&lt;!TUser, !TKey, !TUserClaim, !TUserLogin, !TUserToken&gt; implements class Microsoft.AspNetCore.Identity.IProtectedUserStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IQueryableUserStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserClaimStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserEmailStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserLockoutStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserLoginStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserPasskeyStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserPasswordStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1&lt;!TUser&gt;, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7" />
  <TypeSignature Language="VB.NET" Value="Public Class UserOnlyStore(Of TUser, TContext, TKey, TUserClaim, TUserLogin, TUserToken, TUserPasskey)&#xA;Inherits UserStoreBase(Of TUser, TKey, TUserClaim, TUserLogin, TUserToken)&#xA;Implements IDisposable, IProtectedUserStore(Of TUser), IQueryableUserStore(Of TUser), IUserAuthenticationTokenStore(Of TUser), IUserAuthenticatorKeyStore(Of TUser), IUserClaimStore(Of TUser), IUserEmailStore(Of TUser), IUserLockoutStore(Of TUser), IUserLoginStore(Of TUser), IUserPasskeyStore(Of TUser), IUserPasswordStore(Of TUser), IUserPhoneNumberStore(Of TUser), IUserSecurityStampStore(Of TUser), IUserStore(Of TUser), IUserTwoFactorRecoveryCodeStore(Of TUser), IUserTwoFactorStore(Of TUser)" />
  <TypeSignature Language="F#" Value="type UserOnlyStore&lt;'User, 'Context, 'Key, 'UserClaim, 'UserLogin, 'UserToken, 'UserPasskey (requires 'User :&gt; IdentityUser&lt;'Key&gt; and 'Context :&gt; DbContext and 'Key :&gt; IEquatable&lt;'Key&gt; and 'UserClaim :&gt; IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserLogin :&gt; IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'UserPasskey :&gt; IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt; = class&#xA;    inherit UserStoreBase&lt;'User, 'Key, 'UserClaim, 'UserLogin, 'UserToken (requires 'User :&gt; IdentityUser&lt;'Key&gt; and 'Key :&gt; IEquatable&lt;'Key&gt; and 'UserClaim :&gt; IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserLogin :&gt; IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken))&gt;&#xA;    interface IUserLoginStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IUserStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IDisposable&#xA;    interface IUserClaimStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IUserPasswordStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IUserSecurityStampStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IUserEmailStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IUserLockoutStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IUserPhoneNumberStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IQueryableUserStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IUserTwoFactorStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IUserAuthenticationTokenStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IUserAuthenticatorKeyStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IUserTwoFactorRecoveryCodeStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IProtectedUserStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IUserPasskeyStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TUser">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Constraints>
        <BaseTypeName>Microsoft.AspNetCore.Identity.IdentityUser&lt;TKey&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TContext">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Constraints>
        <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TKey">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Constraints>
        <InterfaceName>System.IEquatable&lt;TKey&gt;</InterfaceName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TUserClaim">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;TKey&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TUserLogin">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;TKey&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TUserToken">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.AspNetCore.Identity.IdentityUserToken&lt;TKey&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TUserPasskey">
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;TKey&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Microsoft.AspNetCore.Identity.UserStoreBase&lt;TUser,TKey,TUserClaim,TUserLogin,TUserToken&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">TUser</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!1">TKey</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!2">TUserClaim</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!3">TUserLogin</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!4">TUserToken</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IProtectedUserStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IQueryableUserStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserClaimStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserEmailStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserLockoutStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserLoginStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserPasskeyStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserPasswordStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserPhoneNumberStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserSecurityStampStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserTwoFactorStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1, 1, 1 })]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 0, 1, 1, 1, 1, 1 })&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TUser">The type representing a user.</typeparam>
    <typeparam name="TContext">The type of the data context class used to access the store.</typeparam>
    <typeparam name="TKey">The type of the primary key for a role.</typeparam>
    <typeparam name="TUserClaim">The type representing a claim.</typeparam>
    <typeparam name="TUserLogin">The type representing a user external login.</typeparam>
    <typeparam name="TUserToken">The type representing a user token.</typeparam>
    <typeparam name="TUserPasskey">The type representing a user passkey.</typeparam>
    <summary>
            Represents a new instance of a persistence store for the specified user and role types.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UserOnlyStore (TContext context, Microsoft.AspNetCore.Identity.IdentityErrorDescriber? describer = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!TContext context, class Microsoft.AspNetCore.Identity.IdentityErrorDescriber describer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.#ctor(`1,Microsoft.AspNetCore.Identity.IdentityErrorDescriber)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As TContext, Optional describer As IdentityErrorDescriber = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore&lt;'User, 'Context, 'Key, 'UserClaim, 'UserLogin, 'UserToken, 'UserPasskey (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt; : 'Context * Microsoft.AspNetCore.Identity.IdentityErrorDescriber -&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore&lt;'User, 'Context, 'Key, 'UserClaim, 'UserLogin, 'UserToken, 'UserPasskey (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;" Usage="new Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore&lt;'User, 'Context, 'Key, 'UserClaim, 'UserLogin, 'UserToken, 'UserPasskey (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt; (context, describer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="TContext" />
        <Parameter Name="describer" Type="Microsoft.AspNetCore.Identity.IdentityErrorDescriber">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">The context used to access the store.</param>
        <param name="describer">The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber" /> used to describe store errors.</param>
        <summary>
            Creates a new instance of the store.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddClaimsAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task AddClaimsAsync (TUser user, System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; claims, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task AddClaimsAsync(!TUser user, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; claims, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AddClaimsAsync (user As TUser, claims As IEnumerable(Of Claim), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="override this.AddClaimsAsync : 'User * seq&lt;System.Security.Claims.Claim&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userOnlyStore.AddClaimsAsync (user, claims, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="claims" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to add the claim to.</param>
        <param name="claims">The claim to add to the user.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Adds the <paramref name="claims" /> given to the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLoginAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task AddLoginAsync (TUser user, Microsoft.AspNetCore.Identity.UserLoginInfo login, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task AddLoginAsync(!TUser user, class Microsoft.AspNetCore.Identity.UserLoginInfo login, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AddLoginAsync (user As TUser, login As UserLoginInfo, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="override this.AddLoginAsync : 'User * Microsoft.AspNetCore.Identity.UserLoginInfo * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userOnlyStore.AddLoginAsync (user, login, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="login" Type="Microsoft.AspNetCore.Identity.UserLoginInfo" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to add the login to.</param>
        <param name="login">The login to add to the user.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Adds the <paramref name="login" /> given to the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUserTokenAsync">
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task AddUserTokenAsync (TUserToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task AddUserTokenAsync(!TUserToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.AddUserTokenAsync(`5)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function AddUserTokenAsync (token As TUserToken) As Task" />
      <MemberSignature Language="F#" Value="override this.AddUserTokenAsync : 'UserToken -&gt; System.Threading.Tasks.Task" Usage="userOnlyStore.AddUserTokenAsync token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="TUserToken" />
      </Parameters>
      <Docs>
        <param name="token">The token to be added.</param>
        <summary>
            Add a new user token.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSaveChanges">
      <MemberSignature Language="C#" Value="public bool AutoSaveChanges { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSaveChanges" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.AutoSaveChanges" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSaveChanges As Boolean" />
      <MemberSignature Language="F#" Value="member this.AutoSaveChanges : bool with get, set" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore&lt;'User, 'Context, 'Key, 'UserClaim, 'UserLogin, 'UserToken, 'UserPasskey (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;.AutoSaveChanges" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a flag indicating if changes should be persisted after CreateAsync, UpdateAsync and DeleteAsync are called.
            </summary>
        <value>
            True if changes should be automatically persisted, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public TContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TContext Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As TContext" />
      <MemberSignature Language="F#" Value="member this.Context : 'Context" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore&lt;'User, 'Context, 'Key, 'UserClaim, 'UserLogin, 'UserToken, 'UserPasskey (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the database context for this store.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; CreateAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; CreateAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.CreateAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)" />
      <MemberSignature Language="F#" Value="override this.CreateAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;" Usage="userOnlyStore.CreateAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to create.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Creates the specified <paramref name="user" /> in the user store.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the creation operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserPasskey">
      <MemberSignature Language="C#" Value="protected virtual TUserPasskey CreateUserPasskey (TUser user, Microsoft.AspNetCore.Identity.UserPasskeyInfo passkey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TUserPasskey CreateUserPasskey(!TUser user, class Microsoft.AspNetCore.Identity.UserPasskeyInfo passkey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.CreateUserPasskey(`0,Microsoft.AspNetCore.Identity.UserPasskeyInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateUserPasskey (user As TUser, passkey As UserPasskeyInfo) As TUserPasskey" />
      <MemberSignature Language="F#" Value="abstract member CreateUserPasskey : 'User * Microsoft.AspNetCore.Identity.UserPasskeyInfo -&gt; 'UserPasskey&#xA;override this.CreateUserPasskey : 'User * Microsoft.AspNetCore.Identity.UserPasskeyInfo -&gt; 'UserPasskey" Usage="userOnlyStore.CreateUserPasskey (user, passkey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TUserPasskey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="passkey" Type="Microsoft.AspNetCore.Identity.UserPasskeyInfo" />
      </Parameters>
      <Docs>
        <param name="user">The user.</param>
        <param name="passkey">The passkey.</param>
        <summary>
            Called to create a new instance of a <see cref="T:Microsoft.AspNetCore.Identity.IdentityUserPasskey`1" />.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; DeleteAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; DeleteAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.DeleteAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeleteAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)" />
      <MemberSignature Language="F#" Value="override this.DeleteAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;" Usage="userOnlyStore.DeleteAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to delete.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Deletes the specified <paramref name="user" /> from the user store.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the update operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByEmailAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;TUser?&gt; FindByEmailAsync (string normalizedEmail, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByEmailAsync(string normalizedEmail, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.FindByEmailAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindByEmailAsync (normalizedEmail As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TUser)" />
      <MemberSignature Language="F#" Value="override this.FindByEmailAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="userOnlyStore.FindByEmailAsync (normalizedEmail, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedEmail" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="normalizedEmail">The normalized email address to return the user for.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Gets the user, if any, associated with the specified, normalized email address.
            </summary>
        <returns>
            The task object containing the results of the asynchronous lookup operation, the user if any associated with the specified normalized email address.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByIdAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;TUser?&gt; FindByIdAsync (string userId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByIdAsync(string userId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.FindByIdAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindByIdAsync (userId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TUser)" />
      <MemberSignature Language="F#" Value="override this.FindByIdAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="userOnlyStore.FindByIdAsync (userId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userId">The user ID to search for.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Finds and returns a user, if any, who has the specified <paramref name="userId" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the user matching the specified <paramref name="userId" /> if it exists.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByLoginAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;TUser?&gt; FindByLoginAsync (string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByLoginAsync(string loginProvider, string providerKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindByLoginAsync (loginProvider As String, providerKey As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TUser)" />
      <MemberSignature Language="F#" Value="override this.FindByLoginAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="userOnlyStore.FindByLoginAsync (loginProvider, providerKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loginProvider" Type="System.String" />
        <Parameter Name="providerKey" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="loginProvider">The login provider who provided the <paramref name="providerKey" />.</param>
        <param name="providerKey">The key provided by the <paramref name="loginProvider" /> to identify a user.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Retrieves the user associated with the specified login provider and login provider key.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> for the asynchronous operation, containing the user, if any which matched the specified login provider and key.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByNameAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;TUser?&gt; FindByNameAsync (string normalizedUserName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByNameAsync(string normalizedUserName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.FindByNameAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindByNameAsync (normalizedUserName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TUser)" />
      <MemberSignature Language="F#" Value="override this.FindByNameAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="userOnlyStore.FindByNameAsync (normalizedUserName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedUserName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="normalizedUserName">The normalized user name to search for.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Finds and returns a user, if any, who has the specified normalized user name.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the user matching the specified <paramref name="normalizedUserName" /> if it exists.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByPasskeyIdAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser?&gt; FindByPasskeyIdAsync (byte[] credentialId, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByPasskeyIdAsync(unsigned int8[] credentialId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.FindByPasskeyIdAsync(System.Byte[],System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindByPasskeyIdAsync (credentialId As Byte(), cancellationToken As CancellationToken) As Task(Of TUser)" />
      <MemberSignature Language="F#" Value="abstract member FindByPasskeyIdAsync : byte[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;&#xA;override this.FindByPasskeyIdAsync : byte[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="userOnlyStore.FindByPasskeyIdAsync (credentialId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserPasskeyStore`1.FindByPasskeyIdAsync(System.Byte[],System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credentialId" Type="System.Byte[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="credentialId">The passkey credential id to search for.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Finds and returns a user, if any, associated with the specified passkey credential identifier.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the user, if any, associated with the specified passkey credential id.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindPasskeyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.UserPasskeyInfo?&gt; FindPasskeyAsync (TUser user, byte[] credentialId, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.UserPasskeyInfo&gt; FindPasskeyAsync(!TUser user, unsigned int8[] credentialId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.FindPasskeyAsync(`0,System.Byte[],System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindPasskeyAsync (user As TUser, credentialId As Byte(), cancellationToken As CancellationToken) As Task(Of UserPasskeyInfo)" />
      <MemberSignature Language="F#" Value="abstract member FindPasskeyAsync : 'User * byte[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.UserPasskeyInfo&gt;&#xA;override this.FindPasskeyAsync : 'User * byte[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.UserPasskeyInfo&gt;" Usage="userOnlyStore.FindPasskeyAsync (user, credentialId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserPasskeyStore`1.FindPasskeyAsync(`0,System.Byte[],System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.UserPasskeyInfo&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="credentialId" Type="System.Byte[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user whose passkey should be retrieved.</param>
        <param name="credentialId">The credential id to search for.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Finds a passkey for the specified user with the specified credential id.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the user's passkey information.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindTokenAsync">
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUserToken?&gt; FindTokenAsync (TUser user, string loginProvider, string name, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUserToken&gt; FindTokenAsync(!TUser user, string loginProvider, string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.FindTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FindTokenAsync (user As TUser, loginProvider As String, name As String, cancellationToken As CancellationToken) As Task(Of TUserToken)" />
      <MemberSignature Language="F#" Value="override this.FindTokenAsync : 'User * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'UserToken (requires 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken))&gt;" Usage="userOnlyStore.FindTokenAsync (user, loginProvider, name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUserToken&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="loginProvider" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The token owner.</param>
        <param name="loginProvider">The login provider for the token.</param>
        <param name="name">The name of the token.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Find a user token if it exists.
            </summary>
        <returns>The user token if it exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUserAsync">
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUser?&gt; FindUserAsync (TKey userId, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindUserAsync(!TKey userId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.FindUserAsync(`2,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FindUserAsync (userId As TKey, cancellationToken As CancellationToken) As Task(Of TUser)" />
      <MemberSignature Language="F#" Value="override this.FindUserAsync : 'Key * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="userOnlyStore.FindUserAsync (userId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="TKey" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userId">The user's id.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Return a user with the matching userId if it exists.
            </summary>
        <returns>The user if it exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUserLoginAsync">
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUserLogin?&gt; FindUserLoginAsync (string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUserLogin&gt; FindUserLoginAsync(string loginProvider, string providerKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.FindUserLoginAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FindUserLoginAsync (loginProvider As String, providerKey As String, cancellationToken As CancellationToken) As Task(Of TUserLogin)" />
      <MemberSignature Language="F#" Value="override this.FindUserLoginAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'UserLogin (requires 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin))&gt;" Usage="userOnlyStore.FindUserLoginAsync (loginProvider, providerKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUserLogin&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loginProvider" Type="System.String" />
        <Parameter Name="providerKey" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="loginProvider">The login provider name.</param>
        <param name="providerKey">The key provided by the <paramref name="loginProvider" /> to identify a user.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Return a user login with  provider, providerKey if it exists.
            </summary>
        <returns>The user login if it exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUserLoginAsync">
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUserLogin?&gt; FindUserLoginAsync (TKey userId, string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUserLogin&gt; FindUserLoginAsync(!TKey userId, string loginProvider, string providerKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.FindUserLoginAsync(`2,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FindUserLoginAsync (userId As TKey, loginProvider As String, providerKey As String, cancellationToken As CancellationToken) As Task(Of TUserLogin)" />
      <MemberSignature Language="F#" Value="override this.FindUserLoginAsync : 'Key * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'UserLogin (requires 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin))&gt;" Usage="userOnlyStore.FindUserLoginAsync (userId, loginProvider, providerKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUserLogin&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="TKey" />
        <Parameter Name="loginProvider" Type="System.String" />
        <Parameter Name="providerKey" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userId">The user's id.</param>
        <param name="loginProvider">The login provider name.</param>
        <param name="providerKey">The key provided by the <paramref name="loginProvider" /> to identify a user.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Return a user login with the matching userId, provider, providerKey if it exists.
            </summary>
        <returns>The user login if it exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUserPasskeyAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;TUserPasskey?&gt; FindUserPasskeyAsync (TKey userId, byte[] credentialId, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUserPasskey&gt; FindUserPasskeyAsync(!TKey userId, unsigned int8[] credentialId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.FindUserPasskeyAsync(`2,System.Byte[],System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function FindUserPasskeyAsync (userId As TKey, credentialId As Byte(), cancellationToken As CancellationToken) As Task(Of TUserPasskey)" />
      <MemberSignature Language="F#" Value="abstract member FindUserPasskeyAsync : 'Key * byte[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'UserPasskey (requires 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;&#xA;override this.FindUserPasskeyAsync : 'Key * byte[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'UserPasskey (requires 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;" Usage="userOnlyStore.FindUserPasskeyAsync (userId, credentialId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUserPasskey&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="TKey" />
        <Parameter Name="credentialId" Type="System.Byte[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userId">The user's id.</param>
        <param name="credentialId">The credential id to search for.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Find a passkey with the specified credential id for a user.
            </summary>
        <returns>The user passkey if it exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUserPasskeyByIdAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task&lt;TUserPasskey?&gt; FindUserPasskeyByIdAsync (byte[] credentialId, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUserPasskey&gt; FindUserPasskeyByIdAsync(unsigned int8[] credentialId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.FindUserPasskeyByIdAsync(System.Byte[],System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function FindUserPasskeyByIdAsync (credentialId As Byte(), cancellationToken As CancellationToken) As Task(Of TUserPasskey)" />
      <MemberSignature Language="F#" Value="abstract member FindUserPasskeyByIdAsync : byte[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'UserPasskey (requires 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;&#xA;override this.FindUserPasskeyByIdAsync : byte[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'UserPasskey (requires 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;" Usage="userOnlyStore.FindUserPasskeyByIdAsync (credentialId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUserPasskey&gt;</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })]</AttributeName>
            <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 1, 2 })&gt;]</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credentialId" Type="System.Byte[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="credentialId">The credential id to search for.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Find a passkey with the specified credential id.
            </summary>
        <returns>The user passkey if it exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClaimsAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.Security.Claims.Claim&gt;&gt; GetClaimsAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class System.Security.Claims.Claim&gt;&gt; GetClaimsAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.GetClaimsAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetClaimsAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of Claim))" />
      <MemberSignature Language="F#" Value="override this.GetClaimsAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.Security.Claims.Claim&gt;&gt;" Usage="userOnlyStore.GetClaimsAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.Security.Claims.Claim&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user whose claims should be retrieved.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Get the claims associated with the specified <paramref name="user" /> as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that contains the claims granted to a user.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLoginsAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt; GetLoginsAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt; GetLoginsAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.GetLoginsAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLoginsAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of UserLoginInfo))" />
      <MemberSignature Language="F#" Value="override this.GetLoginsAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt;" Usage="userOnlyStore.GetLoginsAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user whose associated logins to retrieve.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Retrieves the associated logins for the specified <param ref="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> for the asynchronous operation, containing a list of <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo" /> for the specified <paramref name="user" />, if any.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPasskeysAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserPasskeyInfo&gt;&gt; GetPasskeysAsync (TUser user, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Identity.UserPasskeyInfo&gt;&gt; GetPasskeysAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.GetPasskeysAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPasskeysAsync (user As TUser, cancellationToken As CancellationToken) As Task(Of IList(Of UserPasskeyInfo))" />
      <MemberSignature Language="F#" Value="abstract member GetPasskeysAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserPasskeyInfo&gt;&gt;&#xA;override this.GetPasskeysAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserPasskeyInfo&gt;&gt;" Usage="userOnlyStore.GetPasskeysAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserPasskeyStore`1.GetPasskeysAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserPasskeyInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user whose passkeys should be retrieved.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Gets the passkey credentials for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing a list of the user's passkeys.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUsersForClaimAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;TUser&gt;&gt; GetUsersForClaimAsync (System.Security.Claims.Claim claim, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;!TUser&gt;&gt; GetUsersForClaimAsync(class System.Security.Claims.Claim claim, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetUsersForClaimAsync (claim As Claim, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of TUser))" />
      <MemberSignature Language="F#" Value="override this.GetUsersForClaimAsync : System.Security.Claims.Claim * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;'User&gt;&gt;" Usage="userOnlyStore.GetUsersForClaimAsync (claim, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;TUser&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="claim" Type="System.Security.Claims.Claim" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="claim">The claim whose users should be retrieved.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Retrieves all users with the specified claim.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> contains a list of users, if any, that contain the specified claim.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveClaimsAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task RemoveClaimsAsync (TUser user, System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; claims, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task RemoveClaimsAsync(!TUser user, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; claims, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function RemoveClaimsAsync (user As TUser, claims As IEnumerable(Of Claim), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="override this.RemoveClaimsAsync : 'User * seq&lt;System.Security.Claims.Claim&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userOnlyStore.RemoveClaimsAsync (user, claims, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="claims" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to remove the claims from.</param>
        <param name="claims">The claim to remove.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Removes the <paramref name="claims" /> given from the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveLoginAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task RemoveLoginAsync (TUser user, string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task RemoveLoginAsync(!TUser user, string loginProvider, string providerKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function RemoveLoginAsync (user As TUser, loginProvider As String, providerKey As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="override this.RemoveLoginAsync : 'User * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userOnlyStore.RemoveLoginAsync (user, loginProvider, providerKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="loginProvider" Type="System.String" />
        <Parameter Name="providerKey" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to remove the login from.</param>
        <param name="loginProvider">The login to remove from the user.</param>
        <param name="providerKey">The key provided by the <paramref name="loginProvider" /> to identify a user.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Removes the <paramref name="loginProvider" /> given from the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePasskeyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RemovePasskeyAsync (TUser user, byte[] credentialId, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemovePasskeyAsync(!TUser user, unsigned int8[] credentialId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.RemovePasskeyAsync(`0,System.Byte[],System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemovePasskeyAsync (user As TUser, credentialId As Byte(), cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member RemovePasskeyAsync : 'User * byte[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.RemovePasskeyAsync : 'User * byte[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userOnlyStore.RemovePasskeyAsync (user, credentialId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserPasskeyStore`1.RemovePasskeyAsync(`0,System.Byte[],System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="credentialId" Type="System.Byte[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to remove the passkey credential from.</param>
        <param name="credentialId">The credential id of the passkey to remove.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Removes a passkey credential from the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserTokenAsync">
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task RemoveUserTokenAsync (TUserToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task RemoveUserTokenAsync(!TUserToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.RemoveUserTokenAsync(`5)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RemoveUserTokenAsync (token As TUserToken) As Task" />
      <MemberSignature Language="F#" Value="override this.RemoveUserTokenAsync : 'UserToken -&gt; System.Threading.Tasks.Task" Usage="userOnlyStore.RemoveUserTokenAsync token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="TUserToken" />
      </Parameters>
      <Docs>
        <param name="token">The token to be removed.</param>
        <summary>
            Remove a new user token.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceClaimAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task ReplaceClaimAsync (TUser user, System.Security.Claims.Claim claim, System.Security.Claims.Claim newClaim, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task ReplaceClaimAsync(!TUser user, class System.Security.Claims.Claim claim, class System.Security.Claims.Claim newClaim, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReplaceClaimAsync (user As TUser, claim As Claim, newClaim As Claim, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="override this.ReplaceClaimAsync : 'User * System.Security.Claims.Claim * System.Security.Claims.Claim * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userOnlyStore.ReplaceClaimAsync (user, claim, newClaim, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="claim" Type="System.Security.Claims.Claim" />
        <Parameter Name="newClaim" Type="System.Security.Claims.Claim" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to replace the claim on.</param>
        <param name="claim">The claim replace.</param>
        <param name="newClaim">The new claim replacing the <paramref name="claim" />.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Replaces the <paramref name="claim" /> on the specified <paramref name="user" />, with the <paramref name="newClaim" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task SaveChanges (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task SaveChanges(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.SaveChanges(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Function SaveChanges (cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="member this.SaveChanges : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userOnlyStore.SaveChanges cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>Saves the current store.</summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPasskeyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetPasskeyAsync (TUser user, Microsoft.AspNetCore.Identity.UserPasskeyInfo passkey, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetPasskeyAsync(!TUser user, class Microsoft.AspNetCore.Identity.UserPasskeyInfo passkey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.SetPasskeyAsync(`0,Microsoft.AspNetCore.Identity.UserPasskeyInfo,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetPasskeyAsync (user As TUser, passkey As UserPasskeyInfo, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetPasskeyAsync : 'User * Microsoft.AspNetCore.Identity.UserPasskeyInfo * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetPasskeyAsync : 'User * Microsoft.AspNetCore.Identity.UserPasskeyInfo * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userOnlyStore.SetPasskeyAsync (user, passkey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserPasskeyStore`1.SetPasskeyAsync(`0,Microsoft.AspNetCore.Identity.UserPasskeyInfo,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="passkey" Type="Microsoft.AspNetCore.Identity.UserPasskeyInfo" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to create the passkey credential for.</param>
        <param name="passkey" />
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Creates a new passkey credential in the store for the specified <paramref name="user" />,
            or updates an existing passkey.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; UpdateAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; UpdateAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.UpdateAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function UpdateAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)" />
      <MemberSignature Language="F#" Value="override this.UpdateAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;" Usage="userOnlyStore.UpdateAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to update.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Updates the specified <paramref name="user" /> in the user store.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the update operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserClaims">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.DbSet&lt;TUserClaim&gt; UserClaims { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.DbSet`1&lt;!TUserClaim&gt; UserClaims" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.UserClaims" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property UserClaims As DbSet(Of TUserClaim)" />
      <MemberSignature Language="F#" Value="member this.UserClaims : Microsoft.EntityFrameworkCore.DbSet&lt;'UserClaim (requires 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim))&gt;" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore&lt;'User, 'Context, 'Key, 'UserClaim, 'UserLogin, 'UserToken, 'UserPasskey (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;.UserClaims" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbSet&lt;TUserClaim&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            DbSet of user claims.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserLogins">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.DbSet&lt;TUserLogin&gt; UserLogins { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.DbSet`1&lt;!TUserLogin&gt; UserLogins" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.UserLogins" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property UserLogins As DbSet(Of TUserLogin)" />
      <MemberSignature Language="F#" Value="member this.UserLogins : Microsoft.EntityFrameworkCore.DbSet&lt;'UserLogin (requires 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin))&gt;" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore&lt;'User, 'Context, 'Key, 'UserClaim, 'UserLogin, 'UserToken, 'UserPasskey (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;.UserLogins" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbSet&lt;TUserLogin&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            DbSet of user logins.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserPasskeys">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.DbSet&lt;TUserPasskey&gt; UserPasskeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.DbSet`1&lt;!TUserPasskey&gt; UserPasskeys" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.UserPasskeys" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property UserPasskeys As DbSet(Of TUserPasskey)" />
      <MemberSignature Language="F#" Value="member this.UserPasskeys : Microsoft.EntityFrameworkCore.DbSet&lt;'UserPasskey (requires 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore&lt;'User, 'Context, 'Key, 'UserClaim, 'UserLogin, 'UserToken, 'UserPasskey (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;.UserPasskeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbSet&lt;TUserPasskey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            DbSet of user passkeys.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Users">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable&lt;TUser&gt; Users { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryable`1&lt;!TUser&gt; Users" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.Users" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Users As IQueryable(Of TUser)" />
      <MemberSignature Language="F#" Value="member this.Users : System.Linq.IQueryable&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore&lt;'User, 'Context, 'Key, 'UserClaim, 'UserLogin, 'UserToken, 'UserPasskey (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;.Users" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:Microsoft.AspNetCore.Identity.IQueryableUserStore`1.Users</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A navigation property for the users the store contains.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsersSet">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.DbSet&lt;TUser&gt; UsersSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.DbSet`1&lt;!TUser&gt; UsersSet" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.UsersSet" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property UsersSet As DbSet(Of TUser)" />
      <MemberSignature Language="F#" Value="member this.UsersSet : Microsoft.EntityFrameworkCore.DbSet&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore&lt;'User, 'Context, 'Key, 'UserClaim, 'UserLogin, 'UserToken, 'UserPasskey (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;.UsersSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbSet&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            DbSet of users.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserTokens">
      <MemberSignature Language="C#" Value="protected Microsoft.EntityFrameworkCore.DbSet&lt;TUserToken&gt; UserTokens { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.EntityFrameworkCore.DbSet`1&lt;!TUserToken&gt; UserTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore`7.UserTokens" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property UserTokens As DbSet(Of TUserToken)" />
      <MemberSignature Language="F#" Value="member this.UserTokens : Microsoft.EntityFrameworkCore.DbSet&lt;'UserToken (requires 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken))&gt;" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserOnlyStore&lt;'User, 'Context, 'Key, 'UserClaim, 'UserLogin, 'UserToken, 'UserPasskey (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'UserPasskey :&gt; Microsoft.AspNetCore.Identity.IdentityUserPasskey&lt;'Key&gt; and 'UserPasskey : (new : unit -&gt; 'UserPasskey))&gt;.UserTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.EntityFrameworkCore.DbSet&lt;TUserToken&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            DbSet of user tokens.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
