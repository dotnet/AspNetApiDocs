<Type Name="UserStore&lt;TUser,TRole,TContext,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken,TRoleClaim&gt;" FullName="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;TUser,TRole,TContext,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken,TRoleClaim&gt;">
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TUser, typename TRole, typename TContext, typename TKey, typename TUserClaim, typename TUserRole, typename TUserLogin, typename TUserToken, typename TRoleClaim&gt;&#xA; where TUser : IdentityUser&lt;TKey, TUserClaim, TUserRole, TUserLogin&gt; where TRole : IdentityRole&lt;TKey, TUserRole, TRoleClaim&gt; where TContext : DbContext where TKey : IEquatable&lt;TKey&gt; where TUserClaim : IdentityUserClaim&lt;TKey&gt; where TUserRole : IdentityUserRole&lt;TKey&gt; where TUserLogin : IdentityUserLogin&lt;TKey&gt; where TUserToken : IdentityUserToken&lt;TKey&gt; where TRoleClaim : IdentityRoleClaim&lt;TKey&gt;public ref class UserStore abstract : IDisposable, Microsoft::AspNetCore::Identity::IQueryableUserStore&lt;TUser&gt;, Microsoft::AspNetCore::Identity::IUserAuthenticationTokenStore&lt;TUser&gt;, Microsoft::AspNetCore::Identity::IUserClaimStore&lt;TUser&gt;, Microsoft::AspNetCore::Identity::IUserEmailStore&lt;TUser&gt;, Microsoft::AspNetCore::Identity::IUserLockoutStore&lt;TUser&gt;, Microsoft::AspNetCore::Identity::IUserLoginStore&lt;TUser&gt;, Microsoft::AspNetCore::Identity::IUserPasswordStore&lt;TUser&gt;, Microsoft::AspNetCore::Identity::IUserPhoneNumberStore&lt;TUser&gt;, Microsoft::AspNetCore::Identity::IUserRoleStore&lt;TUser&gt;, Microsoft::AspNetCore::Identity::IUserSecurityStampStore&lt;TUser&gt;, Microsoft::AspNetCore::Identity::IUserStore&lt;TUser&gt;, Microsoft::AspNetCore::Identity::IUserTwoFactorStore&lt;TUser&gt;" FrameworkAlternate="aspnetcore-1.1" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TUser, typename TRole, typename TContext, typename TKey, typename TUserClaim, typename TUserRole, typename TUserLogin, typename TUserToken, typename TRoleClaim&gt;&#xA; where TUser : IdentityUser&lt;TKey&gt; where TRole : IdentityRole&lt;TKey&gt; where TContext : DbContext where TKey : IEquatable&lt;TKey&gt; where TUserClaim : IdentityUserClaim&lt;TKey&gt;gcnew() where TUserRole : IdentityUserRole&lt;TKey&gt;gcnew() where TUserLogin : IdentityUserLogin&lt;TKey&gt;gcnew() where TUserToken : IdentityUserToken&lt;TKey&gt;gcnew() where TRoleClaim : IdentityRoleClaim&lt;TKey&gt;gcnew()public ref class UserStore : Microsoft::AspNetCore::Identity::UserStoreBase&lt;TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim&gt;" FrameworkAlternate="aspnetcore-2.0" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TUser, typename TRole, typename TContext, typename TKey, typename TUserClaim, typename TUserRole, typename TUserLogin, typename TUserToken, typename TRoleClaim&gt;&#xA; where TUser : IdentityUser&lt;TKey&gt; where TRole : IdentityRole&lt;TKey&gt; where TContext : DbContext where TKey : IEquatable&lt;TKey&gt; where TUserClaim : IdentityUserClaim&lt;TKey&gt;gcnew() where TUserRole : IdentityUserRole&lt;TKey&gt;gcnew() where TUserLogin : IdentityUserLogin&lt;TKey&gt;gcnew() where TUserToken : IdentityUserToken&lt;TKey&gt;gcnew() where TRoleClaim : IdentityRoleClaim&lt;TKey&gt;gcnew()public ref class UserStore : Microsoft::AspNetCore::Identity::UserStoreBase&lt;TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim&gt;, IDisposable, Microsoft::AspNetCore::Identity::IProtectedUserStore&lt;TUser&gt;, Microsoft::AspNetCore::Identity::IUserStore&lt;TUser&gt;" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0" />
  <TypeSignature Language="C#" Value="public abstract class UserStore&lt;TUser,TRole,TContext,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken,TRoleClaim&gt; : IDisposable, Microsoft.AspNetCore.Identity.IQueryableUserStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserClaimStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserEmailStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserLockoutStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserLoginStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserPasswordStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserPhoneNumberStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserRoleStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserSecurityStampStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserTwoFactorStore&lt;TUser&gt; where TUser : IdentityUser&lt;TKey,TUserClaim,TUserRole,TUserLogin&gt; where TRole : IdentityRole&lt;TKey,TUserRole,TRoleClaim&gt; where TContext : DbContext where TKey : IEquatable&lt;TKey&gt; where TUserClaim : IdentityUserClaim&lt;TKey&gt; where TUserRole : IdentityUserRole&lt;TKey&gt; where TUserLogin : IdentityUserLogin&lt;TKey&gt; where TUserToken : IdentityUserToken&lt;TKey&gt; where TRoleClaim : IdentityRoleClaim&lt;TKey&gt;" FrameworkAlternate="aspnetcore-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UserStore`9&lt;(class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser`4&lt;!TKey, !TUserClaim, !TUserRole, !TUserLogin&gt;) TUser, (class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole`3&lt;!TKey, !TUserRole, !TRoleClaim&gt;) TRole, (class Microsoft.EntityFrameworkCore.DbContext) TContext, (class System.IEquatable`1&lt;!TKey&gt;) TKey, (class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserClaim`1&lt;!TKey&gt;) TUserClaim, (class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserRole`1&lt;!TKey&gt;) TUserRole, (class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserLogin`1&lt;!TKey&gt;) TUserLogin, (class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserToken`1&lt;!TKey&gt;) TUserToken, (class Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRoleClaim`1&lt;!TKey&gt;) TRoleClaim&gt; extends System.Object implements class Microsoft.AspNetCore.Identity.IQueryableUserStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserClaimStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserEmailStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserLockoutStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserLoginStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserPasswordStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserRoleStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1&lt;!TUser&gt;, class System.IDisposable" FrameworkAlternate="aspnetcore-1.1" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim)&#xA;Implements IDisposable, IQueryableUserStore(Of TUser), IUserAuthenticationTokenStore(Of TUser), IUserClaimStore(Of TUser), IUserEmailStore(Of TUser), IUserLockoutStore(Of TUser), IUserLoginStore(Of TUser), IUserPasswordStore(Of TUser), IUserPhoneNumberStore(Of TUser), IUserRoleStore(Of TUser), IUserSecurityStampStore(Of TUser), IUserStore(Of TUser), IUserTwoFactorStore(Of TUser)" FrameworkAlternate="aspnetcore-1.1" />
  <TypeSignature Language="F#" Value="type UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt; and 'Role :&gt; IdentityRole&lt;'Key, 'UserRole, 'RoleClaim&gt; and 'Context :&gt; DbContext and 'Key :&gt; IEquatable&lt;'Key&gt; and 'UserClaim :&gt; IdentityUserClaim&lt;'Key&gt; and 'UserRole :&gt; IdentityUserRole&lt;'Key&gt; and 'UserLogin :&gt; IdentityUserLogin&lt;'Key&gt; and 'UserToken :&gt; IdentityUserToken&lt;'Key&gt; and 'RoleClaim :&gt; IdentityRoleClaim&lt;'Key&gt;)&gt; = class&#xA;    interface IUserLoginStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;    interface IUserStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;    interface IDisposable&#xA;    interface IUserRoleStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;    interface IUserClaimStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;    interface IUserPasswordStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;    interface IUserSecurityStampStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;    interface IUserEmailStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;    interface IUserLockoutStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;    interface IUserPhoneNumberStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;    interface IQueryableUserStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;    interface IUserTwoFactorStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;    interface IUserAuthenticationTokenStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;" FrameworkAlternate="aspnetcore-1.1" />
  <TypeSignature Language="C#" Value="public class UserStore&lt;TUser,TRole,TContext,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken,TRoleClaim&gt; : Microsoft.AspNetCore.Identity.UserStoreBase&lt;TUser,TRole,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken,TRoleClaim&gt; where TUser : IdentityUser&lt;TKey&gt; where TRole : IdentityRole&lt;TKey&gt; where TContext : DbContext where TKey : IEquatable&lt;TKey&gt; where TUserClaim : IdentityUserClaim&lt;TKey&gt;, new() where TUserRole : IdentityUserRole&lt;TKey&gt;, new() where TUserLogin : IdentityUserLogin&lt;TKey&gt;, new() where TUserToken : IdentityUserToken&lt;TKey&gt;, new() where TRoleClaim : IdentityRoleClaim&lt;TKey&gt;, new()" FrameworkAlternate="aspnetcore-2.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UserStore`9&lt;(class Microsoft.AspNetCore.Identity.IdentityUser`1&lt;!TKey&gt;) TUser, (class Microsoft.AspNetCore.Identity.IdentityRole`1&lt;!TKey&gt;) TRole, (class Microsoft.EntityFrameworkCore.DbContext) TContext, (class System.IEquatable`1&lt;!TKey&gt;) TKey, .ctor (class Microsoft.AspNetCore.Identity.IdentityUserClaim`1&lt;!TKey&gt;) TUserClaim, .ctor (class Microsoft.AspNetCore.Identity.IdentityUserRole`1&lt;!TKey&gt;) TUserRole, .ctor (class Microsoft.AspNetCore.Identity.IdentityUserLogin`1&lt;!TKey&gt;) TUserLogin, .ctor (class Microsoft.AspNetCore.Identity.IdentityUserToken`1&lt;!TKey&gt;) TUserToken, .ctor (class Microsoft.AspNetCore.Identity.IdentityRoleClaim`1&lt;!TKey&gt;) TRoleClaim&gt; extends Microsoft.AspNetCore.Identity.UserStoreBase`8&lt;!TUser, !TRole, !TKey, !TUserClaim, !TUserRole, !TUserLogin, !TUserToken, !TRoleClaim&gt;" FrameworkAlternate="aspnetcore-2.0" />
  <TypeSignature Language="VB.NET" Value="Public Class UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim)&#xA;Inherits UserStoreBase(Of TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim)" FrameworkAlternate="aspnetcore-2.0" />
  <TypeSignature Language="F#" Value="type UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; IdentityUser&lt;'Key&gt; and 'Role :&gt; IdentityRole&lt;'Key&gt; and 'Context :&gt; DbContext and 'Key :&gt; IEquatable&lt;'Key&gt; and 'UserClaim :&gt; IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserRole :&gt; IdentityUserRole&lt;'Key&gt; and 'UserRole : (new : unit -&gt; 'UserRole) and 'UserLogin :&gt; IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'RoleClaim :&gt; IdentityRoleClaim&lt;'Key&gt; and 'RoleClaim : (new : unit -&gt; 'RoleClaim))&gt; = class&#xA;    inherit UserStoreBase&lt;'User, 'Role, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; IdentityUser&lt;'Key&gt; and 'Role :&gt; IdentityRole&lt;'Key&gt; and 'Key :&gt; IEquatable&lt;'Key&gt; and 'UserClaim :&gt; IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserRole :&gt; IdentityUserRole&lt;'Key&gt; and 'UserRole : (new : unit -&gt; 'UserRole) and 'UserLogin :&gt; IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'RoleClaim :&gt; IdentityRoleClaim&lt;'Key&gt; and 'RoleClaim : (new : unit -&gt; 'RoleClaim))&gt;" FrameworkAlternate="aspnetcore-2.0" />
  <TypeSignature Language="C#" Value="public class UserStore&lt;TUser,TRole,TContext,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken,TRoleClaim&gt; : Microsoft.AspNetCore.Identity.UserStoreBase&lt;TUser,TRole,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken,TRoleClaim&gt;, IDisposable, Microsoft.AspNetCore.Identity.IProtectedUserStore&lt;TUser&gt;, Microsoft.AspNetCore.Identity.IUserStore&lt;TUser&gt; where TUser : IdentityUser&lt;TKey&gt; where TRole : IdentityRole&lt;TKey&gt; where TContext : DbContext where TKey : IEquatable&lt;TKey&gt; where TUserClaim : IdentityUserClaim&lt;TKey&gt;, new() where TUserRole : IdentityUserRole&lt;TKey&gt;, new() where TUserLogin : IdentityUserLogin&lt;TKey&gt;, new() where TUserToken : IdentityUserToken&lt;TKey&gt;, new() where TRoleClaim : IdentityRoleClaim&lt;TKey&gt;, new()" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UserStore`9&lt;(class Microsoft.AspNetCore.Identity.IdentityUser`1&lt;!TKey&gt;) TUser, (class Microsoft.AspNetCore.Identity.IdentityRole`1&lt;!TKey&gt;) TRole, (class Microsoft.EntityFrameworkCore.DbContext) TContext, (class System.IEquatable`1&lt;!TKey&gt;) TKey, .ctor (class Microsoft.AspNetCore.Identity.IdentityUserClaim`1&lt;!TKey&gt;) TUserClaim, .ctor (class Microsoft.AspNetCore.Identity.IdentityUserRole`1&lt;!TKey&gt;) TUserRole, .ctor (class Microsoft.AspNetCore.Identity.IdentityUserLogin`1&lt;!TKey&gt;) TUserLogin, .ctor (class Microsoft.AspNetCore.Identity.IdentityUserToken`1&lt;!TKey&gt;) TUserToken, .ctor (class Microsoft.AspNetCore.Identity.IdentityRoleClaim`1&lt;!TKey&gt;) TRoleClaim&gt; extends Microsoft.AspNetCore.Identity.UserStoreBase`8&lt;!TUser, !TRole, !TKey, !TUserClaim, !TUserRole, !TUserLogin, !TUserToken, !TRoleClaim&gt; implements class Microsoft.AspNetCore.Identity.IProtectedUserStore`1&lt;!TUser&gt;, class Microsoft.AspNetCore.Identity.IUserStore`1&lt;!TUser&gt;, class System.IDisposable" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
  <TypeSignature Language="VB.NET" Value="Public Class UserStore(Of TUser, TRole, TContext, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim)&#xA;Inherits UserStoreBase(Of TUser, TRole, TKey, TUserClaim, TUserRole, TUserLogin, TUserToken, TRoleClaim)&#xA;Implements IDisposable, IProtectedUserStore(Of TUser), IUserStore(Of TUser)" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
  <TypeSignature Language="F#" Value="type UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; IdentityUser&lt;'Key&gt; and 'Role :&gt; IdentityRole&lt;'Key&gt; and 'Context :&gt; DbContext and 'Key :&gt; IEquatable&lt;'Key&gt; and 'UserClaim :&gt; IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserRole :&gt; IdentityUserRole&lt;'Key&gt; and 'UserRole : (new : unit -&gt; 'UserRole) and 'UserLogin :&gt; IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'RoleClaim :&gt; IdentityRoleClaim&lt;'Key&gt; and 'RoleClaim : (new : unit -&gt; 'RoleClaim))&gt; = class&#xA;    inherit UserStoreBase&lt;'User, 'Role, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; IdentityUser&lt;'Key&gt; and 'Role :&gt; IdentityRole&lt;'Key&gt; and 'Key :&gt; IEquatable&lt;'Key&gt; and 'UserClaim :&gt; IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserRole :&gt; IdentityUserRole&lt;'Key&gt; and 'UserRole : (new : unit -&gt; 'UserRole) and 'UserLogin :&gt; IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'RoleClaim :&gt; IdentityRoleClaim&lt;'Key&gt; and 'RoleClaim : (new : unit -&gt; 'RoleClaim))&gt;&#xA;    interface IProtectedUserStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IUserStore&lt;'User (requires 'User :&gt; IdentityUser&lt;'Key&gt;)&gt;&#xA;    interface IDisposable" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.3.0</AssemblyVersion>
    <AssemblyVersion>3.1.12.0</AssemblyVersion>
    <AssemblyVersion>3.1.18.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.9.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.5.0</AssemblyVersion>
    <AssemblyVersion>6.0.6.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.3.0</AssemblyVersion>
    <AssemblyVersion>7.0.5.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TUser">
      <Constraints>
        <BaseTypeName>Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;TKey,TUserClaim,TUserRole,TUserLogin&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TRole">
      <Constraints>
        <BaseTypeName>Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole&lt;TKey,TUserRole,TRoleClaim&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TContext">
      <Constraints>
        <BaseTypeName>Microsoft.EntityFrameworkCore.DbContext</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TKey">
      <Constraints>
        <InterfaceName>System.IEquatable&lt;TKey&gt;</InterfaceName>
      </Constraints>
      <Attributes>
        <Attribute FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0">
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
    </TypeParameter>
    <TypeParameter Name="TUserClaim">
      <Constraints>
        <BaseTypeName>Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserClaim&lt;TKey&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TUserRole">
      <Constraints>
        <BaseTypeName>Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserRole&lt;TKey&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TUserLogin">
      <Constraints>
        <BaseTypeName>Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserLogin&lt;TKey&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TUserToken">
      <Constraints>
        <BaseTypeName>Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserToken&lt;TKey&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TRoleClaim">
      <Constraints>
        <BaseTypeName>Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRoleClaim&lt;TKey&gt;</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">Microsoft.AspNetCore.Identity.UserStoreBase&lt;TUser,TRole,TKey,TUserClaim,TUserRole,TUserLogin,TUserToken,TRoleClaim&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="!0">TUser</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!1">TRole</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!2">TKey</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!3">TUserClaim</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!4">TUserRole</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!5">TUserLogin</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!6">TUserToken</BaseTypeArgument>
      <BaseTypeArgument TypeParamName="!7">TRoleClaim</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="aspnetcore-1.1">
      <InterfaceName>Microsoft.AspNetCore.Identity.IQueryableUserStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-1.1">
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-1.1">
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserClaimStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-1.1">
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserEmailStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-1.1">
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserLockoutStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-1.1">
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserLoginStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-1.1">
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserPasswordStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-1.1">
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserPhoneNumberStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-1.1">
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserRoleStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-1.1">
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserSecurityStampStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-1.1">
      <InterfaceName>Microsoft.AspNetCore.Identity.IUserTwoFactorStore&lt;TUser&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">
      <InterfaceName>Microsoft.AspNetCore.Identity.IProtectedUserStore&lt;TUser&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TUser">The type representing a user.</typeparam>
    <typeparam name="TRole">The type representing a role.</typeparam>
    <typeparam name="TContext">The type of the data context class used to access the store.</typeparam>
    <typeparam name="TKey">The type of the primary key for a role.</typeparam>
    <typeparam name="TUserClaim">The type representing a claim.</typeparam>
    <typeparam name="TUserRole">The type representing a user role.</typeparam>
    <typeparam name="TUserLogin">The type representing a user external login.</typeparam>
    <typeparam name="TUserToken">The type representing a user token.</typeparam>
    <typeparam name="TRoleClaim">The type representing a role claim.</typeparam>
    <summary>
            Represents a new instance of a persistence store for the specified user and role types.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UserStore (TContext context, Microsoft.AspNetCore.Identity.IdentityErrorDescriber describer = default);" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!TContext context, class Microsoft.AspNetCore.Identity.IdentityErrorDescriber describer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.#ctor(`2,Microsoft.AspNetCore.Identity.IdentityErrorDescriber)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As TContext, Optional describer As IdentityErrorDescriber = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt; and 'Role :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole&lt;'Key, 'UserRole, 'RoleClaim&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserClaim&lt;'Key&gt; and 'UserRole :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserRole&lt;'Key&gt; and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserLogin&lt;'Key&gt; and 'UserToken :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserToken&lt;'Key&gt; and 'RoleClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRoleClaim&lt;'Key&gt;)&gt; : 'Context * Microsoft.AspNetCore.Identity.IdentityErrorDescriber -&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt; and 'Role :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole&lt;'Key, 'UserRole, 'RoleClaim&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserClaim&lt;'Key&gt; and 'UserRole :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserRole&lt;'Key&gt; and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserLogin&lt;'Key&gt; and 'UserToken :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserToken&lt;'Key&gt; and 'RoleClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRoleClaim&lt;'Key&gt;)&gt;" Usage="new Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt; and 'Role :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole&lt;'Key, 'UserRole, 'RoleClaim&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserClaim&lt;'Key&gt; and 'UserRole :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserRole&lt;'Key&gt; and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserLogin&lt;'Key&gt; and 'UserToken :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserToken&lt;'Key&gt; and 'RoleClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRoleClaim&lt;'Key&gt;)&gt; (context, describer)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="new Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Role :&gt; Microsoft.AspNetCore.Identity.IdentityRole&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserRole :&gt; Microsoft.AspNetCore.Identity.IdentityUserRole&lt;'Key&gt; and 'UserRole : (new : unit -&gt; 'UserRole) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'RoleClaim :&gt; Microsoft.AspNetCore.Identity.IdentityRoleClaim&lt;'Key&gt; and 'RoleClaim : (new : unit -&gt; 'RoleClaim))&gt; : 'Context * Microsoft.AspNetCore.Identity.IdentityErrorDescriber -&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Role :&gt; Microsoft.AspNetCore.Identity.IdentityRole&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserRole :&gt; Microsoft.AspNetCore.Identity.IdentityUserRole&lt;'Key&gt; and 'UserRole : (new : unit -&gt; 'UserRole) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'RoleClaim :&gt; Microsoft.AspNetCore.Identity.IdentityRoleClaim&lt;'Key&gt; and 'RoleClaim : (new : unit -&gt; 'RoleClaim))&gt;" Usage="new Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Role :&gt; Microsoft.AspNetCore.Identity.IdentityRole&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserRole :&gt; Microsoft.AspNetCore.Identity.IdentityUserRole&lt;'Key&gt; and 'UserRole : (new : unit -&gt; 'UserRole) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'RoleClaim :&gt; Microsoft.AspNetCore.Identity.IdentityRoleClaim&lt;'Key&gt; and 'RoleClaim : (new : unit -&gt; 'RoleClaim))&gt; (context, describer)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="C#" Value="public UserStore (TContext context, Microsoft.AspNetCore.Identity.IdentityErrorDescriber? describer = default);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="TContext" />
        <Parameter Name="describer" Type="Microsoft.AspNetCore.Identity.IdentityErrorDescriber" />
      </Parameters>
      <Docs>
        <param name="context">The context used to access the store.</param>
        <param name="describer">The <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber" /> used to describe store errors.</param>
        <summary>
            Creates a new instance of the store.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddClaimsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AddClaimsAsync (TUser user, System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; claims, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AddClaimsAsync(!TUser user, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; claims, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddClaimsAsync (user As TUser, claims As IEnumerable(Of Claim), Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member AddClaimsAsync : 'User * seq&lt;System.Security.Claims.Claim&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AddClaimsAsync : 'User * seq&lt;System.Security.Claims.Claim&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.AddClaimsAsync (user, claims, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task AddClaimsAsync (TUser user, System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; claims, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task AddClaimsAsync(!TUser user, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; claims, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AddClaimsAsync (user As TUser, claims As IEnumerable(Of Claim), Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.AddClaimsAsync : 'User * seq&lt;System.Security.Claims.Claim&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.AddClaimsAsync (user, claims, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.AddClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="claims" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to add the claim to.</param>
        <param name="claims">The claim to add to the user.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Adds the <paramref name="claims" /> given to the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLoginAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AddLoginAsync (TUser user, Microsoft.AspNetCore.Identity.UserLoginInfo login, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AddLoginAsync(!TUser user, class Microsoft.AspNetCore.Identity.UserLoginInfo login, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddLoginAsync (user As TUser, login As UserLoginInfo, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member AddLoginAsync : 'User * Microsoft.AspNetCore.Identity.UserLoginInfo * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AddLoginAsync : 'User * Microsoft.AspNetCore.Identity.UserLoginInfo * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.AddLoginAsync (user, login, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task AddLoginAsync (TUser user, Microsoft.AspNetCore.Identity.UserLoginInfo login, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task AddLoginAsync(!TUser user, class Microsoft.AspNetCore.Identity.UserLoginInfo login, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AddLoginAsync (user As TUser, login As UserLoginInfo, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.AddLoginAsync : 'User * Microsoft.AspNetCore.Identity.UserLoginInfo * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.AddLoginAsync (user, login, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.AddLoginAsync(`0,Microsoft.AspNetCore.Identity.UserLoginInfo,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="login" Type="Microsoft.AspNetCore.Identity.UserLoginInfo" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to add the login to.</param>
        <param name="login">The login to add to the user.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Adds the <paramref name="login" /> given to the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddToRoleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AddToRoleAsync (TUser user, string normalizedRoleName, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AddToRoleAsync(!TUser user, string normalizedRoleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AddToRoleAsync (user As TUser, normalizedRoleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member AddToRoleAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.AddToRoleAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.AddToRoleAsync (user, normalizedRoleName, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task AddToRoleAsync (TUser user, string normalizedRoleName, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task AddToRoleAsync(!TUser user, string normalizedRoleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function AddToRoleAsync (user As TUser, normalizedRoleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.AddToRoleAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.AddToRoleAsync (user, normalizedRoleName, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.AddToRoleAsync(`0,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="normalizedRoleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to add the role to.</param>
        <param name="normalizedRoleName">The role to add.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Adds the given <paramref name="normalizedRoleName" /> to the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUserTokenAsync">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Threading::Tasks::Task ^ AddUserTokenAsync(TUserToken token);" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task AddUserTokenAsync (TUserToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task AddUserTokenAsync(!TUserToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.AddUserTokenAsync(`7)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function AddUserTokenAsync (token As TUserToken) As Task" />
      <MemberSignature Language="F#" Value="override this.AddUserTokenAsync : 'UserToken -&gt; System.Threading.Tasks.Task" Usage="userStore.AddUserTokenAsync token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="TUserToken" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="token">The token to be added.</param>
        <summary>
            Add a new user token.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSaveChanges">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSaveChanges { bool get(); void set(bool value); };" />
      <MemberSignature Language="C#" Value="public bool AutoSaveChanges { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSaveChanges" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.AutoSaveChanges" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSaveChanges As Boolean" />
      <MemberSignature Language="F#" Value="member this.AutoSaveChanges : bool with get, set" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt; and 'Role :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole&lt;'Key, 'UserRole, 'RoleClaim&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserClaim&lt;'Key&gt; and 'UserRole :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserRole&lt;'Key&gt; and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserLogin&lt;'Key&gt; and 'UserToken :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserToken&lt;'Key&gt; and 'RoleClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRoleClaim&lt;'Key&gt;)&gt;.AutoSaveChanges" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="member this.AutoSaveChanges : bool with get, set" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Role :&gt; Microsoft.AspNetCore.Identity.IdentityRole&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserRole :&gt; Microsoft.AspNetCore.Identity.IdentityUserRole&lt;'Key&gt; and 'UserRole : (new : unit -&gt; 'UserRole) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'RoleClaim :&gt; Microsoft.AspNetCore.Identity.IdentityRoleClaim&lt;'Key&gt; and 'RoleClaim : (new : unit -&gt; 'RoleClaim))&gt;.AutoSaveChanges" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets a flag indicating if changes should be persisted after CreateAsync, UpdateAsync and DeleteAsync are called.
            </summary>
        <value>
            True if changes should be automatically persisted, otherwise false.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TContext Context { TContext get(); };" />
      <MemberSignature Language="C#" Value="public TContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TContext Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As TContext" />
      <MemberSignature Language="F#" Value="member this.Context : 'Context" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt; and 'Role :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole&lt;'Key, 'UserRole, 'RoleClaim&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserClaim&lt;'Key&gt; and 'UserRole :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserRole&lt;'Key&gt; and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserLogin&lt;'Key&gt; and 'UserToken :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserToken&lt;'Key&gt; and 'RoleClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRoleClaim&lt;'Key&gt;)&gt;.Context" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="member this.Context : 'Context" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Role :&gt; Microsoft.AspNetCore.Identity.IdentityRole&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserRole :&gt; Microsoft.AspNetCore.Identity.IdentityUserRole&lt;'Key&gt; and 'UserRole : (new : unit -&gt; 'UserRole) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'RoleClaim :&gt; Microsoft.AspNetCore.Identity.IdentityRoleClaim&lt;'Key&gt; and 'RoleClaim : (new : unit -&gt; 'RoleClaim))&gt;.Context" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the database context for this store.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertIdFromString">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TKey ConvertIdFromString(System::String ^ id);" />
      <MemberSignature Language="C#" Value="public virtual TKey ConvertIdFromString (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TKey ConvertIdFromString(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.ConvertIdFromString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertIdFromString (id As String) As TKey" />
      <MemberSignature Language="F#" Value="abstract member ConvertIdFromString : string -&gt; 'Key&#xA;override this.ConvertIdFromString : string -&gt; 'Key" Usage="userStore.ConvertIdFromString id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="id">The id to convert.</param>
        <summary>
            Converts the provided <paramref name="id" /> to a strongly typed key object.
            </summary>
        <returns>An instance of <typeparamref name="TKey" /> representing the provided <paramref name="id" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertIdToString">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertIdToString(TKey id);" />
      <MemberSignature Language="C#" Value="public virtual string ConvertIdToString (TKey id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertIdToString(!TKey id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.ConvertIdToString(`3)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertIdToString (id As TKey) As String" />
      <MemberSignature Language="F#" Value="abstract member ConvertIdToString : 'Key -&gt; string&#xA;override this.ConvertIdToString : 'Key -&gt; string" Usage="userStore.ConvertIdToString id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="TKey" Index="0" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="id">The id to convert.</param>
        <summary>
            Converts the provided <paramref name="id" /> to its string representation.
            </summary>
        <returns>An <see cref="T:System.String" /> representation of the provided <paramref name="id" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; CreateAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; CreateAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.CreateAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member CreateAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;&#xA;override this.CreateAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;" Usage="userStore.CreateAsync (user, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; CreateAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; CreateAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.CreateAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;" Usage="userStore.CreateAsync (user, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">M:Microsoft.AspNetCore.Identity.IUserStore`1.CreateAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to create.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Creates the specified <paramref name="user" /> in the user store.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the creation operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserClaim">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TUserClaim CreateUserClaim(TUser user, System::Security::Claims::Claim ^ claim);" />
      <MemberSignature Language="C#" Value="protected abstract TUserClaim CreateUserClaim (TUser user, System.Security.Claims.Claim claim);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TUserClaim CreateUserClaim(!TUser user, class System.Security.Claims.Claim claim) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.CreateUserClaim(`0,System.Security.Claims.Claim)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateUserClaim (user As TUser, claim As Claim) As TUserClaim" />
      <MemberSignature Language="F#" Value="abstract member CreateUserClaim : 'User * System.Security.Claims.Claim -&gt; 'UserClaim" Usage="userStore.CreateUserClaim (user, claim)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TUserClaim</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="claim" Type="System.Security.Claims.Claim" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">
        </param>
        <param name="claim">
        </param>
        <summary>
            Create a new entity representing a user claim.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserLogin">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TUserLogin CreateUserLogin(TUser user, Microsoft::AspNetCore::Identity::UserLoginInfo ^ login);" />
      <MemberSignature Language="C#" Value="protected abstract TUserLogin CreateUserLogin (TUser user, Microsoft.AspNetCore.Identity.UserLoginInfo login);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TUserLogin CreateUserLogin(!TUser user, class Microsoft.AspNetCore.Identity.UserLoginInfo login) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.CreateUserLogin(`0,Microsoft.AspNetCore.Identity.UserLoginInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateUserLogin (user As TUser, login As UserLoginInfo) As TUserLogin" />
      <MemberSignature Language="F#" Value="abstract member CreateUserLogin : 'User * Microsoft.AspNetCore.Identity.UserLoginInfo -&gt; 'UserLogin" Usage="userStore.CreateUserLogin (user, login)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TUserLogin</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="login" Type="Microsoft.AspNetCore.Identity.UserLoginInfo" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">
        </param>
        <param name="login">
        </param>
        <summary>
            Create a new entity representing a user login.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserRole">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TUserRole CreateUserRole(TUser user, TRole role);" />
      <MemberSignature Language="C#" Value="protected abstract TUserRole CreateUserRole (TUser user, TRole role);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TUserRole CreateUserRole(!TUser user, !TRole role) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.CreateUserRole(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateUserRole (user As TUser, role As TRole) As TUserRole" />
      <MemberSignature Language="F#" Value="abstract member CreateUserRole : 'User * 'Role -&gt; 'UserRole" Usage="userStore.CreateUserRole (user, role)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TUserRole</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="role" Type="TRole" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">
        </param>
        <param name="role">
        </param>
        <summary>
            Creates a new entity to represent a user role.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateUserToken">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract TUserToken CreateUserToken(TUser user, System::String ^ loginProvider, System::String ^ name, System::String ^ value);" />
      <MemberSignature Language="C#" Value="protected abstract TUserToken CreateUserToken (TUser user, string loginProvider, string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TUserToken CreateUserToken(!TUser user, string loginProvider, string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.CreateUserToken(`0,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function CreateUserToken (user As TUser, loginProvider As String, name As String, value As String) As TUserToken" />
      <MemberSignature Language="F#" Value="abstract member CreateUserToken : 'User * string * string * string -&gt; 'UserToken" Usage="userStore.CreateUserToken (user, loginProvider, name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TUserToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="loginProvider" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="value" Type="System.String" Index="3" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">
        </param>
        <param name="loginProvider">
        </param>
        <param name="name">
        </param>
        <param name="value">
        </param>
        <summary>
            Create a new entity representing a user token.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; DeleteAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; DeleteAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.DeleteAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;&#xA;override this.DeleteAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;" Usage="userStore.DeleteAsync (user, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; DeleteAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; DeleteAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeleteAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.DeleteAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;" Usage="userStore.DeleteAsync (user, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">M:Microsoft.AspNetCore.Identity.IUserStore`1.DeleteAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to delete.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Deletes the specified <paramref name="user" /> from the user store.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the update operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="userStore.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Dispose the store
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorDescriber">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::AspNetCore::Identity::IdentityErrorDescriber ^ ErrorDescriber { Microsoft::AspNetCore::Identity::IdentityErrorDescriber ^ get(); void set(Microsoft::AspNetCore::Identity::IdentityErrorDescriber ^ value); };" />
      <MemberSignature Language="C#" Value="public Microsoft.AspNetCore.Identity.IdentityErrorDescriber ErrorDescriber { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.AspNetCore.Identity.IdentityErrorDescriber ErrorDescriber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.ErrorDescriber" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorDescriber As IdentityErrorDescriber" />
      <MemberSignature Language="F#" Value="member this.ErrorDescriber : Microsoft.AspNetCore.Identity.IdentityErrorDescriber with get, set" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt; and 'Role :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole&lt;'Key, 'UserRole, 'RoleClaim&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserClaim&lt;'Key&gt; and 'UserRole :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserRole&lt;'Key&gt; and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserLogin&lt;'Key&gt; and 'UserToken :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserToken&lt;'Key&gt; and 'RoleClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRoleClaim&lt;'Key&gt;)&gt;.ErrorDescriber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Identity.IdentityErrorDescriber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the <see cref="T:Microsoft.AspNetCore.Identity.IdentityErrorDescriber" /> for any error that occurred with the current operation.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByEmailAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser&gt; FindByEmailAsync (string normalizedEmail, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByEmailAsync(string normalizedEmail, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.FindByEmailAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindByEmailAsync (normalizedEmail As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TUser)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member FindByEmailAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;override this.FindByEmailAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;" Usage="userStore.FindByEmailAsync (normalizedEmail, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;TUser&gt; FindByEmailAsync (string normalizedEmail, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByEmailAsync(string normalizedEmail, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindByEmailAsync (normalizedEmail As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TUser)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.FindByEmailAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="userStore.FindByEmailAsync (normalizedEmail, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;TUser?&gt; FindByEmailAsync (string normalizedEmail, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.FindByEmailAsync(System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedEmail" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="normalizedEmail">The normalized email address to return the user for.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Gets the user, if any, associated with the specified, normalized email address.
            </summary>
        <returns>
            The task object containing the results of the asynchronous lookup operation, the user if any associated with the specified normalized email address.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByIdAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser&gt; FindByIdAsync (string userId, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByIdAsync(string userId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.FindByIdAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindByIdAsync (userId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TUser)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member FindByIdAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;override this.FindByIdAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;" Usage="userStore.FindByIdAsync (userId, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;TUser&gt; FindByIdAsync (string userId, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByIdAsync(string userId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindByIdAsync (userId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TUser)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.FindByIdAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="userStore.FindByIdAsync (userId, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;TUser?&gt; FindByIdAsync (string userId, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByIdAsync(System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userId">The user ID to search for.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Finds and returns a user, if any, who has the specified <paramref name="userId" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the user matching the specified <paramref name="userId" /> if it exists.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByLoginAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser&gt; FindByLoginAsync (string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByLoginAsync(string loginProvider, string providerKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindByLoginAsync (loginProvider As String, providerKey As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TUser)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member FindByLoginAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;override this.FindByLoginAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;" Usage="userStore.FindByLoginAsync (loginProvider, providerKey, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;TUser&gt; FindByLoginAsync (string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByLoginAsync(string loginProvider, string providerKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindByLoginAsync (loginProvider As String, providerKey As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TUser)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.FindByLoginAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="userStore.FindByLoginAsync (loginProvider, providerKey, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;TUser?&gt; FindByLoginAsync (string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.FindByLoginAsync(System.String,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loginProvider" Type="System.String" />
        <Parameter Name="providerKey" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="loginProvider">The login provider who provided the <paramref name="providerKey" />.</param>
        <param name="providerKey">The key provided by the <paramref name="loginProvider" /> to identify a user.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Retrieves the user associated with the specified login provider and login provider key.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> for the asynchronous operation, containing the user, if any which matched the specified login provider and key.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;TUser&gt; FindByNameAsync (string normalizedUserName, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByNameAsync(string normalizedUserName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.FindByNameAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindByNameAsync (normalizedUserName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TUser)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member FindByNameAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;&#xA;override this.FindByNameAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;" Usage="userStore.FindByNameAsync (normalizedUserName, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;TUser&gt; FindByNameAsync (string normalizedUserName, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindByNameAsync(string normalizedUserName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindByNameAsync (normalizedUserName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of TUser)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.FindByNameAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="userStore.FindByNameAsync (normalizedUserName, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;TUser?&gt; FindByNameAsync (string normalizedUserName, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">M:Microsoft.AspNetCore.Identity.IUserStore`1.FindByNameAsync(System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedUserName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="normalizedUserName">The normalized user name to search for.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Finds and returns a user, if any, who has the specified normalized user name.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the user matching the specified <paramref name="normalizedUserName" /> if it exists.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindRoleAsync">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Threading::Tasks::Task&lt;TRole&gt; ^ FindRoleAsync(System::String ^ normalizedRoleName, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TRole&gt; FindRoleAsync (string normalizedRoleName, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TRole&gt; FindRoleAsync(string normalizedRoleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.FindRoleAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FindRoleAsync (normalizedRoleName As String, cancellationToken As CancellationToken) As Task(Of TRole)" />
      <MemberSignature Language="F#" Value="override this.FindRoleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Role (requires 'Role :&gt; Microsoft.AspNetCore.Identity.IdentityRole&lt;'Key&gt;)&gt;" Usage="userStore.FindRoleAsync (normalizedRoleName, cancellationToken)" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TRole?&gt; FindRoleAsync (string normalizedRoleName, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TRole&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedRoleName" Type="System.String" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="normalizedRoleName">The normalized role name.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Return a role with the normalized name if it exists.
            </summary>
        <returns>The role if it exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindTokenAsync">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Threading::Tasks::Task&lt;TUserToken&gt; ^ FindTokenAsync(TUser user, System::String ^ loginProvider, System::String ^ name, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUserToken&gt; FindTokenAsync (TUser user, string loginProvider, string name, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUserToken&gt; FindTokenAsync(!TUser user, string loginProvider, string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.FindTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FindTokenAsync (user As TUser, loginProvider As String, name As String, cancellationToken As CancellationToken) As Task(Of TUserToken)" />
      <MemberSignature Language="F#" Value="override this.FindTokenAsync : 'User * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'UserToken (requires 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken))&gt;" Usage="userStore.FindTokenAsync (user, loginProvider, name, cancellationToken)" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUserToken?&gt; FindTokenAsync (TUser user, string loginProvider, string name, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUserToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="loginProvider" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="user">The token owner.</param>
        <param name="loginProvider">The login provider for the token.</param>
        <param name="name">The name of the token.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Find a user token if it exists.
            </summary>
        <returns>The user token if it exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUserAsync">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Threading::Tasks::Task&lt;TUser&gt; ^ FindUserAsync(TKey userId, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUser&gt; FindUserAsync (TKey userId, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUser&gt; FindUserAsync(!TKey userId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.FindUserAsync(`3,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FindUserAsync (userId As TKey, cancellationToken As CancellationToken) As Task(Of TUser)" />
      <MemberSignature Language="F#" Value="override this.FindUserAsync : 'Key * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="userStore.FindUserAsync (userId, cancellationToken)" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUser?&gt; FindUserAsync (TKey userId, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="TKey" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="userId">The user's id.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Return a user with the matching userId if it exists.
            </summary>
        <returns>The user if it exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUserLoginAsync">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Threading::Tasks::Task&lt;TUserLogin&gt; ^ FindUserLoginAsync(System::String ^ loginProvider, System::String ^ providerKey, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUserLogin&gt; FindUserLoginAsync (string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUserLogin&gt; FindUserLoginAsync(string loginProvider, string providerKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.FindUserLoginAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FindUserLoginAsync (loginProvider As String, providerKey As String, cancellationToken As CancellationToken) As Task(Of TUserLogin)" />
      <MemberSignature Language="F#" Value="override this.FindUserLoginAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'UserLogin (requires 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin))&gt;" Usage="userStore.FindUserLoginAsync (loginProvider, providerKey, cancellationToken)" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUserLogin?&gt; FindUserLoginAsync (string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUserLogin&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loginProvider" Type="System.String" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="providerKey" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="loginProvider">The login provider name.</param>
        <param name="providerKey">The key provided by the <paramref name="loginProvider" /> to identify a user.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Return a user login with  provider, providerKey if it exists.
            </summary>
        <returns>The user login if it exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUserLoginAsync">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Threading::Tasks::Task&lt;TUserLogin&gt; ^ FindUserLoginAsync(TKey userId, System::String ^ loginProvider, System::String ^ providerKey, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUserLogin&gt; FindUserLoginAsync (TKey userId, string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUserLogin&gt; FindUserLoginAsync(!TKey userId, string loginProvider, string providerKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.FindUserLoginAsync(`3,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FindUserLoginAsync (userId As TKey, loginProvider As String, providerKey As String, cancellationToken As CancellationToken) As Task(Of TUserLogin)" />
      <MemberSignature Language="F#" Value="override this.FindUserLoginAsync : 'Key * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'UserLogin (requires 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin))&gt;" Usage="userStore.FindUserLoginAsync (userId, loginProvider, providerKey, cancellationToken)" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUserLogin?&gt; FindUserLoginAsync (TKey userId, string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUserLogin&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="TKey" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="loginProvider" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="providerKey" Type="System.String" Index="2" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="userId">The user's id.</param>
        <param name="loginProvider">The login provider name.</param>
        <param name="providerKey">The key provided by the <paramref name="loginProvider" /> to identify a user.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Return a user login with the matching userId, provider, providerKey if it exists.
            </summary>
        <returns>The user login if it exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUserRoleAsync">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Threading::Tasks::Task&lt;TUserRole&gt; ^ FindUserRoleAsync(TKey userId, TKey roleId, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUserRole&gt; FindUserRoleAsync (TKey userId, TKey roleId, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task`1&lt;!TUserRole&gt; FindUserRoleAsync(!TKey userId, !TKey roleId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.FindUserRoleAsync(`3,`3,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function FindUserRoleAsync (userId As TKey, roleId As TKey, cancellationToken As CancellationToken) As Task(Of TUserRole)" />
      <MemberSignature Language="F#" Value="override this.FindUserRoleAsync : 'Key * 'Key * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'UserRole (requires 'UserRole :&gt; Microsoft.AspNetCore.Identity.IdentityUserRole&lt;'Key&gt; and 'UserRole : (new : unit -&gt; 'UserRole))&gt;" Usage="userStore.FindUserRoleAsync (userId, roleId, cancellationToken)" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task&lt;TUserRole?&gt; FindUserRoleAsync (TKey userId, TKey roleId, System.Threading.CancellationToken cancellationToken);" FrameworkAlternate="aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TUserRole&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userId" Type="TKey" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="roleId" Type="TKey" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="userId">The user's id.</param>
        <param name="roleId">The role's id.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Return a user role for the userId and roleId if it exists.
            </summary>
        <returns>The user role if it exists.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAccessFailedCountAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; GetAccessFailedCountAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; GetAccessFailedCountAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetAccessFailedCountAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Integer)" />
      <MemberSignature Language="F#" Value="abstract member GetAccessFailedCountAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;&#xA;override this.GetAccessFailedCountAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="userStore.GetAccessFailedCountAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetAccessFailedCountAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose failed access count should be retrieved.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Retrieves the current failed access count for the specified <paramref name="user" />..
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the failed access count.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClaimsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.Security.Claims.Claim&gt;&gt; GetClaimsAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class System.Security.Claims.Claim&gt;&gt; GetClaimsAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetClaimsAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetClaimsAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of Claim))" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member GetClaimsAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.Security.Claims.Claim&gt;&gt;&#xA;override this.GetClaimsAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.Security.Claims.Claim&gt;&gt;" Usage="userStore.GetClaimsAsync (user, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.Security.Claims.Claim&gt;&gt; GetClaimsAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class System.Security.Claims.Claim&gt;&gt; GetClaimsAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetClaimsAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of Claim))" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.GetClaimsAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.Security.Claims.Claim&gt;&gt;" Usage="userStore.GetClaimsAsync (user, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetClaimsAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.Security.Claims.Claim&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user whose claims should be retrieved.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Get the claims associated with the specified <paramref name="user" /> as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that contains the claims granted to a user.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEmailAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetEmailAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetEmailAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetEmailAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEmailAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetEmailAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.GetEmailAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="userStore.GetEmailAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose email should be returned.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Gets the email address for the specified <paramref name="user" />.
            </summary>
        <returns>The task object containing the results of the asynchronous operation, the email address for the specified <paramref name="user" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEmailConfirmedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; GetEmailConfirmedAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; GetEmailConfirmedAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEmailConfirmedAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GetEmailConfirmedAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.GetEmailConfirmedAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="userStore.GetEmailConfirmedAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetEmailConfirmedAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose email confirmation status should be returned.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Gets a flag indicating whether the email address for the specified <paramref name="user" /> has been verified, true if the email address is verified otherwise
            false.
            </summary>
        <returns>
            The task object containing the results of the asynchronous operation, a flag indicating whether the email address for the specified <paramref name="user" />
            has been confirmed or not.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLockoutEnabledAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; GetLockoutEnabledAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; GetLockoutEnabledAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLockoutEnabledAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GetLockoutEnabledAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.GetLockoutEnabledAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="userStore.GetLockoutEnabledAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEnabledAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose ability to be locked out should be returned.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Retrieves a flag indicating whether user lockout can enabled for the specified user.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, true if a user can be locked out, otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLockoutEndDateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;DateTimeOffset?&gt; GetLockoutEndDateAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt;&gt; GetLockoutEndDateAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLockoutEndDateAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Nullable(Of DateTimeOffset))" />
      <MemberSignature Language="F#" Value="abstract member GetLockoutEndDateAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;DateTimeOffset&gt;&gt;&#xA;override this.GetLockoutEndDateAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Nullable&lt;DateTimeOffset&gt;&gt;" Usage="userStore.GetLockoutEndDateAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.GetLockoutEndDateAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Nullable&lt;System.DateTimeOffset&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose lockout date should be retrieved.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Gets the last <see cref="T:System.DateTimeOffset" /> a user's last lockout expired, if any.
            Any time in the past should be indicates a user is not locked out.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the result of the asynchronous query, a <see cref="T:System.DateTimeOffset" /> containing the last time
            a user's lockout expired, if any.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLoginsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt; GetLoginsAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt; GetLoginsAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetLoginsAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetLoginsAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of UserLoginInfo))" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member GetLoginsAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt;&#xA;override this.GetLoginsAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt;" Usage="userStore.GetLoginsAsync (user, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt; GetLoginsAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt; GetLoginsAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLoginsAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of UserLoginInfo))" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.GetLoginsAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt;" Usage="userStore.GetLoginsAsync (user, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.GetLoginsAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.AspNetCore.Identity.UserLoginInfo&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user whose associated logins to retrieve.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Retrieves the associated logins for the specified <param ref="user" />.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> for the asynchronous operation, containing a list of <see cref="T:Microsoft.AspNetCore.Identity.UserLoginInfo" /> for the specified <paramref name="user" />, if any.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNormalizedEmailAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetNormalizedEmailAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetNormalizedEmailAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNormalizedEmailAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetNormalizedEmailAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.GetNormalizedEmailAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="userStore.GetNormalizedEmailAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.GetNormalizedEmailAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose email address to retrieve.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Returns the normalized email for the specified <paramref name="user" />.
            </summary>
        <returns>
            The task object containing the results of the asynchronous lookup operation, the normalized email address if any associated with the specified user.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNormalizedUserNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetNormalizedUserNameAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetNormalizedUserNameAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetNormalizedUserNameAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetNormalizedUserNameAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.GetNormalizedUserNameAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="userStore.GetNormalizedUserNameAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserStore`1.GetNormalizedUserNameAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose normalized name should be retrieved.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Gets the normalized user name for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the normalized user name for the specified <paramref name="user" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPasswordHashAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetPasswordHashAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetPasswordHashAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetPasswordHashAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPasswordHashAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetPasswordHashAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.GetPasswordHashAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="userStore.GetPasswordHashAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.GetPasswordHashAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user to retrieve the password hash for.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Gets the password hash for a user.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that contains the password hash for the user.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPhoneNumberAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetPhoneNumberAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetPhoneNumberAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPhoneNumberAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetPhoneNumberAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.GetPhoneNumberAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="userStore.GetPhoneNumberAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose telephone number should be retrieved.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Gets the telephone number, if any, for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the user's telephone number, if any.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPhoneNumberConfirmedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; GetPhoneNumberConfirmedAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; GetPhoneNumberConfirmedAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPhoneNumberConfirmedAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GetPhoneNumberConfirmedAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.GetPhoneNumberConfirmedAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="userStore.GetPhoneNumberConfirmedAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.GetPhoneNumberConfirmedAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user to return a flag for, indicating whether their telephone number is confirmed.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Gets a flag indicating whether the specified <paramref name="user" />'s telephone number has been confirmed.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, returning true if the specified <paramref name="user" /> has a confirmed
            telephone number otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRolesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;string&gt;&gt; GetRolesAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;string&gt;&gt; GetRolesAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetRolesAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetRolesAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of String))" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member GetRolesAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;string&gt;&gt;&#xA;override this.GetRolesAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;string&gt;&gt;" Usage="userStore.GetRolesAsync (user, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;string&gt;&gt; GetRolesAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;string&gt;&gt; GetRolesAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetRolesAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of String))" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.GetRolesAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;string&gt;&gt;" Usage="userStore.GetRolesAsync (user, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetRolesAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user whose roles should be retrieved.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Retrieves the roles the specified <paramref name="user" /> is a member of.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that contains the roles the user is a member of.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSecurityStampAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetSecurityStampAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetSecurityStampAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetSecurityStampAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSecurityStampAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetSecurityStampAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.GetSecurityStampAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="userStore.GetSecurityStampAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.GetSecurityStampAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose security stamp should be set.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Get the security stamp for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the security stamp for the specified <paramref name="user" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::String ^&gt; ^ GetTokenAsync(TUser user, System::String ^ loginProvider, System::String ^ name, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; GetTokenAsync (TUser user, string loginProvider, string name, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetTokenAsync(!TUser user, string loginProvider, string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTokenAsync (user As TUser, loginProvider As String, name As String, cancellationToken As CancellationToken) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetTokenAsync : 'User * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.GetTokenAsync : 'User * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="userStore.GetTokenAsync (user, loginProvider, name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.GetTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="loginProvider" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user.</param>
        <param name="loginProvider">The authentication provider for the token.</param>
        <param name="name">The name of the token.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Returns the token value.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTwoFactorEnabledAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; GetTwoFactorEnabledAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; GetTwoFactorEnabledAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTwoFactorEnabledAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GetTwoFactorEnabledAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.GetTwoFactorEnabledAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="userStore.GetTwoFactorEnabledAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.GetTwoFactorEnabledAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose two factor authentication enabled status should be set.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Returns a flag indicating whether the specified <paramref name="user" /> has two factor authentication enabled or not,
            as an asynchronous operation.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing a flag indicating whether the specified 
            <paramref name="user" /> has two factor authentication enabled or not.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUserIdAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetUserIdAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetUserIdAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetUserIdAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUserIdAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetUserIdAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.GetUserIdAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="userStore.GetUserIdAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserStore`1.GetUserIdAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose identifier should be retrieved.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Gets the user identifier for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the identifier for the specified <paramref name="user" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUserNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetUserNameAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetUserNameAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetUserNameAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUserNameAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member GetUserNameAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;&#xA;override this.GetUserNameAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="userStore.GetUserNameAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserStore`1.GetUserNameAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose name should be retrieved.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Gets the user name for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the name for the specified <paramref name="user" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUsersForClaimAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;TUser&gt;&gt; GetUsersForClaimAsync (System.Security.Claims.Claim claim, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;!TUser&gt;&gt; GetUsersForClaimAsync(class System.Security.Claims.Claim claim, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUsersForClaimAsync (claim As Claim, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of TUser))" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member GetUsersForClaimAsync : System.Security.Claims.Claim * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;'User&gt;&gt;&#xA;override this.GetUsersForClaimAsync : System.Security.Claims.Claim * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;'User&gt;&gt;" Usage="userStore.GetUsersForClaimAsync (claim, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;TUser&gt;&gt; GetUsersForClaimAsync (System.Security.Claims.Claim claim, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;!TUser&gt;&gt; GetUsersForClaimAsync(class System.Security.Claims.Claim claim, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetUsersForClaimAsync (claim As Claim, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of TUser))" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.GetUsersForClaimAsync : System.Security.Claims.Claim * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;'User&gt;&gt;" Usage="userStore.GetUsersForClaimAsync (claim, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.GetUsersForClaimAsync(System.Security.Claims.Claim,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;TUser&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="claim" Type="System.Security.Claims.Claim" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="claim">The claim whose users should be retrieved.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Retrieves all users with the specified claim.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> contains a list of users, if any, that contain the specified claim.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRoleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;TUser&gt;&gt; GetUsersInRoleAsync (string normalizedRoleName, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;!TUser&gt;&gt; GetUsersInRoleAsync(string normalizedRoleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUsersInRoleAsync (normalizedRoleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of TUser))" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member GetUsersInRoleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;'User&gt;&gt;&#xA;override this.GetUsersInRoleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;'User&gt;&gt;" Usage="userStore.GetUsersInRoleAsync (normalizedRoleName, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;TUser&gt;&gt; GetUsersInRoleAsync (string normalizedRoleName, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;!TUser&gt;&gt; GetUsersInRoleAsync(string normalizedRoleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetUsersInRoleAsync (normalizedRoleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IList(Of TUser))" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.GetUsersInRoleAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;'User&gt;&gt;" Usage="userStore.GetUsersInRoleAsync (normalizedRoleName, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.GetUsersInRoleAsync(System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;TUser&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedRoleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="normalizedRoleName">The role whose users should be retrieved.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Retrieves all users in the specified role.
            </summary>
        <returns>
            The <see cref="T:System.Threading.Tasks.Task" /> contains a list of users, if any, that are in the specified role.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPasswordAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; HasPasswordAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; HasPasswordAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.HasPasswordAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasPasswordAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member HasPasswordAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.HasPasswordAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="userStore.HasPasswordAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.HasPasswordAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user to retrieve the password hash for.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Returns a flag indicating if the specified user has a password.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> containing a flag indicating if the specified user has a password. If the 
            user has a password the returned value with be true, otherwise it will be false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementAccessFailedCountAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; IncrementAccessFailedCountAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; IncrementAccessFailedCountAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IncrementAccessFailedCountAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Integer)" />
      <MemberSignature Language="F#" Value="abstract member IncrementAccessFailedCountAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;&#xA;override this.IncrementAccessFailedCountAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="userStore.IncrementAccessFailedCountAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.IncrementAccessFailedCountAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose cancellation count should be incremented.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Records that a failed access has occurred, incrementing the failed access count.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the incremented failed access count.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInRoleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; IsInRoleAsync (TUser user, string normalizedRoleName, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; IsInRoleAsync(!TUser user, string normalizedRoleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsInRoleAsync (user As TUser, normalizedRoleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member IsInRoleAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.IsInRoleAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="userStore.IsInRoleAsync (user, normalizedRoleName, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;bool&gt; IsInRoleAsync (TUser user, string normalizedRoleName, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; IsInRoleAsync(!TUser user, string normalizedRoleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsInRoleAsync (user As TUser, normalizedRoleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.IsInRoleAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="userStore.IsInRoleAsync (user, normalizedRoleName, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.IsInRoleAsync(`0,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="normalizedRoleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user whose role membership should be checked.</param>
        <param name="normalizedRoleName">The role to check membership of</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Returns a flag indicating if the specified user is a member of the give <paramref name="normalizedRoleName" />.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> containing a flag indicating if the specified user is a member of the given group. If the
            user is a member of the group the returned value with be true, otherwise it will be false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveClaimsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RemoveClaimsAsync (TUser user, System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; claims, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveClaimsAsync(!TUser user, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; claims, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveClaimsAsync (user As TUser, claims As IEnumerable(Of Claim), Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member RemoveClaimsAsync : 'User * seq&lt;System.Security.Claims.Claim&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.RemoveClaimsAsync : 'User * seq&lt;System.Security.Claims.Claim&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.RemoveClaimsAsync (user, claims, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task RemoveClaimsAsync (TUser user, System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt; claims, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task RemoveClaimsAsync(!TUser user, class System.Collections.Generic.IEnumerable`1&lt;class System.Security.Claims.Claim&gt; claims, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function RemoveClaimsAsync (user As TUser, claims As IEnumerable(Of Claim), Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.RemoveClaimsAsync : 'User * seq&lt;System.Security.Claims.Claim&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.RemoveClaimsAsync (user, claims, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.RemoveClaimsAsync(`0,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="claims" Type="System.Collections.Generic.IEnumerable&lt;System.Security.Claims.Claim&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to remove the claims from.</param>
        <param name="claims">The claim to remove.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Removes the <paramref name="claims" /> given from the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromRoleAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RemoveFromRoleAsync (TUser user, string normalizedRoleName, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveFromRoleAsync(!TUser user, string normalizedRoleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveFromRoleAsync (user As TUser, normalizedRoleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member RemoveFromRoleAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.RemoveFromRoleAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.RemoveFromRoleAsync (user, normalizedRoleName, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task RemoveFromRoleAsync (TUser user, string normalizedRoleName, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task RemoveFromRoleAsync(!TUser user, string normalizedRoleName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function RemoveFromRoleAsync (user As TUser, normalizedRoleName As String, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.RemoveFromRoleAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.RemoveFromRoleAsync (user, normalizedRoleName, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserRoleStore`1.RemoveFromRoleAsync(`0,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="normalizedRoleName" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to remove the role from.</param>
        <param name="normalizedRoleName">The role to remove.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Removes the given <paramref name="normalizedRoleName" /> from the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveLoginAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RemoveLoginAsync (TUser user, string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveLoginAsync(!TUser user, string loginProvider, string providerKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function RemoveLoginAsync (user As TUser, loginProvider As String, providerKey As String, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member RemoveLoginAsync : 'User * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.RemoveLoginAsync : 'User * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.RemoveLoginAsync (user, loginProvider, providerKey, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task RemoveLoginAsync (TUser user, string loginProvider, string providerKey, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task RemoveLoginAsync(!TUser user, string loginProvider, string providerKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function RemoveLoginAsync (user As TUser, loginProvider As String, providerKey As String, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.RemoveLoginAsync : 'User * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.RemoveLoginAsync (user, loginProvider, providerKey, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserLoginStore`1.RemoveLoginAsync(`0,System.String,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="loginProvider" Type="System.String" />
        <Parameter Name="providerKey" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to remove the login from.</param>
        <param name="loginProvider">The login to remove from the user.</param>
        <param name="providerKey">The key provided by the <paramref name="loginProvider" /> to identify a user.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Removes the <paramref name="loginProvider" /> given from the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTokenAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ RemoveTokenAsync(TUser user, System::String ^ loginProvider, System::String ^ name, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task RemoveTokenAsync (TUser user, string loginProvider, string name, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveTokenAsync(!TUser user, string loginProvider, string name, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveTokenAsync (user As TUser, loginProvider As String, name As String, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member RemoveTokenAsync : 'User * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.RemoveTokenAsync : 'User * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.RemoveTokenAsync (user, loginProvider, name, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.RemoveTokenAsync(`0,System.String,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="loginProvider" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user.</param>
        <param name="loginProvider">The authentication provider for the token.</param>
        <param name="name">The name of the token.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Deletes a token for a user.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserTokenAsync">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Threading::Tasks::Task ^ RemoveUserTokenAsync(TUserToken token);" />
      <MemberSignature Language="C#" Value="protected override System.Threading.Tasks.Task RemoveUserTokenAsync (TUserToken token);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Threading.Tasks.Task RemoveUserTokenAsync(!TUserToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.RemoveUserTokenAsync(`7)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RemoveUserTokenAsync (token As TUserToken) As Task" />
      <MemberSignature Language="F#" Value="override this.RemoveUserTokenAsync : 'UserToken -&gt; System.Threading.Tasks.Task" Usage="userStore.RemoveUserTokenAsync token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="TUserToken" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-5.0;aspnetcore-3.1;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="token">The token to be removed.</param>
        <summary>
            Remove a new user token.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceClaimAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ReplaceClaimAsync (TUser user, System.Security.Claims.Claim claim, System.Security.Claims.Claim newClaim, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ReplaceClaimAsync(!TUser user, class System.Security.Claims.Claim claim, class System.Security.Claims.Claim newClaim, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReplaceClaimAsync (user As TUser, claim As Claim, newClaim As Claim, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member ReplaceClaimAsync : 'User * System.Security.Claims.Claim * System.Security.Claims.Claim * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.ReplaceClaimAsync : 'User * System.Security.Claims.Claim * System.Security.Claims.Claim * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.ReplaceClaimAsync (user, claim, newClaim, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task ReplaceClaimAsync (TUser user, System.Security.Claims.Claim claim, System.Security.Claims.Claim newClaim, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task ReplaceClaimAsync(!TUser user, class System.Security.Claims.Claim claim, class System.Security.Claims.Claim newClaim, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReplaceClaimAsync (user As TUser, claim As Claim, newClaim As Claim, Optional cancellationToken As CancellationToken = Nothing) As Task" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.ReplaceClaimAsync : 'User * System.Security.Claims.Claim * System.Security.Claims.Claim * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.ReplaceClaimAsync (user, claim, newClaim, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">M:Microsoft.AspNetCore.Identity.IUserClaimStore`1.ReplaceClaimAsync(`0,System.Security.Claims.Claim,System.Security.Claims.Claim,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="claim" Type="System.Security.Claims.Claim" />
        <Parameter Name="newClaim" Type="System.Security.Claims.Claim" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to replace the claim on.</param>
        <param name="claim">The claim replace.</param>
        <param name="newClaim">The new claim replacing the <paramref name="claim" />.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Replaces the <paramref name="claim" /> on the specified <paramref name="user" />, with the <paramref name="newClaim" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessFailedCountAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ResetAccessFailedCountAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ResetAccessFailedCountAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResetAccessFailedCountAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member ResetAccessFailedCountAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.ResetAccessFailedCountAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.ResetAccessFailedCountAsync (user, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.ResetAccessFailedCountAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="1" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose failed access count should be reset.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Resets a user's failed access count.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>This is typically called after the account is successfully accessed.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Threading::Tasks::Task ^ SaveChanges(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="protected System.Threading.Tasks.Task SaveChanges (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Threading.Tasks.Task SaveChanges(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SaveChanges(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Function SaveChanges (cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="member this.SaveChanges : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SaveChanges cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>Saves the current store.</summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEmailAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetEmailAsync (TUser user, string email, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetEmailAsync(!TUser user, string email, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetEmailAsync (user As TUser, email As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetEmailAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetEmailAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SetEmailAsync (user, email, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailAsync(`0,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="email" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose email should be set.</param>
        <param name="email">The email to set.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Sets the <paramref name="email" /> address for a <paramref name="user" />.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEmailConfirmedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetEmailConfirmedAsync (TUser user, bool confirmed, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetEmailConfirmedAsync(!TUser user, bool confirmed, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetEmailConfirmedAsync (user As TUser, confirmed As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetEmailConfirmedAsync : 'User * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetEmailConfirmedAsync : 'User * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SetEmailConfirmedAsync (user, confirmed, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetEmailConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="confirmed" Type="System.Boolean" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose email confirmation status should be set.</param>
        <param name="confirmed">A flag indicating if the email address has been confirmed, true if the address is confirmed otherwise false.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Sets the flag indicating whether the specified <paramref name="user" />'s email address has been confirmed or not.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLockoutEnabledAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetLockoutEnabledAsync (TUser user, bool enabled, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetLockoutEnabledAsync(!TUser user, bool enabled, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetLockoutEnabledAsync (user As TUser, enabled As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetLockoutEnabledAsync : 'User * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetLockoutEnabledAsync : 'User * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SetLockoutEnabledAsync (user, enabled, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="enabled" Type="System.Boolean" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose ability to be locked out should be set.</param>
        <param name="enabled">A flag indicating if lock out can be enabled for the specified <paramref name="user" />.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Set the flag indicating if the specified <paramref name="user" /> can be locked out..
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLockoutEndDateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetLockoutEndDateAsync (TUser user, DateTimeOffset? lockoutEnd, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetLockoutEndDateAsync(!TUser user, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; lockoutEnd, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetLockoutEndDateAsync (user As TUser, lockoutEnd As Nullable(Of DateTimeOffset), Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetLockoutEndDateAsync : 'User * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetLockoutEndDateAsync : 'User * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SetLockoutEndDateAsync (user, lockoutEnd, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserLockoutStore`1.SetLockoutEndDateAsync(`0,System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="lockoutEnd" Type="System.Nullable&lt;System.DateTimeOffset&gt;" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose lockout date should be set.</param>
        <param name="lockoutEnd">The <see cref="T:System.DateTimeOffset" /> after which the <paramref name="user" />'s lockout should end.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Locks out a user until the specified end date has passed. Setting a end date in the past immediately unlocks a user.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNormalizedEmailAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetNormalizedEmailAsync (TUser user, string normalizedEmail, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetNormalizedEmailAsync(!TUser user, string normalizedEmail, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetNormalizedEmailAsync (user As TUser, normalizedEmail As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetNormalizedEmailAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetNormalizedEmailAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SetNormalizedEmailAsync (user, normalizedEmail, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserEmailStore`1.SetNormalizedEmailAsync(`0,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="normalizedEmail" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose email address to set.</param>
        <param name="normalizedEmail">The normalized email to set for the specified <paramref name="user" />.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Sets the normalized email for the specified <paramref name="user" />.
            </summary>
        <returns>The task object representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNormalizedUserNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetNormalizedUserNameAsync (TUser user, string normalizedName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetNormalizedUserNameAsync(!TUser user, string normalizedName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetNormalizedUserNameAsync (user As TUser, normalizedName As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetNormalizedUserNameAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetNormalizedUserNameAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SetNormalizedUserNameAsync (user, normalizedName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserStore`1.SetNormalizedUserNameAsync(`0,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="normalizedName" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose name should be set.</param>
        <param name="normalizedName">The normalized name to set.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Sets the given normalized name for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPasswordHashAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetPasswordHashAsync (TUser user, string passwordHash, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetPasswordHashAsync(!TUser user, string passwordHash, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetPasswordHashAsync (user As TUser, passwordHash As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetPasswordHashAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetPasswordHashAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SetPasswordHashAsync (user, passwordHash, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserPasswordStore`1.SetPasswordHashAsync(`0,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="passwordHash" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user to set the password hash for.</param>
        <param name="passwordHash">The password hash to set.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Sets the password hash for a user.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPhoneNumberAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetPhoneNumberAsync (TUser user, string phoneNumber, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetPhoneNumberAsync(!TUser user, string phoneNumber, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetPhoneNumberAsync (user As TUser, phoneNumber As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetPhoneNumberAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetPhoneNumberAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SetPhoneNumberAsync (user, phoneNumber, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberAsync(`0,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="phoneNumber" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose telephone number should be set.</param>
        <param name="phoneNumber">The telephone number to set.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Sets the telephone number for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPhoneNumberConfirmedAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetPhoneNumberConfirmedAsync (TUser user, bool confirmed, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetPhoneNumberConfirmedAsync(!TUser user, bool confirmed, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetPhoneNumberConfirmedAsync (user As TUser, confirmed As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetPhoneNumberConfirmedAsync : 'User * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetPhoneNumberConfirmedAsync : 'User * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SetPhoneNumberConfirmedAsync (user, confirmed, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1.SetPhoneNumberConfirmedAsync(`0,System.Boolean,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="confirmed" Type="System.Boolean" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose telephone number confirmation status should be set.</param>
        <param name="confirmed">A flag indicating whether the user's telephone number has been confirmed.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Sets a flag indicating if the specified <paramref name="user" />'s phone number has been confirmed..
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSecurityStampAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetSecurityStampAsync (TUser user, string stamp, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetSecurityStampAsync(!TUser user, string stamp, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetSecurityStampAsync (user As TUser, stamp As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetSecurityStampAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetSecurityStampAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SetSecurityStampAsync (user, stamp, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1.SetSecurityStampAsync(`0,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="stamp" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose security stamp should be set.</param>
        <param name="stamp">The security stamp to set.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Sets the provided security <paramref name="stamp" /> for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTokenAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ SetTokenAsync(TUser user, System::String ^ loginProvider, System::String ^ name, System::String ^ value, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetTokenAsync (TUser user, string loginProvider, string name, string value, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetTokenAsync(!TUser user, string loginProvider, string name, string value, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTokenAsync (user As TUser, loginProvider As String, name As String, value As String, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetTokenAsync : 'User * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetTokenAsync : 'User * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SetTokenAsync (user, loginProvider, name, value, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1.SetTokenAsync(`0,System.String,System.String,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="loginProvider" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="value" Type="System.String" Index="3" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user.</param>
        <param name="loginProvider">The authentication provider for the token.</param>
        <param name="name">The name of the token.</param>
        <param name="value">The value of the token.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Sets the token value for a particular user.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTwoFactorEnabledAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetTwoFactorEnabledAsync (TUser user, bool enabled, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetTwoFactorEnabledAsync(!TUser user, bool enabled, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetTwoFactorEnabledAsync (user As TUser, enabled As Boolean, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetTwoFactorEnabledAsync : 'User * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetTwoFactorEnabledAsync : 'User * bool * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SetTwoFactorEnabledAsync (user, enabled, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1.SetTwoFactorEnabledAsync(`0,System.Boolean,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="enabled" Type="System.Boolean" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose two factor authentication enabled status should be set.</param>
        <param name="enabled">A flag indicating whether the specified <paramref name="user" /> has two factor authentication enabled.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Sets a flag indicating whether the specified <paramref name="user" /> has two factor authentication enabled or not,
            as an asynchronous operation.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUserNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SetUserNameAsync (TUser user, string userName, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SetUserNameAsync(!TUser user, string userName, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SetUserNameAsync (user As TUser, userName As String, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SetUserNameAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.SetUserNameAsync : 'User * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="userStore.SetUserNameAsync (user, userName, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.AspNetCore.Identity.IUserStore`1.SetUserNameAsync(`0,System.String,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" Index="0" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="userName" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-1.1" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="user">The user whose name should be set.</param>
        <param name="userName">The user name to set.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Sets the given <paramref name="userName" /> for the specified <paramref name="user" />.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThrowIfDisposed">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ThrowIfDisposed();" />
      <MemberSignature Language="C#" Value="protected void ThrowIfDisposed ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ThrowIfDisposed() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.ThrowIfDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ThrowIfDisposed ()" />
      <MemberSignature Language="F#" Value="member this.ThrowIfDisposed : unit -&gt; unit" Usage="userStore.ThrowIfDisposed " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Throws if this class has been disposed.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; UpdateAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; UpdateAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.UpdateAsync(`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="abstract member UpdateAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;&#xA;override this.UpdateAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;" Usage="userStore.UpdateAsync (user, cancellationToken)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt; UpdateAsync (TUser user, System.Threading.CancellationToken cancellationToken = default);" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.AspNetCore.Identity.IdentityResult&gt; UpdateAsync(!TUser user, valuetype System.Threading.CancellationToken cancellationToken) cil managed" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function UpdateAsync (user As TUser, Optional cancellationToken As CancellationToken = Nothing) As Task(Of IdentityResult)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="override this.UpdateAsync : 'User * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;" Usage="userStore.UpdateAsync (user, cancellationToken)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">M:Microsoft.AspNetCore.Identity.IUserStore`1.UpdateAsync(`0,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.AspNetCore.Identity.IdentityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="TUser" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="user">The user to update.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" /> used to propagate notifications that the operation should be canceled.</param>
        <summary>
            Updates the specified <paramref name="user" /> in the user store.
            </summary>
        <returns>The <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation, containing the <see cref="T:Microsoft.AspNetCore.Identity.IdentityResult" /> of the update operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Users">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Linq::IQueryable&lt;TUser&gt; ^ Users { System::Linq::IQueryable&lt;TUser&gt; ^ get(); };" />
      <MemberSignature Language="C#" Value="public virtual System.Linq.IQueryable&lt;TUser&gt; Users { get; }" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryable`1&lt;!TUser&gt; Users" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore`9.Users" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Users As IQueryable(Of TUser)" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="member this.Users : System.Linq.IQueryable&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt;)&gt;" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUser&lt;'Key, 'UserClaim, 'UserRole, 'UserLogin&gt; and 'Role :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole&lt;'Key, 'UserRole, 'RoleClaim&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserClaim&lt;'Key&gt; and 'UserRole :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserRole&lt;'Key&gt; and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserLogin&lt;'Key&gt; and 'UserToken :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityUserToken&lt;'Key&gt; and 'RoleClaim :&gt; Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRoleClaim&lt;'Key&gt;)&gt;.Users" FrameworkAlternate="aspnetcore-1.1" />
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable&lt;TUser&gt; Users { get; }" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Users As IQueryable(Of TUser)" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberSignature Language="F#" Value="member this.Users : System.Linq.IQueryable&lt;'User (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt;)&gt;" Usage="Microsoft.AspNetCore.Identity.EntityFrameworkCore.UserStore&lt;'User, 'Role, 'Context, 'Key, 'UserClaim, 'UserRole, 'UserLogin, 'UserToken, 'RoleClaim (requires 'User :&gt; Microsoft.AspNetCore.Identity.IdentityUser&lt;'Key&gt; and 'Role :&gt; Microsoft.AspNetCore.Identity.IdentityRole&lt;'Key&gt; and 'Context :&gt; Microsoft.EntityFrameworkCore.DbContext and 'Key :&gt; System.IEquatable&lt;'Key&gt; and 'UserClaim :&gt; Microsoft.AspNetCore.Identity.IdentityUserClaim&lt;'Key&gt; and 'UserClaim : (new : unit -&gt; 'UserClaim) and 'UserRole :&gt; Microsoft.AspNetCore.Identity.IdentityUserRole&lt;'Key&gt; and 'UserRole : (new : unit -&gt; 'UserRole) and 'UserLogin :&gt; Microsoft.AspNetCore.Identity.IdentityUserLogin&lt;'Key&gt; and 'UserLogin : (new : unit -&gt; 'UserLogin) and 'UserToken :&gt; Microsoft.AspNetCore.Identity.IdentityUserToken&lt;'Key&gt; and 'UserToken : (new : unit -&gt; 'UserToken) and 'RoleClaim :&gt; Microsoft.AspNetCore.Identity.IdentityRoleClaim&lt;'Key&gt; and 'RoleClaim : (new : unit -&gt; 'RoleClaim))&gt;.Users" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="aspnetcore-1.1">P:Microsoft.AspNetCore.Identity.IQueryableUserStore`1.Users</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Identity.EntityFrameworkCore</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.3.0</AssemblyVersion>
        <AssemblyVersion>3.1.18.0</AssemblyVersion>
        <AssemblyVersion>5.0.9.0</AssemblyVersion>
        <AssemblyVersion>6.0.6.0</AssemblyVersion>
        <AssemblyVersion>7.0.5.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TUser&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            A navigation property for the users the store contains.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
