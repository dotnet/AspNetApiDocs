<Type Name="PerRequestLogBufferingOptions" FullName="Microsoft.AspNetCore.Diagnostics.Buffering.PerRequestLogBufferingOptions">
  <TypeSignature Language="C#" Value="public class PerRequestLogBufferingOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PerRequestLogBufferingOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Diagnostics.Buffering.PerRequestLogBufferingOptions" />
  <TypeSignature Language="VB.NET" Value="Public Class PerRequestLogBufferingOptions" />
  <TypeSignature Language="F#" Value="type PerRequestLogBufferingOptions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Diagnostics.Middleware</AssemblyName>
    <AssemblyVersion>9.5.0.0</AssemblyVersion>
    <AssemblyVersion>9.6.0.0</AssemblyVersion>
    <AssemblyVersion>9.7.0.0</AssemblyVersion>
    <AssemblyVersion>9.8.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            The options for log buffering per each incoming request.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PerRequestLogBufferingOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Diagnostics.Buffering.PerRequestLogBufferingOptions.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Diagnostics.Middleware</AssemblyName>
        <AssemblyVersion>9.8.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFlushDuration">
      <MemberSignature Language="C#" Value="public TimeSpan AutoFlushDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AutoFlushDuration" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Diagnostics.Buffering.PerRequestLogBufferingOptions.AutoFlushDuration" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoFlushDuration As TimeSpan" />
      <MemberSignature Language="F#" Value="member this.AutoFlushDuration : TimeSpan with get, set" Usage="Microsoft.AspNetCore.Diagnostics.Buffering.PerRequestLogBufferingOptions.AutoFlushDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Diagnostics.Middleware</AssemblyName>
        <AssemblyVersion>9.8.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the time to do automatic flushing after manual flushing was triggered.
            </summary>
        <value>To be added.</value>
        <remarks>
            Use this to temporarily suspend buffering after a flush, e.g. in case of an incident you may want all logs to be emitted immediately,
            so the buffering will be suspended for the <see paramref="AutoFlushDuration" /> time.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxLogRecordSizeInBytes">
      <MemberSignature Language="C#" Value="public int MaxLogRecordSizeInBytes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLogRecordSizeInBytes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Diagnostics.Buffering.PerRequestLogBufferingOptions.MaxLogRecordSizeInBytes" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxLogRecordSizeInBytes As Integer" />
      <MemberSignature Language="F#" Value="member this.MaxLogRecordSizeInBytes : int with get, set" Usage="Microsoft.AspNetCore.Diagnostics.Buffering.PerRequestLogBufferingOptions.MaxLogRecordSizeInBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Diagnostics.Middleware</AssemblyName>
        <AssemblyVersion>9.8.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DataAnnotations.Range(1, 10485760)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DataAnnotations.Range(1, 10485760)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the maximum size of each individual log record in bytes.
            </summary>
        <value>To be added.</value>
        <remarks>
            If the size of a log record exceeds this limit, it won't be buffered.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPerRequestBufferSizeInBytes">
      <MemberSignature Language="C#" Value="public int MaxPerRequestBufferSizeInBytes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxPerRequestBufferSizeInBytes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Diagnostics.Buffering.PerRequestLogBufferingOptions.MaxPerRequestBufferSizeInBytes" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxPerRequestBufferSizeInBytes As Integer" />
      <MemberSignature Language="F#" Value="member this.MaxPerRequestBufferSizeInBytes : int with get, set" Usage="Microsoft.AspNetCore.Diagnostics.Buffering.PerRequestLogBufferingOptions.MaxPerRequestBufferSizeInBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Diagnostics.Middleware</AssemblyName>
        <AssemblyVersion>9.8.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DataAnnotations.Range(1, 10737418240)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DataAnnotations.Range(1, 10737418240)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the maximum size of each per request buffer in bytes.
            </summary>
        <value>To be added.</value>
        <remarks>
            If adding a new log entry would cause the buffer size to exceed this limit,
            the oldest buffered log records will be dropped to make room.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rules">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;Microsoft.Extensions.Diagnostics.Buffering.LogBufferingFilterRule&gt; Rules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class Microsoft.Extensions.Diagnostics.Buffering.LogBufferingFilterRule&gt; Rules" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Diagnostics.Buffering.PerRequestLogBufferingOptions.Rules" />
      <MemberSignature Language="VB.NET" Value="Public Property Rules As IList(Of LogBufferingFilterRule)" />
      <MemberSignature Language="F#" Value="member this.Rules : System.Collections.Generic.IList&lt;Microsoft.Extensions.Diagnostics.Buffering.LogBufferingFilterRule&gt; with get, set" Usage="Microsoft.AspNetCore.Diagnostics.Buffering.PerRequestLogBufferingOptions.Rules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Diagnostics.Middleware</AssemblyName>
        <AssemblyVersion>9.8.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;Microsoft.Extensions.Diagnostics.Buffering.LogBufferingFilterRule&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets or sets the collection of <see cref="T:Microsoft.Extensions.Diagnostics.Buffering.LogBufferingFilterRule" /> used for filtering log messages for the purpose of further buffering.
            </summary>
        <value>To be added.</value>
        <remarks>
            If a log entry matches a rule, it will be buffered for the lifetime and scope of the respective incoming request.
            Consequently, it will later be emitted when the buffer is flushed.
            When the request finishes, and flush has not happened, buffered log entries of that specific request will be dropped.
            If a log entry does not match any rule, it will be emitted normally.
            If the buffer size limit is reached, the oldest buffered log entries will be dropped (not emitted!) to make room for new ones.
            If a log entry size is greater than <see cref="P:Microsoft.AspNetCore.Diagnostics.Buffering.PerRequestLogBufferingOptions.MaxLogRecordSizeInBytes" />, it will not be buffered and will be emitted normally.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
