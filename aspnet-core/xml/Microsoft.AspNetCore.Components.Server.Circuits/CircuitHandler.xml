<Type Name="CircuitHandler" FullName="Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler">
  <TypeSignature Language="C++ CLI" Value="public ref class CircuitHandler abstract" />
  <TypeSignature Language="C#" Value="public abstract class CircuitHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CircuitHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CircuitHandler" />
  <TypeSignature Language="F#" Value="type CircuitHandler = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Components.Server</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A <see cref="T:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler" /> allows running code during specific lifetime events of a <see cref="T:Microsoft.AspNetCore.Components.Server.Circuits.Circuit" />.
            <list type="bullet"><item><description><see cref="M:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.OnCircuitOpenedAsync(Microsoft.AspNetCore.Components.Server.Circuits.Circuit,System.Threading.CancellationToken)" /> is invoked after an initial circuit to the client
            has been established.
            </description></item><item><description><see cref="M:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.OnConnectionUpAsync(Microsoft.AspNetCore.Components.Server.Circuits.Circuit,System.Threading.CancellationToken)" /> is invoked immediately after the completion of
            <see cref="M:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.OnCircuitOpenedAsync(Microsoft.AspNetCore.Components.Server.Circuits.Circuit,System.Threading.CancellationToken)" />. In addition, the method is invoked each time a connection is re-established
            with a client after it's been dropped. <see cref="M:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.OnConnectionDownAsync(Microsoft.AspNetCore.Components.Server.Circuits.Circuit,System.Threading.CancellationToken)" /> is invoked each time a connection
            is dropped.
            </description></item><item><description><see cref="M:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.OnCircuitClosedAsync(Microsoft.AspNetCore.Components.Server.Circuits.Circuit,System.Threading.CancellationToken)" /> is invoked prior to the server evicting the circuit to the client.
            Application users may use this event to save state for a client that can be later rehydrated.
            </description></item></list></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CircuitHandler();" />
      <MemberSignature Language="C#" Value="protected CircuitHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.Server</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCircuitClosedAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ OnCircuitClosedAsync(Microsoft::AspNetCore::Components::Server::Circuits::Circuit ^ circuit, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task OnCircuitClosedAsync (Microsoft.AspNetCore.Components.Server.Circuits.Circuit circuit, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task OnCircuitClosedAsync(class Microsoft.AspNetCore.Components.Server.Circuits.Circuit circuit, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.OnCircuitClosedAsync(Microsoft.AspNetCore.Components.Server.Circuits.Circuit,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnCircuitClosedAsync (circuit As Circuit, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member OnCircuitClosedAsync : Microsoft.AspNetCore.Components.Server.Circuits.Circuit * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.OnCircuitClosedAsync : Microsoft.AspNetCore.Components.Server.Circuits.Circuit * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="circuitHandler.OnCircuitClosedAsync (circuit, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.Server</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="circuit" Type="Microsoft.AspNetCore.Components.Server.Circuits.Circuit" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="circuit">The <see cref="T:Microsoft.AspNetCore.Components.Server.Circuits.Circuit" />.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" />.</param>
        <summary>
            Invoked when a new circuit is being discarded.
            </summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous execution operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCircuitOpenedAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ OnCircuitOpenedAsync(Microsoft::AspNetCore::Components::Server::Circuits::Circuit ^ circuit, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task OnCircuitOpenedAsync (Microsoft.AspNetCore.Components.Server.Circuits.Circuit circuit, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task OnCircuitOpenedAsync(class Microsoft.AspNetCore.Components.Server.Circuits.Circuit circuit, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.OnCircuitOpenedAsync(Microsoft.AspNetCore.Components.Server.Circuits.Circuit,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnCircuitOpenedAsync (circuit As Circuit, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member OnCircuitOpenedAsync : Microsoft.AspNetCore.Components.Server.Circuits.Circuit * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.OnCircuitOpenedAsync : Microsoft.AspNetCore.Components.Server.Circuits.Circuit * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="circuitHandler.OnCircuitOpenedAsync (circuit, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.Server</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="circuit" Type="Microsoft.AspNetCore.Components.Server.Circuits.Circuit" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="circuit">The <see cref="T:Microsoft.AspNetCore.Components.Server.Circuits.Circuit" />.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that notifies when the client connection is aborted.</param>
        <summary>
            Invoked when a new circuit was established.
            </summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous execution operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnConnectionDownAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ OnConnectionDownAsync(Microsoft::AspNetCore::Components::Server::Circuits::Circuit ^ circuit, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task OnConnectionDownAsync (Microsoft.AspNetCore.Components.Server.Circuits.Circuit circuit, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task OnConnectionDownAsync(class Microsoft.AspNetCore.Components.Server.Circuits.Circuit circuit, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.OnConnectionDownAsync(Microsoft.AspNetCore.Components.Server.Circuits.Circuit,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnConnectionDownAsync (circuit As Circuit, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member OnConnectionDownAsync : Microsoft.AspNetCore.Components.Server.Circuits.Circuit * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.OnConnectionDownAsync : Microsoft.AspNetCore.Components.Server.Circuits.Circuit * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="circuitHandler.OnConnectionDownAsync (circuit, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.Server</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="circuit" Type="Microsoft.AspNetCore.Components.Server.Circuits.Circuit" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="circuit">The <see cref="T:Microsoft.AspNetCore.Components.Server.Circuits.Circuit" />.</param>
        <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken" />.</param>
        <summary>
            Invoked when a connection to the client was dropped.
            </summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous execution operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnConnectionUpAsync">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ OnConnectionUpAsync(Microsoft::AspNetCore::Components::Server::Circuits::Circuit ^ circuit, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task OnConnectionUpAsync (Microsoft.AspNetCore.Components.Server.Circuits.Circuit circuit, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task OnConnectionUpAsync(class Microsoft.AspNetCore.Components.Server.Circuits.Circuit circuit, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.OnConnectionUpAsync(Microsoft.AspNetCore.Components.Server.Circuits.Circuit,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnConnectionUpAsync (circuit As Circuit, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member OnConnectionUpAsync : Microsoft.AspNetCore.Components.Server.Circuits.Circuit * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.OnConnectionUpAsync : Microsoft.AspNetCore.Components.Server.Circuits.Circuit * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="circuitHandler.OnConnectionUpAsync (circuit, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.Server</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="circuit" Type="Microsoft.AspNetCore.Components.Server.Circuits.Circuit" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="circuit">The <see cref="T:Microsoft.AspNetCore.Components.Server.Circuits.Circuit" />.</param>
        <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> that notifies when the client connection is aborted.</param>
        <summary>
            Invoked when a connection to the client was established.
            <para>
            This method is executed once initially after <see cref="M:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.OnCircuitOpenedAsync(Microsoft.AspNetCore.Components.Server.Circuits.Circuit,System.Threading.CancellationToken)" />
            and once each for each reconnect during the lifetime of a circuit.
            </para></summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous execution operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Order">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Order { int get(); };" />
      <MemberSignature Language="C#" Value="public virtual int Order { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Order" />
      <MemberSignature Language="DocId" Value="P:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.Order" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Order As Integer" />
      <MemberSignature Language="F#" Value="member this.Order : int" Usage="Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.Order" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Components.Server</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the execution order for the current instance of <see cref="T:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler" />.
            <para>
            When multiple <see cref="T:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler" /> instances are registered, the <see cref="P:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.Order" />
            property is used to determine the order in which instances are executed. When two handlers
            have the same value for <see cref="P:Microsoft.AspNetCore.Components.Server.Circuits.CircuitHandler.Order" />, their execution order is non-deterministic.
            </para></summary>
        <value>
            Defaults to 0.
            </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
