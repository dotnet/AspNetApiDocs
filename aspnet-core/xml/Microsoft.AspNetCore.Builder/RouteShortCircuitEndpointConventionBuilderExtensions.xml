<Type Name="RouteShortCircuitEndpointConventionBuilderExtensions" FullName="Microsoft.AspNetCore.Builder.RouteShortCircuitEndpointConventionBuilderExtensions">
  <TypeSignature Language="C#" Value="public static class RouteShortCircuitEndpointConventionBuilderExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RouteShortCircuitEndpointConventionBuilderExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Builder.RouteShortCircuitEndpointConventionBuilderExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module RouteShortCircuitEndpointConventionBuilderExtensions" />
  <TypeSignature Language="F#" Value="type RouteShortCircuitEndpointConventionBuilderExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>9.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Short circuit extension methods for <see cref="T:Microsoft.AspNetCore.Builder.IEndpointConventionBuilder" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ShortCircuit">
      <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IEndpointConventionBuilder ShortCircuit (this Microsoft.AspNetCore.Builder.IEndpointConventionBuilder builder, int? statusCode = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IEndpointConventionBuilder ShortCircuit(class Microsoft.AspNetCore.Builder.IEndpointConventionBuilder builder, valuetype System.Nullable`1&lt;int32&gt; statusCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.RouteShortCircuitEndpointConventionBuilderExtensions.ShortCircuit(Microsoft.AspNetCore.Builder.IEndpointConventionBuilder,System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ShortCircuit (builder As IEndpointConventionBuilder, Optional statusCode As Nullable(Of Integer) = Nothing) As IEndpointConventionBuilder" />
      <MemberSignature Language="F#" Value="static member ShortCircuit : Microsoft.AspNetCore.Builder.IEndpointConventionBuilder * Nullable&lt;int&gt; -&gt; Microsoft.AspNetCore.Builder.IEndpointConventionBuilder" Usage="Microsoft.AspNetCore.Builder.RouteShortCircuitEndpointConventionBuilderExtensions.ShortCircuit (builder, statusCode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Routing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>9.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Builder.IEndpointConventionBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.AspNetCore.Builder.IEndpointConventionBuilder" RefType="this" />
        <Parameter Name="statusCode" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="builder">The endpoint convention builder.</param>
        <param name="statusCode">The status code to set in the response.</param>
        <summary>
            Short circuit the endpoint(s).
            The execution of the endpoint will happen in UseRouting middleware instead of UseEndpoint.
            </summary>
        <returns>The original convention builder parameter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
