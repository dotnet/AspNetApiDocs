<Type Name="ExceptionHandlerExtensions" FullName="Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions">
  <TypeSignature Language="C++ CLI" Value="public ref class ExceptionHandlerExtensions abstract sealed" />
  <TypeSignature Language="C#" Value="public static class ExceptionHandlerExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ExceptionHandlerExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ExceptionHandlerExtensions" />
  <TypeSignature Language="F#" Value="type ExceptionHandlerExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Diagnostics</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extension methods for enabling <see cref="T:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="UseExceptionHandler">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::AspNetCore::Builder::IApplicationBuilder ^ UseExceptionHandler(Microsoft::AspNetCore::Builder::IApplicationBuilder ^ app);" />
      <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler (this Microsoft.AspNetCore.Builder.IApplicationBuilder app);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(class Microsoft.AspNetCore.Builder.IApplicationBuilder app) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseExceptionHandler (app As IApplicationBuilder) As IApplicationBuilder" />
      <MemberSignature Language="F#" Value="static member UseExceptionHandler : Microsoft.AspNetCore.Builder.IApplicationBuilder -&gt; Microsoft.AspNetCore.Builder.IApplicationBuilder" Usage="Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler app" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Diagnostics</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="app" />
        <summary>
            Adds a middleware to the pipeline that will catch exceptions, log them, and re-execute the request in an alternate pipeline.
            The request will not be re-executed if the response has already started.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseExceptionHandler">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::AspNetCore::Builder::IApplicationBuilder ^ UseExceptionHandler(Microsoft::AspNetCore::Builder::IApplicationBuilder ^ app, Microsoft::AspNetCore::Builder::ExceptionHandlerOptions ^ options);" />
      <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Microsoft.AspNetCore.Builder.ExceptionHandlerOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class Microsoft.AspNetCore.Builder.ExceptionHandlerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Builder.ExceptionHandlerOptions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseExceptionHandler (app As IApplicationBuilder, options As ExceptionHandlerOptions) As IApplicationBuilder" />
      <MemberSignature Language="F#" Value="static member UseExceptionHandler : Microsoft.AspNetCore.Builder.IApplicationBuilder * Microsoft.AspNetCore.Builder.ExceptionHandlerOptions -&gt; Microsoft.AspNetCore.Builder.IApplicationBuilder" Usage="Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler (app, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Diagnostics</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        <Parameter Name="options" Type="Microsoft.AspNetCore.Builder.ExceptionHandlerOptions" />
      </Parameters>
      <Docs>
        <param name="app" />
        <param name="options" />
        <summary>
            Adds a middleware to the pipeline that will catch exceptions, log them, and re-execute the request in an alternate pipeline.
            The request will not be re-executed if the response has already started.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseExceptionHandler">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::AspNetCore::Builder::IApplicationBuilder ^ UseExceptionHandler(Microsoft::AspNetCore::Builder::IApplicationBuilder ^ app, Action&lt;Microsoft::AspNetCore::Builder::IApplicationBuilder ^&gt; ^ configure);" />
      <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, class System.Action`1&lt;class Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; configure) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseExceptionHandler (app As IApplicationBuilder, configure As Action(Of IApplicationBuilder)) As IApplicationBuilder" />
      <MemberSignature Language="F#" Value="static member UseExceptionHandler : Microsoft.AspNetCore.Builder.IApplicationBuilder * Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt; -&gt; Microsoft.AspNetCore.Builder.IApplicationBuilder" Usage="Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler (app, configure)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Diagnostics</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        <Parameter Name="configure" Type="System.Action&lt;Microsoft.AspNetCore.Builder.IApplicationBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="app" />
        <param name="configure" />
        <summary>
            Adds a middleware to the pipeline that will catch exceptions, log them, and re-execute the request in an alternate pipeline.
            The request will not be re-executed if the response has already started.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseExceptionHandler">
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Microsoft::AspNetCore::Builder::IApplicationBuilder ^ UseExceptionHandler(Microsoft::AspNetCore::Builder::IApplicationBuilder ^ app, System::String ^ errorHandlingPath);" />
      <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler (this Microsoft.AspNetCore.Builder.IApplicationBuilder app, string errorHandlingPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseExceptionHandler(class Microsoft.AspNetCore.Builder.IApplicationBuilder app, string errorHandlingPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler(Microsoft.AspNetCore.Builder.IApplicationBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseExceptionHandler (app As IApplicationBuilder, errorHandlingPath As String) As IApplicationBuilder" />
      <MemberSignature Language="F#" Value="static member UseExceptionHandler : Microsoft.AspNetCore.Builder.IApplicationBuilder * string -&gt; Microsoft.AspNetCore.Builder.IApplicationBuilder" Usage="Microsoft.AspNetCore.Builder.ExceptionHandlerExtensions.UseExceptionHandler (app, errorHandlingPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Diagnostics</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="app" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        <Parameter Name="errorHandlingPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="app" />
        <param name="errorHandlingPath" />
        <summary>
            Adds a middleware to the pipeline that will catch exceptions, log them, reset the request path, and re-execute the request.
            The request will not be re-executed if the response has already started.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
