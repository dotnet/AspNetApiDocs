<Type Name="RequestHeadersTransformExtensions" FullName="Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions">
  <TypeSignature Language="C#" Value="public static class RequestHeadersTransformExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RequestHeadersTransformExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module RequestHeadersTransformExtensions" />
  <TypeSignature Language="F#" Value="type RequestHeadersTransformExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Yarp.ReverseProxy</AssemblyName>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.2.0</AssemblyVersion>
    <AssemblyVersion>2.0.1.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="yarp-2.1;yarp-2.2">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Extensions for adding request header transforms.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddOriginalHost">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddOriginalHost (this Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, bool useOriginal = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddOriginalHost(class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, bool useOriginal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddOriginalHost(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddOriginalHost (context As TransformBuilderContext, Optional useOriginal As Boolean = true) As TransformBuilderContext" />
      <MemberSignature Language="F#" Value="static member AddOriginalHost : Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext * bool -&gt; Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" Usage="Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddOriginalHost (context, useOriginal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" RefType="this" />
        <Parameter Name="useOriginal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="useOriginal">To be added.</param>
        <summary>
            Adds the transform which will copy or remove the original host header.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRequestHeader">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddRequestHeader (this Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName, string value, bool append = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddRequestHeader(class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName, string value, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeader(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddRequestHeader (context As TransformBuilderContext, headerName As String, value As String, Optional append As Boolean = true) As TransformBuilderContext" />
      <MemberSignature Language="F#" Value="static member AddRequestHeader : Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext * string * string * bool -&gt; Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" Usage="Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeader (context, headerName, value, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" RefType="this" />
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="headerName">To be added.</param>
        <param name="value">To be added.</param>
        <param name="append">To be added.</param>
        <summary>
            Adds the transform which will append or set the request header.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRequestHeaderRemove">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddRequestHeaderRemove (this Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddRequestHeaderRemove(class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeaderRemove(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddRequestHeaderRemove (context As TransformBuilderContext, headerName As String) As TransformBuilderContext" />
      <MemberSignature Language="F#" Value="static member AddRequestHeaderRemove : Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext * string -&gt; Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" Usage="Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeaderRemove (context, headerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" RefType="this" />
        <Parameter Name="headerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="headerName">To be added.</param>
        <summary>
            Adds the transform which will remove the request header.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRequestHeaderRouteValue">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddRequestHeaderRouteValue (this Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName, string routeValueKey, bool append = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddRequestHeaderRouteValue(class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName, string routeValueKey, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeaderRouteValue(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddRequestHeaderRouteValue (context As TransformBuilderContext, headerName As String, routeValueKey As String, Optional append As Boolean = true) As TransformBuilderContext" />
      <MemberSignature Language="F#" Value="static member AddRequestHeaderRouteValue : Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext * string * string * bool -&gt; Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" Usage="Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeaderRouteValue (context, headerName, routeValueKey, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" RefType="this" Index="0" FrameworkAlternate="yarp-2.1;yarp-2.2" />
        <Parameter Name="headerName" Type="System.String" Index="1" FrameworkAlternate="yarp-2.1;yarp-2.2" />
        <Parameter Name="routeValueKey" Type="System.String" Index="2" FrameworkAlternate="yarp-2.1;yarp-2.2" />
        <Parameter Name="append" Type="System.Boolean" Index="3" FrameworkAlternate="yarp-2.1;yarp-2.2" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="headerName">To be added.</param>
        <param name="routeValueKey">To be added.</param>
        <param name="append">To be added.</param>
        <summary>
            Adds the transform which will append or set the request header from a route value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRequestHeadersAllowed">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddRequestHeadersAllowed (this Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, params string[] allowedHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddRequestHeadersAllowed(class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string[] allowedHeaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeadersAllowed(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddRequestHeadersAllowed (context As TransformBuilderContext, ParamArray allowedHeaders As String()) As TransformBuilderContext" />
      <MemberSignature Language="F#" Value="static member AddRequestHeadersAllowed : Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext * string[] -&gt; Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" Usage="Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.AddRequestHeadersAllowed (context, allowedHeaders)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" RefType="this" />
        <Parameter Name="allowedHeaders" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="allowedHeaders">To be added.</param>
        <summary>
            Adds the transform which will only copy the allowed request headers. Other transforms
            that modify or append to existing headers may be affected if not included in the allow list.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTransformCopyRequestHeaders">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Configuration.RouteConfig WithTransformCopyRequestHeaders (this Yarp.ReverseProxy.Configuration.RouteConfig route, bool copy = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Configuration.RouteConfig WithTransformCopyRequestHeaders(class Yarp.ReverseProxy.Configuration.RouteConfig route, bool copy) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformCopyRequestHeaders(Yarp.ReverseProxy.Configuration.RouteConfig,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithTransformCopyRequestHeaders (route As RouteConfig, Optional copy As Boolean = true) As RouteConfig" />
      <MemberSignature Language="F#" Value="static member WithTransformCopyRequestHeaders : Yarp.ReverseProxy.Configuration.RouteConfig * bool -&gt; Yarp.ReverseProxy.Configuration.RouteConfig" Usage="Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformCopyRequestHeaders (route, copy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Configuration.RouteConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="Yarp.ReverseProxy.Configuration.RouteConfig" RefType="this" />
        <Parameter Name="copy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="route">To be added.</param>
        <param name="copy">To be added.</param>
        <summary>
            Clones the route and adds the transform which will enable or suppress copying request headers to the proxy request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTransformRequestHeader">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Configuration.RouteConfig WithTransformRequestHeader (this Yarp.ReverseProxy.Configuration.RouteConfig route, string headerName, string value, bool append = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Configuration.RouteConfig WithTransformRequestHeader(class Yarp.ReverseProxy.Configuration.RouteConfig route, string headerName, string value, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeader(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithTransformRequestHeader (route As RouteConfig, headerName As String, value As String, Optional append As Boolean = true) As RouteConfig" />
      <MemberSignature Language="F#" Value="static member WithTransformRequestHeader : Yarp.ReverseProxy.Configuration.RouteConfig * string * string * bool -&gt; Yarp.ReverseProxy.Configuration.RouteConfig" Usage="Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeader (route, headerName, value, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Configuration.RouteConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="Yarp.ReverseProxy.Configuration.RouteConfig" RefType="this" />
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="append" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="route">To be added.</param>
        <param name="headerName">To be added.</param>
        <param name="value">To be added.</param>
        <param name="append">To be added.</param>
        <summary>
            Clones the route and adds the transform which will append or set the request header.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTransformRequestHeaderRemove">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Configuration.RouteConfig WithTransformRequestHeaderRemove (this Yarp.ReverseProxy.Configuration.RouteConfig route, string headerName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Configuration.RouteConfig WithTransformRequestHeaderRemove(class Yarp.ReverseProxy.Configuration.RouteConfig route, string headerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeaderRemove(Yarp.ReverseProxy.Configuration.RouteConfig,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithTransformRequestHeaderRemove (route As RouteConfig, headerName As String) As RouteConfig" />
      <MemberSignature Language="F#" Value="static member WithTransformRequestHeaderRemove : Yarp.ReverseProxy.Configuration.RouteConfig * string -&gt; Yarp.ReverseProxy.Configuration.RouteConfig" Usage="Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeaderRemove (route, headerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Configuration.RouteConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="Yarp.ReverseProxy.Configuration.RouteConfig" RefType="this" />
        <Parameter Name="headerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="route">To be added.</param>
        <param name="headerName">To be added.</param>
        <summary>
            Clones the route and adds the transform which will remove the request header.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTransformRequestHeaderRouteValue">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Configuration.RouteConfig WithTransformRequestHeaderRouteValue (this Yarp.ReverseProxy.Configuration.RouteConfig route, string headerName, string routeValueKey, bool append = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Configuration.RouteConfig WithTransformRequestHeaderRouteValue(class Yarp.ReverseProxy.Configuration.RouteConfig route, string headerName, string routeValueKey, bool append) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeaderRouteValue(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithTransformRequestHeaderRouteValue (route As RouteConfig, headerName As String, routeValueKey As String, Optional append As Boolean = true) As RouteConfig" />
      <MemberSignature Language="F#" Value="static member WithTransformRequestHeaderRouteValue : Yarp.ReverseProxy.Configuration.RouteConfig * string * string * bool -&gt; Yarp.ReverseProxy.Configuration.RouteConfig" Usage="Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeaderRouteValue (route, headerName, routeValueKey, append)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Configuration.RouteConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="Yarp.ReverseProxy.Configuration.RouteConfig" RefType="this" Index="0" FrameworkAlternate="yarp-2.1;yarp-2.2" />
        <Parameter Name="headerName" Type="System.String" Index="1" FrameworkAlternate="yarp-2.1;yarp-2.2" />
        <Parameter Name="routeValueKey" Type="System.String" Index="2" FrameworkAlternate="yarp-2.1;yarp-2.2" />
        <Parameter Name="append" Type="System.Boolean" Index="3" FrameworkAlternate="yarp-2.1;yarp-2.2" />
      </Parameters>
      <Docs>
        <param name="route">To be added.</param>
        <param name="headerName">To be added.</param>
        <param name="routeValueKey">To be added.</param>
        <param name="append">To be added.</param>
        <summary>
            Clones the route and adds the transform which will append or set the request header from a route value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTransformRequestHeadersAllowed">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Configuration.RouteConfig WithTransformRequestHeadersAllowed (this Yarp.ReverseProxy.Configuration.RouteConfig route, params string[] allowedHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Configuration.RouteConfig WithTransformRequestHeadersAllowed(class Yarp.ReverseProxy.Configuration.RouteConfig route, string[] allowedHeaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeadersAllowed(Yarp.ReverseProxy.Configuration.RouteConfig,System.String[])" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithTransformRequestHeadersAllowed (route As RouteConfig, ParamArray allowedHeaders As String()) As RouteConfig" />
      <MemberSignature Language="F#" Value="static member WithTransformRequestHeadersAllowed : Yarp.ReverseProxy.Configuration.RouteConfig * string[] -&gt; Yarp.ReverseProxy.Configuration.RouteConfig" Usage="Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformRequestHeadersAllowed (route, allowedHeaders)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Configuration.RouteConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="Yarp.ReverseProxy.Configuration.RouteConfig" RefType="this" />
        <Parameter Name="allowedHeaders" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="route">To be added.</param>
        <param name="allowedHeaders">To be added.</param>
        <summary>
            Clones the route and adds the transform which will only copy the allowed request headers. Other transforms
            that modify or append to existing headers may be affected if not included in the allow list.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTransformUseOriginalHostHeader">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Configuration.RouteConfig WithTransformUseOriginalHostHeader (this Yarp.ReverseProxy.Configuration.RouteConfig route, bool useOriginal = true);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Configuration.RouteConfig WithTransformUseOriginalHostHeader(class Yarp.ReverseProxy.Configuration.RouteConfig route, bool useOriginal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformUseOriginalHostHeader(Yarp.ReverseProxy.Configuration.RouteConfig,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithTransformUseOriginalHostHeader (route As RouteConfig, Optional useOriginal As Boolean = true) As RouteConfig" />
      <MemberSignature Language="F#" Value="static member WithTransformUseOriginalHostHeader : Yarp.ReverseProxy.Configuration.RouteConfig * bool -&gt; Yarp.ReverseProxy.Configuration.RouteConfig" Usage="Yarp.ReverseProxy.Transforms.RequestHeadersTransformExtensions.WithTransformUseOriginalHostHeader (route, useOriginal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Configuration.RouteConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="Yarp.ReverseProxy.Configuration.RouteConfig" RefType="this" />
        <Parameter Name="useOriginal" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="route">To be added.</param>
        <param name="useOriginal">To be added.</param>
        <summary>
            Clones the route and adds the transform which will copy the incoming request Host header to the proxy request.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
