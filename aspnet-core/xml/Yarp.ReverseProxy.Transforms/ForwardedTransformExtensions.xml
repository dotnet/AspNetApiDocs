<Type Name="ForwardedTransformExtensions" FullName="Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions">
  <TypeSignature Language="C#" Value="public static class ForwardedTransformExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ForwardedTransformExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ForwardedTransformExtensions" />
  <TypeSignature Language="F#" Value="type ForwardedTransformExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Yarp.ReverseProxy</AssemblyName>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.2.0</AssemblyVersion>
    <AssemblyVersion>2.0.1.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="yarp-2.1;yarp-2.2">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Extensions for adding forwarded header transforms.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AddClientCertHeader">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddClientCertHeader (this Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddClientCertHeader(class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddClientCertHeader(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddClientCertHeader (context As TransformBuilderContext, headerName As String) As TransformBuilderContext" />
      <MemberSignature Language="F#" Value="static member AddClientCertHeader : Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext * string -&gt; Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" Usage="Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddClientCertHeader (context, headerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" RefType="this" />
        <Parameter Name="headerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="headerName">To be added.</param>
        <summary>
            Adds the transform which will set the given header with the Base64 encoded client certificate.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddForwarded">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddForwarded (this Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, bool useHost = true, bool useProto = true, Yarp.ReverseProxy.Transforms.NodeFormat forFormat = Yarp.ReverseProxy.Transforms.NodeFormat.Random, Yarp.ReverseProxy.Transforms.NodeFormat byFormat = Yarp.ReverseProxy.Transforms.NodeFormat.Random, Yarp.ReverseProxy.Transforms.ForwardedTransformActions action = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddForwarded(class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, bool useHost, bool useProto, valuetype Yarp.ReverseProxy.Transforms.NodeFormat forFormat, valuetype Yarp.ReverseProxy.Transforms.NodeFormat byFormat, valuetype Yarp.ReverseProxy.Transforms.ForwardedTransformActions action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddForwarded(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Boolean,System.Boolean,Yarp.ReverseProxy.Transforms.NodeFormat,Yarp.ReverseProxy.Transforms.NodeFormat,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddForwarded (context As TransformBuilderContext, Optional useHost As Boolean = true, Optional useProto As Boolean = true, Optional forFormat As NodeFormat = Yarp.ReverseProxy.Transforms.NodeFormat.Random, Optional byFormat As NodeFormat = Yarp.ReverseProxy.Transforms.NodeFormat.Random, Optional action As ForwardedTransformActions = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set) As TransformBuilderContext" />
      <MemberSignature Language="F#" Value="static member AddForwarded : Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext * bool * bool * Yarp.ReverseProxy.Transforms.NodeFormat * Yarp.ReverseProxy.Transforms.NodeFormat * Yarp.ReverseProxy.Transforms.ForwardedTransformActions -&gt; Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" Usage="Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddForwarded (context, useHost, useProto, forFormat, byFormat, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" RefType="this" />
        <Parameter Name="useHost" Type="System.Boolean" />
        <Parameter Name="useProto" Type="System.Boolean" />
        <Parameter Name="forFormat" Type="Yarp.ReverseProxy.Transforms.NodeFormat" />
        <Parameter Name="byFormat" Type="Yarp.ReverseProxy.Transforms.NodeFormat" />
        <Parameter Name="action" Type="Yarp.ReverseProxy.Transforms.ForwardedTransformActions" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="useHost">To be added.</param>
        <param name="useProto">To be added.</param>
        <param name="forFormat">To be added.</param>
        <param name="byFormat">To be added.</param>
        <param name="action">To be added.</param>
        <summary>
            Adds the transform which will add the Forwarded header as defined by [RFC 7239](https://tools.ietf.org/html/rfc7239).
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Also removes the <c>X-Forwarded</c> headers when enabled.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddXForwarded">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddXForwarded (this Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, Yarp.ReverseProxy.Transforms.ForwardedTransformActions action = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddXForwarded(class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, valuetype Yarp.ReverseProxy.Transforms.ForwardedTransformActions action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwarded(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddXForwarded (context As TransformBuilderContext, Optional action As ForwardedTransformActions = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set) As TransformBuilderContext" />
      <MemberSignature Language="F#" Value="static member AddXForwarded : Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext * Yarp.ReverseProxy.Transforms.ForwardedTransformActions -&gt; Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" Usage="Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwarded (context, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" RefType="this" />
        <Parameter Name="action" Type="Yarp.ReverseProxy.Transforms.ForwardedTransformActions" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="action">To be added.</param>
        <summary>
            Adds the transform which will add X-Forwarded-* request headers.
            </summary>
        <returns>To be added.</returns>
        <remarks>
            Also removes the <c>Forwarded</c> header when enabled.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddXForwardedFor">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddXForwardedFor (this Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName = &quot;X-Forwarded-For&quot;, Yarp.ReverseProxy.Transforms.ForwardedTransformActions action = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddXForwardedFor(class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName, valuetype Yarp.ReverseProxy.Transforms.ForwardedTransformActions action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedFor(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddXForwardedFor (context As TransformBuilderContext, Optional headerName As String = &quot;X-Forwarded-For&quot;, Optional action As ForwardedTransformActions = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set) As TransformBuilderContext" />
      <MemberSignature Language="F#" Value="static member AddXForwardedFor : Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext * string * Yarp.ReverseProxy.Transforms.ForwardedTransformActions -&gt; Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" Usage="Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedFor (context, headerName, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" RefType="this" />
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="action" Type="Yarp.ReverseProxy.Transforms.ForwardedTransformActions" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="headerName">To be added.</param>
        <param name="action">To be added.</param>
        <summary>
            Adds the transform which will add X-Forwarded-For request header.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddXForwardedHost">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddXForwardedHost (this Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName = &quot;X-Forwarded-Host&quot;, Yarp.ReverseProxy.Transforms.ForwardedTransformActions action = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddXForwardedHost(class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName, valuetype Yarp.ReverseProxy.Transforms.ForwardedTransformActions action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedHost(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddXForwardedHost (context As TransformBuilderContext, Optional headerName As String = &quot;X-Forwarded-Host&quot;, Optional action As ForwardedTransformActions = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set) As TransformBuilderContext" />
      <MemberSignature Language="F#" Value="static member AddXForwardedHost : Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext * string * Yarp.ReverseProxy.Transforms.ForwardedTransformActions -&gt; Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" Usage="Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedHost (context, headerName, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" RefType="this" />
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="action" Type="Yarp.ReverseProxy.Transforms.ForwardedTransformActions" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="headerName">To be added.</param>
        <param name="action">To be added.</param>
        <summary>
            Adds the transform which will add X-Forwarded-Host request header.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddXForwardedPrefix">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddXForwardedPrefix (this Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName = &quot;X-Forwarded-Prefix&quot;, Yarp.ReverseProxy.Transforms.ForwardedTransformActions action = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddXForwardedPrefix(class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName, valuetype Yarp.ReverseProxy.Transforms.ForwardedTransformActions action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedPrefix(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddXForwardedPrefix (context As TransformBuilderContext, Optional headerName As String = &quot;X-Forwarded-Prefix&quot;, Optional action As ForwardedTransformActions = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set) As TransformBuilderContext" />
      <MemberSignature Language="F#" Value="static member AddXForwardedPrefix : Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext * string * Yarp.ReverseProxy.Transforms.ForwardedTransformActions -&gt; Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" Usage="Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedPrefix (context, headerName, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" RefType="this" />
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="action" Type="Yarp.ReverseProxy.Transforms.ForwardedTransformActions" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="headerName">To be added.</param>
        <param name="action">To be added.</param>
        <summary>
            Adds the transform which will add X-Forwarded-Prefix request header.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddXForwardedProto">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddXForwardedProto (this Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName = &quot;X-Forwarded-Proto&quot;, Yarp.ReverseProxy.Transforms.ForwardedTransformActions action = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext AddXForwardedProto(class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, string headerName, valuetype Yarp.ReverseProxy.Transforms.ForwardedTransformActions action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedProto(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddXForwardedProto (context As TransformBuilderContext, Optional headerName As String = &quot;X-Forwarded-Proto&quot;, Optional action As ForwardedTransformActions = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set) As TransformBuilderContext" />
      <MemberSignature Language="F#" Value="static member AddXForwardedProto : Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext * string * Yarp.ReverseProxy.Transforms.ForwardedTransformActions -&gt; Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" Usage="Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.AddXForwardedProto (context, headerName, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" RefType="this" />
        <Parameter Name="headerName" Type="System.String" />
        <Parameter Name="action" Type="Yarp.ReverseProxy.Transforms.ForwardedTransformActions" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="headerName">To be added.</param>
        <param name="action">To be added.</param>
        <summary>
            Adds the transform which will add X-Forwarded-Proto request header.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTransformClientCertHeader">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Configuration.RouteConfig WithTransformClientCertHeader (this Yarp.ReverseProxy.Configuration.RouteConfig route, string headerName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Configuration.RouteConfig WithTransformClientCertHeader(class Yarp.ReverseProxy.Configuration.RouteConfig route, string headerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.WithTransformClientCertHeader(Yarp.ReverseProxy.Configuration.RouteConfig,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithTransformClientCertHeader (route As RouteConfig, headerName As String) As RouteConfig" />
      <MemberSignature Language="F#" Value="static member WithTransformClientCertHeader : Yarp.ReverseProxy.Configuration.RouteConfig * string -&gt; Yarp.ReverseProxy.Configuration.RouteConfig" Usage="Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.WithTransformClientCertHeader (route, headerName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Configuration.RouteConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="Yarp.ReverseProxy.Configuration.RouteConfig" RefType="this" />
        <Parameter Name="headerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="route">To be added.</param>
        <param name="headerName">To be added.</param>
        <summary>
            Clones the route and adds the transform which will set the given header with the Base64 encoded client certificate.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTransformForwarded">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Configuration.RouteConfig WithTransformForwarded (this Yarp.ReverseProxy.Configuration.RouteConfig route, bool useHost = true, bool useProto = true, Yarp.ReverseProxy.Transforms.NodeFormat forFormat = Yarp.ReverseProxy.Transforms.NodeFormat.Random, Yarp.ReverseProxy.Transforms.NodeFormat byFormat = Yarp.ReverseProxy.Transforms.NodeFormat.Random, Yarp.ReverseProxy.Transforms.ForwardedTransformActions action = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Configuration.RouteConfig WithTransformForwarded(class Yarp.ReverseProxy.Configuration.RouteConfig route, bool useHost, bool useProto, valuetype Yarp.ReverseProxy.Transforms.NodeFormat forFormat, valuetype Yarp.ReverseProxy.Transforms.NodeFormat byFormat, valuetype Yarp.ReverseProxy.Transforms.ForwardedTransformActions action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.WithTransformForwarded(Yarp.ReverseProxy.Configuration.RouteConfig,System.Boolean,System.Boolean,Yarp.ReverseProxy.Transforms.NodeFormat,Yarp.ReverseProxy.Transforms.NodeFormat,Yarp.ReverseProxy.Transforms.ForwardedTransformActions)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithTransformForwarded (route As RouteConfig, Optional useHost As Boolean = true, Optional useProto As Boolean = true, Optional forFormat As NodeFormat = Yarp.ReverseProxy.Transforms.NodeFormat.Random, Optional byFormat As NodeFormat = Yarp.ReverseProxy.Transforms.NodeFormat.Random, Optional action As ForwardedTransformActions = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set) As RouteConfig" />
      <MemberSignature Language="F#" Value="static member WithTransformForwarded : Yarp.ReverseProxy.Configuration.RouteConfig * bool * bool * Yarp.ReverseProxy.Transforms.NodeFormat * Yarp.ReverseProxy.Transforms.NodeFormat * Yarp.ReverseProxy.Transforms.ForwardedTransformActions -&gt; Yarp.ReverseProxy.Configuration.RouteConfig" Usage="Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.WithTransformForwarded (route, useHost, useProto, forFormat, byFormat, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Configuration.RouteConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="Yarp.ReverseProxy.Configuration.RouteConfig" RefType="this" />
        <Parameter Name="useHost" Type="System.Boolean" />
        <Parameter Name="useProto" Type="System.Boolean" />
        <Parameter Name="forFormat" Type="Yarp.ReverseProxy.Transforms.NodeFormat" />
        <Parameter Name="byFormat" Type="Yarp.ReverseProxy.Transforms.NodeFormat" />
        <Parameter Name="action" Type="Yarp.ReverseProxy.Transforms.ForwardedTransformActions" />
      </Parameters>
      <Docs>
        <param name="route">To be added.</param>
        <param name="useHost">To be added.</param>
        <param name="useProto">To be added.</param>
        <param name="forFormat">To be added.</param>
        <param name="byFormat">To be added.</param>
        <param name="action">To be added.</param>
        <summary>
            Clones the route and adds the transform which will add the Forwarded header as defined by [RFC 7239](https://tools.ietf.org/html/rfc7239).
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WithTransformXForwarded">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Configuration.RouteConfig WithTransformXForwarded (this Yarp.ReverseProxy.Configuration.RouteConfig route, string headerPrefix = &quot;X-Forwarded-&quot;, Yarp.ReverseProxy.Transforms.ForwardedTransformActions xDefault = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set, Yarp.ReverseProxy.Transforms.ForwardedTransformActions? xFor = default, Yarp.ReverseProxy.Transforms.ForwardedTransformActions? xHost = default, Yarp.ReverseProxy.Transforms.ForwardedTransformActions? xProto = default, Yarp.ReverseProxy.Transforms.ForwardedTransformActions? xPrefix = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Configuration.RouteConfig WithTransformXForwarded(class Yarp.ReverseProxy.Configuration.RouteConfig route, string headerPrefix, valuetype Yarp.ReverseProxy.Transforms.ForwardedTransformActions xDefault, valuetype System.Nullable`1&lt;valuetype Yarp.ReverseProxy.Transforms.ForwardedTransformActions&gt; xFor, valuetype System.Nullable`1&lt;valuetype Yarp.ReverseProxy.Transforms.ForwardedTransformActions&gt; xHost, valuetype System.Nullable`1&lt;valuetype Yarp.ReverseProxy.Transforms.ForwardedTransformActions&gt; xProto, valuetype System.Nullable`1&lt;valuetype Yarp.ReverseProxy.Transforms.ForwardedTransformActions&gt; xPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.WithTransformXForwarded(Yarp.ReverseProxy.Configuration.RouteConfig,System.String,Yarp.ReverseProxy.Transforms.ForwardedTransformActions,System.Nullable{Yarp.ReverseProxy.Transforms.ForwardedTransformActions},System.Nullable{Yarp.ReverseProxy.Transforms.ForwardedTransformActions},System.Nullable{Yarp.ReverseProxy.Transforms.ForwardedTransformActions},System.Nullable{Yarp.ReverseProxy.Transforms.ForwardedTransformActions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithTransformXForwarded (route As RouteConfig, Optional headerPrefix As String = &quot;X-Forwarded-&quot;, Optional xDefault As ForwardedTransformActions = Yarp.ReverseProxy.Transforms.ForwardedTransformActions.Set, Optional xFor As Nullable(Of ForwardedTransformActions) = Nothing, Optional xHost As Nullable(Of ForwardedTransformActions) = Nothing, Optional xProto As Nullable(Of ForwardedTransformActions) = Nothing, Optional xPrefix As Nullable(Of ForwardedTransformActions) = Nothing) As RouteConfig" />
      <MemberSignature Language="F#" Value="static member WithTransformXForwarded : Yarp.ReverseProxy.Configuration.RouteConfig * string * Yarp.ReverseProxy.Transforms.ForwardedTransformActions * Nullable&lt;Yarp.ReverseProxy.Transforms.ForwardedTransformActions&gt; * Nullable&lt;Yarp.ReverseProxy.Transforms.ForwardedTransformActions&gt; * Nullable&lt;Yarp.ReverseProxy.Transforms.ForwardedTransformActions&gt; * Nullable&lt;Yarp.ReverseProxy.Transforms.ForwardedTransformActions&gt; -&gt; Yarp.ReverseProxy.Configuration.RouteConfig" Usage="Yarp.ReverseProxy.Transforms.ForwardedTransformExtensions.WithTransformXForwarded (route, headerPrefix, xDefault, xFor, xHost, xProto, xPrefix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Configuration.RouteConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="Yarp.ReverseProxy.Configuration.RouteConfig" RefType="this" />
        <Parameter Name="headerPrefix" Type="System.String" />
        <Parameter Name="xDefault" Type="Yarp.ReverseProxy.Transforms.ForwardedTransformActions" />
        <Parameter Name="xFor" Type="System.Nullable&lt;Yarp.ReverseProxy.Transforms.ForwardedTransformActions&gt;" />
        <Parameter Name="xHost" Type="System.Nullable&lt;Yarp.ReverseProxy.Transforms.ForwardedTransformActions&gt;" />
        <Parameter Name="xProto" Type="System.Nullable&lt;Yarp.ReverseProxy.Transforms.ForwardedTransformActions&gt;" />
        <Parameter Name="xPrefix" Type="System.Nullable&lt;Yarp.ReverseProxy.Transforms.ForwardedTransformActions&gt;" />
      </Parameters>
      <Docs>
        <param name="route">To be added.</param>
        <param name="headerPrefix">To be added.</param>
        <param name="xDefault">To be added.</param>
        <param name="xFor">To be added.</param>
        <param name="xHost">To be added.</param>
        <param name="xProto">To be added.</param>
        <param name="xPrefix">To be added.</param>
        <summary>
            Clones the route and adds the transform which will add X-Forwarded-* headers.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
