<Type Name="RouteConfigTransformExtensions" FullName="Yarp.ReverseProxy.Transforms.RouteConfigTransformExtensions">
  <TypeSignature Language="C#" Value="public static class RouteConfigTransformExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RouteConfigTransformExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Yarp.ReverseProxy.Transforms.RouteConfigTransformExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module RouteConfigTransformExtensions" />
  <TypeSignature Language="F#" Value="type RouteConfigTransformExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Yarp.ReverseProxy</AssemblyName>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.2.0</AssemblyVersion>
    <AssemblyVersion>2.0.1.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extensions for adding transforms to <see cref="T:Yarp.ReverseProxy.Configuration.RouteConfig" />.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="WithTransform">
      <MemberSignature Language="C#" Value="public static Yarp.ReverseProxy.Configuration.RouteConfig WithTransform (this Yarp.ReverseProxy.Configuration.RouteConfig route, Action&lt;System.Collections.Generic.IDictionary&lt;string,string&gt;&gt; createTransform);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Yarp.ReverseProxy.Configuration.RouteConfig WithTransform(class Yarp.ReverseProxy.Configuration.RouteConfig route, class System.Action`1&lt;class System.Collections.Generic.IDictionary`2&lt;string, string&gt;&gt; createTransform) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.RouteConfigTransformExtensions.WithTransform(Yarp.ReverseProxy.Configuration.RouteConfig,System.Action{System.Collections.Generic.IDictionary{System.String,System.String}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithTransform (route As RouteConfig, createTransform As Action(Of IDictionary(Of String, String))) As RouteConfig" />
      <MemberSignature Language="F#" Value="static member WithTransform : Yarp.ReverseProxy.Configuration.RouteConfig * Action&lt;System.Collections.Generic.IDictionary&lt;string, string&gt;&gt; -&gt; Yarp.ReverseProxy.Configuration.RouteConfig" Usage="Yarp.ReverseProxy.Transforms.RouteConfigTransformExtensions.WithTransform (route, createTransform)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.Configuration.RouteConfig</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="route" Type="Yarp.ReverseProxy.Configuration.RouteConfig" RefType="this" />
        <Parameter Name="createTransform" Type="System.Action&lt;System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="route">To be added.</param>
        <param name="createTransform">To be added.</param>
        <summary>
            Clones the <see cref="T:Yarp.ReverseProxy.Configuration.RouteConfig" /> and adds the transform.
            </summary>
        <returns>The cloned route with the new transform.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
