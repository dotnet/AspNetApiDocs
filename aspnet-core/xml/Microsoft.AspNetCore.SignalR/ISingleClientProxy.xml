<Type Name="ISingleClientProxy" FullName="Microsoft.AspNetCore.SignalR.ISingleClientProxy">
  <TypeSignature Language="C#" Value="public interface ISingleClientProxy : Microsoft.AspNetCore.SignalR.IClientProxy" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISingleClientProxy implements class Microsoft.AspNetCore.SignalR.IClientProxy" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.SignalR.ISingleClientProxy" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISingleClientProxy&#xA;Implements IClientProxy" />
  <TypeSignature Language="F#" Value="type ISingleClientProxy = interface&#xA;    interface IClientProxy" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.SignalR.Core</AssemblyName>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.AspNetCore.SignalR.IClientProxy</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            A proxy abstraction for invoking hub methods on the client and getting a result.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="InvokeCoreAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;T&gt; InvokeCoreAsync&lt;T&gt; (string method, object?[] args, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;!!T&gt; InvokeCoreAsync&lt;T&gt;(string method, object[] args, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.SignalR.ISingleClientProxy.InvokeCoreAsync``1(System.String,System.Object[],System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeCoreAsync(Of T) (method As String, args As Object(), cancellationToken As CancellationToken) As Task(Of T)" />
      <MemberSignature Language="F#" Value="abstract member InvokeCoreAsync : string * obj[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="iSingleClientProxy.InvokeCoreAsync (method, args, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.SignalR.Core</AssemblyName>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T" />
        <param name="method">Name of the method to invoke.</param>
        <param name="args">A collection of arguments to pass to the client.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests. It is recommended to set a max wait for expecting a result.</param>
        <summary>
            Invokes a method on the connection represented by the <see cref="T:Microsoft.AspNetCore.SignalR.ISingleClientProxy" /> instance and waits for a result.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous invoke and wait for a client result.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
