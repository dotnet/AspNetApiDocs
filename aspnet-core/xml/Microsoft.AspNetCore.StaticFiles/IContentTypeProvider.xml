<Type Name="IContentTypeProvider" FullName="Microsoft.AspNetCore.StaticFiles.IContentTypeProvider">
  <TypeSignature Language="C++ CLI" Value="public interface class IContentTypeProvider" />
  <TypeSignature Language="C#" Value="public interface IContentTypeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContentTypeProvider" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.StaticFiles.IContentTypeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContentTypeProvider" />
  <TypeSignature Language="F#" Value="type IContentTypeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.StaticFiles</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Used to look up MIME types given a file path
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TryGetContentType">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetContentType(System::String ^ subpath, [Runtime::InteropServices::Out] System::String ^ % contentType);" />
      <MemberSignature Language="C#" Value="public bool TryGetContentType (string subpath, out string contentType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetContentType(string subpath, [out] string&amp; contentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.StaticFiles.IContentTypeProvider.TryGetContentType(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetContentType (subpath As String, ByRef contentType As String) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member TryGetContentType : string * string -&gt; bool" Usage="iContentTypeProvider.TryGetContentType (subpath, contentType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.StaticFiles</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subpath" Type="System.String" />
        <Parameter Name="contentType" Type="System.String" RefType="out">
          <Attributes>
            <Attribute FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.MaybeNullWhen(false)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="subpath">A file path</param>
        <param name="contentType">The resulting MIME type</param>
        <summary>
            Given a file path, determine the MIME type
            </summary>
        <returns>True if MIME type could be determined</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
