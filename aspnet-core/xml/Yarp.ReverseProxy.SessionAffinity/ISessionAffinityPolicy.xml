<Type Name="ISessionAffinityPolicy" FullName="Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy">
  <TypeSignature Language="C#" Value="public interface ISessionAffinityPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISessionAffinityPolicy" FrameworkAlternate="yarp-1.0;yarp-1.1;yarp-2.0" />
  <TypeSignature Language="DocId" Value="T:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISessionAffinityPolicy" />
  <TypeSignature Language="F#" Value="type ISessionAffinityPolicy = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ISessionAffinityPolicy" FrameworkAlternate="yarp-2.1;yarp-2.2" />
  <AssemblyInfo>
    <AssemblyName>Yarp.ReverseProxy</AssemblyName>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.2.0</AssemblyVersion>
    <AssemblyVersion>2.0.1.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Provides session affinity for load-balanced clusters.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AffinitizeResponse">
      <MemberSignature Language="C#" Value="public void AffinitizeResponse (Microsoft.AspNetCore.Http.HttpContext context, Yarp.ReverseProxy.Model.ClusterState cluster, Yarp.ReverseProxy.Configuration.SessionAffinityConfig config, Yarp.ReverseProxy.Model.DestinationState destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AffinitizeResponse(class Microsoft.AspNetCore.Http.HttpContext context, class Yarp.ReverseProxy.Model.ClusterState cluster, class Yarp.ReverseProxy.Configuration.SessionAffinityConfig config, class Yarp.ReverseProxy.Model.DestinationState destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.AffinitizeResponse(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Configuration.SessionAffinityConfig,Yarp.ReverseProxy.Model.DestinationState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AffinitizeResponse (context As HttpContext, cluster As ClusterState, config As SessionAffinityConfig, destination As DestinationState)" />
      <MemberSignature Language="F#" Value="abstract member AffinitizeResponse : Microsoft.AspNetCore.Http.HttpContext * Yarp.ReverseProxy.Model.ClusterState * Yarp.ReverseProxy.Configuration.SessionAffinityConfig * Yarp.ReverseProxy.Model.DestinationState -&gt; unit" Usage="iSessionAffinityPolicy.AffinitizeResponse (context, cluster, config, destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" />
        <Parameter Name="cluster" Type="Yarp.ReverseProxy.Model.ClusterState" />
        <Parameter Name="config" Type="Yarp.ReverseProxy.Configuration.SessionAffinityConfig" />
        <Parameter Name="destination" Type="Yarp.ReverseProxy.Model.DestinationState" />
      </Parameters>
      <Docs>
        <param name="context">Current request's context.</param>
        <param name="cluster">Current request's cluster.</param>
        <param name="config">Affinity config.</param>
        <param name="destination">
          <see cref="T:Yarp.ReverseProxy.Model.DestinationState" /> to which request is to be affinitized.</param>
        <summary>
            Affinitize the current response to the given <see cref="T:Yarp.ReverseProxy.Model.DestinationState" /> by setting the affinity key extracted from <see cref="T:Yarp.ReverseProxy.Model.DestinationState" />.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AffinitizeResponseAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask AffinitizeResponseAsync (Microsoft.AspNetCore.Http.HttpContext context, Yarp.ReverseProxy.Model.ClusterState cluster, Yarp.ReverseProxy.Configuration.SessionAffinityConfig config, Yarp.ReverseProxy.Model.DestinationState destination, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask AffinitizeResponseAsync(class Microsoft.AspNetCore.Http.HttpContext context, class Yarp.ReverseProxy.Model.ClusterState cluster, class Yarp.ReverseProxy.Configuration.SessionAffinityConfig config, class Yarp.ReverseProxy.Model.DestinationState destination, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.AffinitizeResponseAsync(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Configuration.SessionAffinityConfig,Yarp.ReverseProxy.Model.DestinationState,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AffinitizeResponseAsync (context As HttpContext, cluster As ClusterState, config As SessionAffinityConfig, destination As DestinationState, cancellationToken As CancellationToken) As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member AffinitizeResponseAsync : Microsoft.AspNetCore.Http.HttpContext * Yarp.ReverseProxy.Model.ClusterState * Yarp.ReverseProxy.Configuration.SessionAffinityConfig * Yarp.ReverseProxy.Model.DestinationState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&#xA;override this.AffinitizeResponseAsync : Microsoft.AspNetCore.Http.HttpContext * Yarp.ReverseProxy.Model.ClusterState * Yarp.ReverseProxy.Configuration.SessionAffinityConfig * Yarp.ReverseProxy.Model.DestinationState * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask" Usage="iSessionAffinityPolicy.AffinitizeResponseAsync (context, cluster, config, destination, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" Index="0" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
        <Parameter Name="cluster" Type="Yarp.ReverseProxy.Model.ClusterState" Index="1" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
        <Parameter Name="config" Type="Yarp.ReverseProxy.Configuration.SessionAffinityConfig" Index="2" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
        <Parameter Name="destination" Type="Yarp.ReverseProxy.Model.DestinationState" Index="3" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
      </Parameters>
      <Docs>
        <param name="context">Current request's context.</param>
        <param name="cluster">Current request's cluster.</param>
        <param name="config">Affinity config.</param>
        <param name="destination">
          <see cref="T:Yarp.ReverseProxy.Model.DestinationState" /> to which request is to be affinitized.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        <summary>
            Affinitize the current response to the given <see cref="T:Yarp.ReverseProxy.Model.DestinationState" /> by setting the affinity key extracted from <see cref="T:Yarp.ReverseProxy.Model.DestinationState" />.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAffinitizedDestinations">
      <MemberSignature Language="C#" Value="public Yarp.ReverseProxy.SessionAffinity.AffinityResult FindAffinitizedDestinations (Microsoft.AspNetCore.Http.HttpContext context, Yarp.ReverseProxy.Model.ClusterState cluster, Yarp.ReverseProxy.Configuration.SessionAffinityConfig config, System.Collections.Generic.IReadOnlyList&lt;Yarp.ReverseProxy.Model.DestinationState&gt; destinations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Yarp.ReverseProxy.SessionAffinity.AffinityResult FindAffinitizedDestinations(class Microsoft.AspNetCore.Http.HttpContext context, class Yarp.ReverseProxy.Model.ClusterState cluster, class Yarp.ReverseProxy.Configuration.SessionAffinityConfig config, class System.Collections.Generic.IReadOnlyList`1&lt;class Yarp.ReverseProxy.Model.DestinationState&gt; destinations) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.FindAffinitizedDestinations(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Configuration.SessionAffinityConfig,System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Model.DestinationState})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAffinitizedDestinations (context As HttpContext, cluster As ClusterState, config As SessionAffinityConfig, destinations As IReadOnlyList(Of DestinationState)) As AffinityResult" />
      <MemberSignature Language="F#" Value="abstract member FindAffinitizedDestinations : Microsoft.AspNetCore.Http.HttpContext * Yarp.ReverseProxy.Model.ClusterState * Yarp.ReverseProxy.Configuration.SessionAffinityConfig * System.Collections.Generic.IReadOnlyList&lt;Yarp.ReverseProxy.Model.DestinationState&gt; -&gt; Yarp.ReverseProxy.SessionAffinity.AffinityResult" Usage="iSessionAffinityPolicy.FindAffinitizedDestinations (context, cluster, config, destinations)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Yarp.ReverseProxy.SessionAffinity.AffinityResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" />
        <Parameter Name="cluster" Type="Yarp.ReverseProxy.Model.ClusterState" />
        <Parameter Name="config" Type="Yarp.ReverseProxy.Configuration.SessionAffinityConfig" />
        <Parameter Name="destinations" Type="System.Collections.Generic.IReadOnlyList&lt;Yarp.ReverseProxy.Model.DestinationState&gt;" />
      </Parameters>
      <Docs>
        <param name="context">Current request's context.</param>
        <param name="cluster">Current request's cluster.</param>
        <param name="config">Affinity config.</param>
        <param name="destinations">
          <see cref="T:Yarp.ReverseProxy.Model.DestinationState" />s available for the request.</param>
        <summary>
            Finds <see cref="T:Yarp.ReverseProxy.Model.DestinationState" /> to which the current request is affinitized by the affinity key.
            </summary>
        <returns>
          <see cref="T:Yarp.ReverseProxy.SessionAffinity.AffinityResult" /> carrying the found affinitized destinations if any and the <see cref="T:Yarp.ReverseProxy.SessionAffinity.AffinityStatus" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindAffinitizedDestinationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.ValueTask&lt;Yarp.ReverseProxy.SessionAffinity.AffinityResult&gt; FindAffinitizedDestinationsAsync (Microsoft.AspNetCore.Http.HttpContext context, Yarp.ReverseProxy.Model.ClusterState cluster, Yarp.ReverseProxy.Configuration.SessionAffinityConfig config, System.Collections.Generic.IReadOnlyList&lt;Yarp.ReverseProxy.Model.DestinationState&gt; destinations, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype Yarp.ReverseProxy.SessionAffinity.AffinityResult&gt; FindAffinitizedDestinationsAsync(class Microsoft.AspNetCore.Http.HttpContext context, class Yarp.ReverseProxy.Model.ClusterState cluster, class Yarp.ReverseProxy.Configuration.SessionAffinityConfig config, class System.Collections.Generic.IReadOnlyList`1&lt;class Yarp.ReverseProxy.Model.DestinationState&gt; destinations, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.FindAffinitizedDestinationsAsync(Microsoft.AspNetCore.Http.HttpContext,Yarp.ReverseProxy.Model.ClusterState,Yarp.ReverseProxy.Configuration.SessionAffinityConfig,System.Collections.Generic.IReadOnlyList{Yarp.ReverseProxy.Model.DestinationState},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindAffinitizedDestinationsAsync (context As HttpContext, cluster As ClusterState, config As SessionAffinityConfig, destinations As IReadOnlyList(Of DestinationState), cancellationToken As CancellationToken) As ValueTask(Of AffinityResult)" />
      <MemberSignature Language="F#" Value="abstract member FindAffinitizedDestinationsAsync : Microsoft.AspNetCore.Http.HttpContext * Yarp.ReverseProxy.Model.ClusterState * Yarp.ReverseProxy.Configuration.SessionAffinityConfig * System.Collections.Generic.IReadOnlyList&lt;Yarp.ReverseProxy.Model.DestinationState&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Yarp.ReverseProxy.SessionAffinity.AffinityResult&gt;&#xA;override this.FindAffinitizedDestinationsAsync : Microsoft.AspNetCore.Http.HttpContext * Yarp.ReverseProxy.Model.ClusterState * Yarp.ReverseProxy.Configuration.SessionAffinityConfig * System.Collections.Generic.IReadOnlyList&lt;Yarp.ReverseProxy.Model.DestinationState&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Yarp.ReverseProxy.SessionAffinity.AffinityResult&gt;" Usage="iSessionAffinityPolicy.FindAffinitizedDestinationsAsync (context, cluster, config, destinations, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Yarp.ReverseProxy.SessionAffinity.AffinityResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.AspNetCore.Http.HttpContext" Index="0" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
        <Parameter Name="cluster" Type="Yarp.ReverseProxy.Model.ClusterState" Index="1" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
        <Parameter Name="config" Type="Yarp.ReverseProxy.Configuration.SessionAffinityConfig" Index="2" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
        <Parameter Name="destinations" Type="System.Collections.Generic.IReadOnlyList&lt;Yarp.ReverseProxy.Model.DestinationState&gt;" Index="3" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="yarp-2.0;yarp-2.1;yarp-2.2" />
      </Parameters>
      <Docs>
        <param name="context">Current request's context.</param>
        <param name="cluster">Current request's cluster.</param>
        <param name="config">Affinity config.</param>
        <param name="destinations">
          <see cref="T:Yarp.ReverseProxy.Model.DestinationState" />s available for the request.</param>
        <param name="cancellationToken">The token to monitor for cancellation requests.</param>
        <summary>
            Finds <see cref="T:Yarp.ReverseProxy.Model.DestinationState" /> to which the current request is affinitized by the affinity key.
            </summary>
        <returns>
          <see cref="T:Yarp.ReverseProxy.SessionAffinity.AffinityResult" /> carrying the found affinitized destinations if any and the <see cref="T:Yarp.ReverseProxy.SessionAffinity.AffinityStatus" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="Yarp.ReverseProxy.SessionAffinity.ISessionAffinityPolicy.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
             A unique identifier for this session affinity implementation. This will be referenced from config.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
