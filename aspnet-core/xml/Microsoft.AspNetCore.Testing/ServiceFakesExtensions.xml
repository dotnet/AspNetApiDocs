<Type Name="ServiceFakesExtensions" FullName="Microsoft.AspNetCore.Testing.ServiceFakesExtensions">
  <TypeSignature Language="C#" Value="public static class ServiceFakesExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ServiceFakesExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.AspNetCore.Testing.ServiceFakesExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ServiceFakesExtensions" />
  <TypeSignature Language="F#" Value="type ServiceFakesExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.AspNetCore.Testing</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Extension methods supporting Kestrel server unit testing scenarios.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateClient">
      <MemberSignature Language="C#" Value="public static System.Net.Http.HttpClient CreateClient (this Microsoft.Extensions.Hosting.IHost host, System.Net.Http.HttpMessageHandler? handler = default, Func&lt;Uri,bool&gt;? addressFilter = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Http.HttpClient CreateClient(class Microsoft.Extensions.Hosting.IHost host, class System.Net.Http.HttpMessageHandler handler, class System.Func`2&lt;class System.Uri, bool&gt; addressFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Testing.ServiceFakesExtensions.CreateClient(Microsoft.Extensions.Hosting.IHost,System.Net.Http.HttpMessageHandler,System.Func{System.Uri,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateClient (host As IHost, Optional handler As HttpMessageHandler = Nothing, Optional addressFilter As Func(Of Uri, Boolean) = Nothing) As HttpClient" />
      <MemberSignature Language="F#" Value="static member CreateClient : Microsoft.Extensions.Hosting.IHost * System.Net.Http.HttpMessageHandler * Func&lt;Uri, bool&gt; -&gt; System.Net.Http.HttpClient" Usage="Microsoft.AspNetCore.Testing.ServiceFakesExtensions.CreateClient (host, handler, addressFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Http.HttpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="Microsoft.Extensions.Hosting.IHost" RefType="this" />
        <Parameter Name="handler" Type="System.Net.Http.HttpMessageHandler" />
        <Parameter Name="addressFilter" Type="System.Func&lt;System.Uri,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="host">An <see cref="T:Microsoft.Extensions.Hosting.IHost" /> instance.</param>
        <param name="handler">The inner <see cref="T:System.Net.Http.HttpClientHandler" />.</param>
        <param name="addressFilter">Selects what address should be used. If null, takes the first available address.</param>
        <summary>
            Creates an <see cref="T:System.Net.Http.HttpClient" /> to call the hosted application.
            </summary>
        <returns>An <see cref="T:System.Net.Http.HttpClient" /> configured to call the hosted application.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetListenUris">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Uri&gt; GetListenUris (this Microsoft.Extensions.Hosting.IHost host);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Uri&gt; GetListenUris(class Microsoft.Extensions.Hosting.IHost host) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Testing.ServiceFakesExtensions.GetListenUris(Microsoft.Extensions.Hosting.IHost)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetListenUris (host As IHost) As IEnumerable(Of Uri)" />
      <MemberSignature Language="F#" Value="static member GetListenUris : Microsoft.Extensions.Hosting.IHost -&gt; seq&lt;Uri&gt;" Usage="Microsoft.AspNetCore.Testing.ServiceFakesExtensions.GetListenUris host" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Uri&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="Microsoft.Extensions.Hosting.IHost" RefType="this" />
      </Parameters>
      <Docs>
        <param name="host">An <see cref="T:Microsoft.Extensions.Hosting.IHost" /> instance.</param>
        <summary>
            Gets the first available URI the server listens to that passes the filter.
            </summary>
        <returns>A <see cref="T:System.Uri" /> instance.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListenHttpOnAnyPort">
      <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder ListenHttpOnAnyPort (this Microsoft.AspNetCore.Hosting.IWebHostBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder ListenHttpOnAnyPort(class Microsoft.AspNetCore.Hosting.IWebHostBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Testing.ServiceFakesExtensions.ListenHttpOnAnyPort(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListenHttpOnAnyPort (builder As IWebHostBuilder) As IWebHostBuilder" />
      <MemberSignature Language="F#" Value="static member ListenHttpOnAnyPort : Microsoft.AspNetCore.Hosting.IWebHostBuilder -&gt; Microsoft.AspNetCore.Hosting.IWebHostBuilder" Usage="Microsoft.AspNetCore.Testing.ServiceFakesExtensions.ListenHttpOnAnyPort builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">An <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> instance.</param>
        <summary>
            Adds Kestrel server instance listening on the given HTTP port.
            </summary>
        <returns>The same <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> instance to allow method chaining.</returns>
        <remarks>When a concrete port is set by caller, it's not further validated if the port is really free.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListenHttpsOnAnyPort">
      <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder ListenHttpsOnAnyPort (this Microsoft.AspNetCore.Hosting.IWebHostBuilder builder, System.Security.Cryptography.X509Certificates.X509Certificate2? sslCertificate = default);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder ListenHttpsOnAnyPort(class Microsoft.AspNetCore.Hosting.IWebHostBuilder builder, class System.Security.Cryptography.X509Certificates.X509Certificate2 sslCertificate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Testing.ServiceFakesExtensions.ListenHttpsOnAnyPort(Microsoft.AspNetCore.Hosting.IWebHostBuilder,System.Security.Cryptography.X509Certificates.X509Certificate2)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ListenHttpsOnAnyPort (builder As IWebHostBuilder, Optional sslCertificate As X509Certificate2 = Nothing) As IWebHostBuilder" />
      <MemberSignature Language="F#" Value="static member ListenHttpsOnAnyPort : Microsoft.AspNetCore.Hosting.IWebHostBuilder * System.Security.Cryptography.X509Certificates.X509Certificate2 -&gt; Microsoft.AspNetCore.Hosting.IWebHostBuilder" Usage="Microsoft.AspNetCore.Testing.ServiceFakesExtensions.ListenHttpsOnAnyPort (builder, sslCertificate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
        <Parameter Name="sslCertificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate2" />
      </Parameters>
      <Docs>
        <param name="builder">An <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> instance.</param>
        <param name="sslCertificate">An SSL certificate for the port. If null, a self-signed certificate is created and used.</param>
        <summary>
            Adds Kestrel server instance listening on a random HTTPS port.
            </summary>
        <returns>The same <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> instance to allow method chaining.</returns>
        <remarks>When a concrete port is set by caller, it's not further validated if the port is really free.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseTestStartup">
      <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Hosting.IWebHostBuilder UseTestStartup (this Microsoft.AspNetCore.Hosting.IWebHostBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Hosting.IWebHostBuilder UseTestStartup(class Microsoft.AspNetCore.Hosting.IWebHostBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.AspNetCore.Testing.ServiceFakesExtensions.UseTestStartup(Microsoft.AspNetCore.Hosting.IWebHostBuilder)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseTestStartup (builder As IWebHostBuilder) As IWebHostBuilder" />
      <MemberSignature Language="F#" Value="static member UseTestStartup : Microsoft.AspNetCore.Hosting.IWebHostBuilder -&gt; Microsoft.AspNetCore.Hosting.IWebHostBuilder" Usage="Microsoft.AspNetCore.Testing.ServiceFakesExtensions.UseTestStartup builder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.AspNetCore.Testing</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.AspNetCore.Hosting.IWebHostBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="Microsoft.AspNetCore.Hosting.IWebHostBuilder" RefType="this" />
      </Parameters>
      <Docs>
        <param name="builder">An <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> instance.</param>
        <summary>
            Adds an empty Startup class to satisfy ASP.NET check.
            </summary>
        <returns>The same <see cref="T:Microsoft.AspNetCore.Hosting.IWebHostBuilder" /> instance to allow method chaining.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
