<Type Name="HeaderUtilities" FullName="Microsoft.Net.Http.Headers.HeaderUtilities">
  <TypeSignature Language="C++ CLI" Value="public ref class HeaderUtilities abstract sealed" />
  <TypeSignature Language="C#" Value="public static class HeaderUtilities" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit HeaderUtilities extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Net.Http.Headers.HeaderUtilities" />
  <TypeSignature Language="VB.NET" Value="Public Class HeaderUtilities" />
  <TypeSignature Language="F#" Value="type HeaderUtilities = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>3.1.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
    <AssemblyVersion>6.0.0.0</AssemblyVersion>
    <AssemblyVersion>7.0.0.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="aspnetcore-8.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="aspnetcore-8.0">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.NullableContext(1)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.NullableContext(1)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
            Provides utilities to parse and modify HTTP header values.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ContainsCacheDirective">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ContainsCacheDirective(Microsoft::Extensions::Primitives::StringValues cacheControlDirectives, System::String ^ targetDirectives);" />
      <MemberSignature Language="C#" Value="public static bool ContainsCacheDirective (Microsoft.Extensions.Primitives.StringValues cacheControlDirectives, string targetDirectives);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ContainsCacheDirective(valuetype Microsoft.Extensions.Primitives.StringValues cacheControlDirectives, string targetDirectives) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.ContainsCacheDirective(Microsoft.Extensions.Primitives.StringValues,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ContainsCacheDirective (cacheControlDirectives As StringValues, targetDirectives As String) As Boolean" />
      <MemberSignature Language="F#" Value="static member ContainsCacheDirective : Microsoft.Extensions.Primitives.StringValues * string -&gt; bool" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.ContainsCacheDirective (cacheControlDirectives, targetDirectives)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cacheControlDirectives" Type="Microsoft.Extensions.Primitives.StringValues" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="targetDirectives" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="cacheControlDirectives">
            The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> containing the set of cache control directives.
            </param>
        <param name="targetDirectives">
            The target cache control directives to look for.
            </param>
        <summary>
            Check if a target directive exists among the set of given cache control directives.
            </summary>
        <returns>
          <see langword="true" /> if <paramref name="targetDirectives" /> is contained in <paramref name="cacheControlDirectives" />;
            otherwise, <see langword="false" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EscapeAsQuotedString">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Extensions::Primitives::StringSegment EscapeAsQuotedString(Microsoft::Extensions::Primitives::StringSegment input);" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Primitives.StringSegment EscapeAsQuotedString (Microsoft.Extensions.Primitives.StringSegment input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Extensions.Primitives.StringSegment EscapeAsQuotedString(valuetype Microsoft.Extensions.Primitives.StringSegment input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.EscapeAsQuotedString(Microsoft.Extensions.Primitives.StringSegment)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function EscapeAsQuotedString (input As StringSegment) As StringSegment" />
      <MemberSignature Language="F#" Value="static member EscapeAsQuotedString : Microsoft.Extensions.Primitives.StringSegment -&gt; Microsoft.Extensions.Primitives.StringSegment" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.EscapeAsQuotedString input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Primitives.StringSegment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.Extensions.Primitives.StringSegment" Index="0" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="input">The input to be escaped.</param>
        <summary>
            Escapes a <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> as a quoted-string, which is defined by
            <see href="https://tools.ietf.org/html/rfc7230#section-3.2.6">the RFC specification</see>.
            </summary>
        <returns>An escaped version of the quoted-string.</returns>
        <remarks>
            This will add a backslash before each backslash and quote and add quotes
            around the input. Assumes that the input does not have quotes around it,
            as this method will add them. Throws if the input contains any invalid escape characters,
            as defined by rfc7230.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatDate">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ FormatDate(DateTimeOffset dateTime);" />
      <MemberSignature Language="C#" Value="public static string FormatDate (DateTimeOffset dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatDate(valuetype System.DateTimeOffset dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.FormatDate(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FormatDate (dateTime As DateTimeOffset) As String" />
      <MemberSignature Language="F#" Value="static member FormatDate : DateTimeOffset -&gt; string" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.FormatDate dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date to format.</param>
        <summary>
            Formats the <paramref name="dateTime" /> using the RFC1123 format specifier.
            </summary>
        <returns>The formatted date.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatDate">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ FormatDate(DateTimeOffset dateTime, bool quoted);" />
      <MemberSignature Language="C#" Value="public static string FormatDate (DateTimeOffset dateTime, bool quoted);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatDate(valuetype System.DateTimeOffset dateTime, bool quoted) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.FormatDate(System.DateTimeOffset,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FormatDate (dateTime As DateTimeOffset, quoted As Boolean) As String" />
      <MemberSignature Language="F#" Value="static member FormatDate : DateTimeOffset * bool -&gt; string" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.FormatDate (dateTime, quoted)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="quoted" Type="System.Boolean" Index="1" FrameworkAlternate="aspnetcore-1.1;aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">The date to format.</param>
        <param name="quoted">Determines if the formatted date should be quoted.</param>
        <summary>
            Formats the <paramref name="dateTime" /> using the RFC1123 format specifier and optionally quotes it.
            </summary>
        <returns>The formatted date.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatInt64">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ FormatInt64(long value);" />
      <MemberSignature Language="C#" Value="public static string FormatInt64 (long value);" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatInt64(int64 value) cil managed" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.FormatInt64(System.Int64)" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FormatInt64 (value As Long) As String" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberSignature Language="F#" Value="static member FormatInt64 : int64 -&gt; string" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.FormatInt64 value" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1">System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" Index="0" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatNonNegativeInt64">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ FormatNonNegativeInt64(long value);" />
      <MemberSignature Language="C#" Value="public static string FormatNonNegativeInt64 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FormatNonNegativeInt64(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.FormatNonNegativeInt64(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FormatNonNegativeInt64 (value As Long) As String" />
      <MemberSignature Language="F#" Value="static member FormatNonNegativeInt64 : int64 -&gt; string" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.FormatNonNegativeInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="value">
            The number to convert.
            </param>
        <summary>
            Converts the non-negative 64-bit numeric value to its equivalent string representation.
            </summary>
        <returns>
            The string representation of the value of this instance, consisting of a sequence of digits ranging from 0 to 9 with no leading zeroes.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQuoted">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsQuoted(Microsoft::Extensions::Primitives::StringSegment input);" />
      <MemberSignature Language="C#" Value="public static bool IsQuoted (Microsoft.Extensions.Primitives.StringSegment input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsQuoted(valuetype Microsoft.Extensions.Primitives.StringSegment input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.IsQuoted(Microsoft.Extensions.Primitives.StringSegment)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsQuoted (input As StringSegment) As Boolean" />
      <MemberSignature Language="F#" Value="static member IsQuoted : Microsoft.Extensions.Primitives.StringSegment -&gt; bool" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.IsQuoted input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.Extensions.Primitives.StringSegment" Index="0" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="input">The value to inspect.</param>
        <summary>
            Determines if the specified <paramref name="input" /> is quoted.
            </summary>
        <returns>
          <see langword="true" /> if the value is quoted, otherwise <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveQuotes">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Extensions::Primitives::StringSegment RemoveQuotes(Microsoft::Extensions::Primitives::StringSegment input);" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Primitives.StringSegment RemoveQuotes (Microsoft.Extensions.Primitives.StringSegment input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Extensions.Primitives.StringSegment RemoveQuotes(valuetype Microsoft.Extensions.Primitives.StringSegment input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.RemoveQuotes(Microsoft.Extensions.Primitives.StringSegment)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveQuotes (input As StringSegment) As StringSegment" />
      <MemberSignature Language="F#" Value="static member RemoveQuotes : Microsoft.Extensions.Primitives.StringSegment -&gt; Microsoft.Extensions.Primitives.StringSegment" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.RemoveQuotes input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Primitives.StringSegment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.Extensions.Primitives.StringSegment" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="input">The input to remove quotes from.</param>
        <summary>
            Removes quotes from the specified <paramref name="input" /> if quoted.
            </summary>
        <returns>The value without quotes.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveQuotes">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RemoveQuotes(System::String ^ input);" />
      <MemberSignature Language="C#" Value="public static string RemoveQuotes (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RemoveQuotes(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.RemoveQuotes(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveQuotes (input As String) As String" />
      <MemberSignature Language="F#" Value="static member RemoveQuotes : string -&gt; string" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.RemoveQuotes input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseDate">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseDate(Microsoft::Extensions::Primitives::StringSegment input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParseDate (Microsoft.Extensions.Primitives.StringSegment input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseDate(valuetype Microsoft.Extensions.Primitives.StringSegment input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.TryParseDate(Microsoft.Extensions.Primitives.StringSegment,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseDate (input As StringSegment, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseDate : Microsoft.Extensions.Primitives.StringSegment * DateTimeOffset -&gt; bool" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.TryParseDate (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.Extensions.Primitives.StringSegment" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="input">The input value.</param>
        <param name="result">The parsed value.</param>
        <summary>
            Attempts to parse the specified <paramref name="input" /> as a <see cref="T:System.DateTimeOffset" /> value.
             </summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> can be parsed as a date, otherwise <see langword="false" />.
             </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseDate">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseDate(System::String ^ input, [Runtime::InteropServices::Out] DateTimeOffset % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParseDate (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseDate(string input, [out] valuetype System.DateTimeOffset&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.TryParseDate(System.String,System.DateTimeOffset@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseDate (input As String, ByRef result As DateTimeOffset) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseDate : string * DateTimeOffset -&gt; bool" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.TryParseDate (input, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" Index="0" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
        <Parameter Name="result" Type="System.DateTimeOffset" RefType="out" Index="1" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseInt64">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseInt64(System::String ^ value, [Runtime::InteropServices::Out] long % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParseInt64 (string value, out long result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseInt64(string value, [out] int64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.TryParseInt64(System.String,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseInt64 (value As String, ByRef result As Long) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseInt64 : string * int64 -&gt; bool" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.TryParseInt64 (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" Index="0" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
        <Parameter Name="result" Type="System.Int64" RefType="out" Index="1" FrameworkAlternate="aspnetcore-1.0;aspnetcore-1.1" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseNonNegativeInt32">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseNonNegativeInt32(Microsoft::Extensions::Primitives::StringSegment value, [Runtime::InteropServices::Out] int % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParseNonNegativeInt32 (Microsoft.Extensions.Primitives.StringSegment value, out int result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseNonNegativeInt32(valuetype Microsoft.Extensions.Primitives.StringSegment value, [out] int32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.TryParseNonNegativeInt32(Microsoft.Extensions.Primitives.StringSegment,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseNonNegativeInt32 (value As StringSegment, ByRef result As Integer) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseNonNegativeInt32 : Microsoft.Extensions.Primitives.StringSegment * int -&gt; bool" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.TryParseNonNegativeInt32 (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.Extensions.Primitives.StringSegment" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="result" Type="System.Int32" RefType="out" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="value">
            A string containing a number to convert.
            </param>
        <param name="result">
            When this method returns, contains the 64-bit signed integer value equivalent of the number contained
            in the string, if the conversion succeeded, or zero if the conversion failed. The conversion fails if
            the string is null or String.Empty, is not of the correct format, is negative, or represents a number
            greater than Int64.MaxValue. This parameter is passed uninitialized; any value originally supplied in
            result will be overwritten.
            </param>
        <summary>
            Try to convert a string representation of a positive number to its 64-bit signed integer equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
        <returns>
          <see langword="true" /> if parsing succeeded; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseNonNegativeInt64">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseNonNegativeInt64(Microsoft::Extensions::Primitives::StringSegment value, [Runtime::InteropServices::Out] long % result);" />
      <MemberSignature Language="C#" Value="public static bool TryParseNonNegativeInt64 (Microsoft.Extensions.Primitives.StringSegment value, out long result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseNonNegativeInt64(valuetype Microsoft.Extensions.Primitives.StringSegment value, [out] int64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.TryParseNonNegativeInt64(Microsoft.Extensions.Primitives.StringSegment,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseNonNegativeInt64 (value As StringSegment, ByRef result As Long) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseNonNegativeInt64 : Microsoft.Extensions.Primitives.StringSegment * int64 -&gt; bool" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.TryParseNonNegativeInt64 (value, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Microsoft.Extensions.Primitives.StringSegment" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="result" Type="System.Int64" RefType="out" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="value">
            A <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> containing a number to convert.
            </param>
        <param name="result">
            When this method returns, contains the 64-bit signed integer value equivalent of the number contained
            in the string, if the conversion succeeded, or zero if the conversion failed. The conversion fails if
            the <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> is null or String.Empty, is not of the correct format, is negative, or
            represents a number greater than Int64.MaxValue. This parameter is passed uninitialized; any value
            originally supplied in result will be overwritten.
            </param>
        <summary>
            Try to convert a <see cref="T:Microsoft.Extensions.Primitives.StringSegment" /> representation of a positive number to its 64-bit signed
            integer equivalent. A return value indicates whether the conversion succeeded or failed.
            </summary>
        <returns>
          <see langword="true" /> if parsing succeeded; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseSeconds">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParseSeconds(Microsoft::Extensions::Primitives::StringValues headerValues, System::String ^ targetValue, [Runtime::InteropServices::Out] Nullable&lt;TimeSpan&gt; % value);" />
      <MemberSignature Language="C#" Value="public static bool TryParseSeconds (Microsoft.Extensions.Primitives.StringValues headerValues, string targetValue, out TimeSpan? value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseSeconds(valuetype Microsoft.Extensions.Primitives.StringValues headerValues, string targetValue, [out] valuetype System.Nullable`1&lt;valuetype System.TimeSpan&gt;&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.TryParseSeconds(Microsoft.Extensions.Primitives.StringValues,System.String,System.Nullable{System.TimeSpan}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParseSeconds (headerValues As StringValues, targetValue As String, ByRef value As Nullable(Of TimeSpan)) As Boolean" />
      <MemberSignature Language="F#" Value="static member TryParseSeconds : Microsoft.Extensions.Primitives.StringValues * string * Nullable -&gt; bool" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.TryParseSeconds (headerValues, targetValue, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerValues" Type="Microsoft.Extensions.Primitives.StringValues" Index="0" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="targetValue" Type="System.String" Index="1" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
        <Parameter Name="value" Type="System.Nullable&lt;System.TimeSpan&gt;" RefType="out" Index="2" FrameworkAlternate="aspnetcore-2.0;aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">
          <Attributes>
            <Attribute FrameworkAlternate="aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0">
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="headerValues">
            The <see cref="T:Microsoft.Extensions.Primitives.StringValues" /> containing the set of header values to search.
            </param>
        <param name="targetValue">
            The target header value to look for.
            </param>
        <param name="value">
            When this method returns, contains the parsed <see cref="T:System.TimeSpan" />, if the parsing succeeded, or
            null if the parsing failed. The conversion fails if the <paramref name="targetValue" /> was not
            found or could not be parsed as a <see cref="T:System.TimeSpan" />. This parameter is passed uninitialized;
            any value originally supplied in result will be overwritten.
            </param>
        <summary>
            Try to find a target header value among the set of given header values and parse it as a
            <see cref="T:System.TimeSpan" />.
            </summary>
        <returns>
          <see langword="true" /> if <paramref name="targetValue" /> is found and successfully parsed; otherwise,
            <see langword="false" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnescapeAsQuotedString">
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::Extensions::Primitives::StringSegment UnescapeAsQuotedString(Microsoft::Extensions::Primitives::StringSegment input);" />
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.Primitives.StringSegment UnescapeAsQuotedString (Microsoft.Extensions.Primitives.StringSegment input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Extensions.Primitives.StringSegment UnescapeAsQuotedString(valuetype Microsoft.Extensions.Primitives.StringSegment input) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Net.Http.Headers.HeaderUtilities.UnescapeAsQuotedString(Microsoft.Extensions.Primitives.StringSegment)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function UnescapeAsQuotedString (input As StringSegment) As StringSegment" />
      <MemberSignature Language="F#" Value="static member UnescapeAsQuotedString : Microsoft.Extensions.Primitives.StringSegment -&gt; Microsoft.Extensions.Primitives.StringSegment" Usage="Microsoft.Net.Http.Headers.HeaderUtilities.UnescapeAsQuotedString input" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Net.Http.Headers</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>3.1.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
        <AssemblyVersion>6.0.0.0</AssemblyVersion>
        <AssemblyVersion>7.0.0.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.Primitives.StringSegment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="Microsoft.Extensions.Primitives.StringSegment" Index="0" FrameworkAlternate="aspnetcore-2.1;aspnetcore-2.2;aspnetcore-3.0;aspnetcore-3.1;aspnetcore-5.0;aspnetcore-6.0;aspnetcore-7.0;aspnetcore-8.0" />
      </Parameters>
      <Docs>
        <param name="input">The quoted-string to be unescaped.</param>
        <summary>
            Given a quoted-string as defined by <see href="https://tools.ietf.org/html/rfc7230#section-3.2.6">the RFC specification</see>,
            removes quotes and unescapes backslashes and quotes. This assumes that the input is a valid quoted-string.
            </summary>
        <returns>An unescaped version of the quoted-string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
