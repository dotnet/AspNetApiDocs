<Type Name="ITransformFactory" FullName="Yarp.ReverseProxy.Transforms.Builder.ITransformFactory">
  <TypeSignature Language="C#" Value="public interface ITransformFactory" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITransformFactory" FrameworkAlternate="yarp-1.0;yarp-1.1;yarp-2.0" />
  <TypeSignature Language="DocId" Value="T:Yarp.ReverseProxy.Transforms.Builder.ITransformFactory" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITransformFactory" />
  <TypeSignature Language="F#" Value="type ITransformFactory = interface" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ITransformFactory" FrameworkAlternate="yarp-2.1;yarp-2.2" />
  <AssemblyInfo>
    <AssemblyName>Yarp.ReverseProxy</AssemblyName>
    <AssemblyVersion>1.0.1.0</AssemblyVersion>
    <AssemblyVersion>1.1.2.0</AssemblyVersion>
    <AssemblyVersion>2.0.1.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
    <AssemblyVersion>2.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            Validates and builds transforms from the given parameters
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public bool Build (Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; transformValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Build(class Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext context, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; transformValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.Builder.ITransformFactory.Build(Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function Build (context As TransformBuilderContext, transformValues As IReadOnlyDictionary(Of String, String)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Build : Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; -&gt; bool" Usage="iTransformFactory.Build (context, transformValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformBuilderContext" />
        <Parameter Name="transformValues" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="context">The context to add any generated transforms to.</param>
        <param name="transformValues">The transform values to use as input.</param>
        <summary>
            Checks if the given transform values match a known transform, and if so, generates a transform and
            adds it to the context. This can throw if the transform values are invalid.
            </summary>
        <returns>True if this factory matches the given transform, otherwise false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public bool Validate (Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext context, System.Collections.Generic.IReadOnlyDictionary&lt;string,string&gt; transformValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Validate(class Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext context, class System.Collections.Generic.IReadOnlyDictionary`2&lt;string, string&gt; transformValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:Yarp.ReverseProxy.Transforms.Builder.ITransformFactory.Validate(Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Function Validate (context As TransformRouteValidationContext, transformValues As IReadOnlyDictionary(Of String, String)) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Validate : Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext * System.Collections.Generic.IReadOnlyDictionary&lt;string, string&gt; -&gt; bool" Usage="iTransformFactory.Validate (context, transformValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Yarp.ReverseProxy</AssemblyName>
        <AssemblyVersion>1.0.1.0</AssemblyVersion>
        <AssemblyVersion>1.1.2.0</AssemblyVersion>
        <AssemblyVersion>2.0.1.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
        <AssemblyVersion>2.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Yarp.ReverseProxy.Transforms.Builder.TransformRouteValidationContext" />
        <Parameter Name="transformValues" Type="System.Collections.Generic.IReadOnlyDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="context">The context to add any generated errors to.</param>
        <param name="transformValues">The transform values to validate.</param>
        <summary>
            Checks if the given transform values match a known transform, and if those values have any errors.
            </summary>
        <returns>True if this factory matches the given transform, otherwise false.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
