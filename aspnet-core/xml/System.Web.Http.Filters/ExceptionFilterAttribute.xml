<Type Name="ExceptionFilterAttribute" FullName="System.Web.Http.Filters.ExceptionFilterAttribute">
  <TypeSignature Language="C#" Value="public abstract class ExceptionFilterAttribute : System.Web.Http.Filters.FilterAttribute, System.Web.Http.Filters.IExceptionFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionFilterAttribute extends System.Web.Http.Filters.FilterAttribute implements class System.Web.Http.Filters.IExceptionFilter, class System.Web.Http.Filters.IFilter" />
  <TypeSignature Language="DocId" Value="T:System.Web.Http.Filters.ExceptionFilterAttribute" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExceptionFilterAttribute&#xA;Inherits FilterAttribute&#xA;Implements IExceptionFilter" />
  <TypeSignature Language="F#" Value="type ExceptionFilterAttribute = class&#xA;    inherit FilterAttribute&#xA;    interface IExceptionFilter&#xA;    interface IFilter" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Http</AssemblyName>
    <AssemblyVersion>5.2.9.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Http.Filters.FilterAttribute</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.Http.Filters.IExceptionFilter</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.Http.Filters.IFilter</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true, Inherited=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method, AllowMultiple=true, Inherited=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the attributes for the exception filter.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionFilterAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Http.Filters.ExceptionFilterAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Http</AssemblyName>
        <AssemblyVersion>5.2.9.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Web.Http.Filters.ExceptionFilterAttribute" /> class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnException">
      <MemberSignature Language="C#" Value="public virtual void OnException (System.Web.Http.Filters.HttpActionExecutedContext actionExecutedContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnException(class System.Web.Http.Filters.HttpActionExecutedContext actionExecutedContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Http.Filters.ExceptionFilterAttribute.OnException(System.Web.Http.Filters.HttpActionExecutedContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnException (actionExecutedContext As HttpActionExecutedContext)" />
      <MemberSignature Language="F#" Value="abstract member OnException : System.Web.Http.Filters.HttpActionExecutedContext -&gt; unit&#xA;override this.OnException : System.Web.Http.Filters.HttpActionExecutedContext -&gt; unit" Usage="exceptionFilterAttribute.OnException actionExecutedContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Http</AssemblyName>
        <AssemblyVersion>5.2.9.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionExecutedContext" Type="System.Web.Http.Filters.HttpActionExecutedContext" />
      </Parameters>
      <Docs>
        <param name="actionExecutedContext">The context for the action.</param>
        <summary>Raises the exception event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExceptionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task OnExceptionAsync (System.Web.Http.Filters.HttpActionExecutedContext actionExecutedContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task OnExceptionAsync(class System.Web.Http.Filters.HttpActionExecutedContext actionExecutedContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Http.Filters.ExceptionFilterAttribute.OnExceptionAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function OnExceptionAsync (actionExecutedContext As HttpActionExecutedContext, cancellationToken As CancellationToken) As Task" />
      <MemberSignature Language="F#" Value="abstract member OnExceptionAsync : System.Web.Http.Filters.HttpActionExecutedContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.OnExceptionAsync : System.Web.Http.Filters.HttpActionExecutedContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="exceptionFilterAttribute.OnExceptionAsync (actionExecutedContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Http</AssemblyName>
        <AssemblyVersion>5.2.9.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionExecutedContext" Type="System.Web.Http.Filters.HttpActionExecutedContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="actionExecutedContext">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.Http.Filters.IExceptionFilter.ExecuteExceptionFilterAsync">
      <MemberSignature Language="C#" Value="System.Threading.Tasks.Task IExceptionFilter.ExecuteExceptionFilterAsync (System.Web.Http.Filters.HttpActionExecutedContext actionExecutedContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Threading.Tasks.Task System.Web.Http.Filters.IExceptionFilter.ExecuteExceptionFilterAsync(class System.Web.Http.Filters.HttpActionExecutedContext actionExecutedContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Http.Filters.ExceptionFilterAttribute.System#Web#Http#Filters#IExceptionFilter#ExecuteExceptionFilterAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Function ExecuteExceptionFilterAsync (actionExecutedContext As HttpActionExecutedContext, cancellationToken As CancellationToken) As Task Implements IExceptionFilter.ExecuteExceptionFilterAsync" />
      <MemberSignature Language="F#" Value="abstract member System.Web.Http.Filters.IExceptionFilter.ExecuteExceptionFilterAsync : System.Web.Http.Filters.HttpActionExecutedContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&#xA;override this.System.Web.Http.Filters.IExceptionFilter.ExecuteExceptionFilterAsync : System.Web.Http.Filters.HttpActionExecutedContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="exceptionFilterAttribute.System.Web.Http.Filters.IExceptionFilter.ExecuteExceptionFilterAsync (actionExecutedContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.Http.Filters.IExceptionFilter.ExecuteExceptionFilterAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Http</AssemblyName>
        <AssemblyVersion>5.2.9.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionExecutedContext" Type="System.Web.Http.Filters.HttpActionExecutedContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="actionExecutedContext">The context for the action.</param>
        <param name="cancellationToken">The cancellation context.</param>
        <summary>Asynchronously executes the exception filter.</summary>
        <returns>The result of the execution.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
